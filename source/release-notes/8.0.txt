.. _release-notes-8.0:

=================================================
Release Notes for MongoDB 8.0 (Release Candidate)
=================================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: twocols

.. include:: includes/rc-available.rst

This page describes changes and new features introduced in MongoDB 8.0.

MongoDB 8.0 is a |lts| Release, which means that it is supported for
both MongoDB Atlas and on-premises deployments. MongoDB 8.0 includes
changes introduced in MongoDB Rapid Releases 7.1, 7.2, and 7.3. To see
changes introduced in these rapid releases, see
:ref:`8.0-rapid-release-changes`. 

To learn more about the differences between |lts| and Rapid releases,
see :ref:`release-version-numbers`. 

Platform Support Updates
------------------------

.. include:: includes/platform-support-updates.rst

Logging
-------

Starting in MongoDB 8.0, you can configure the Database Profiler to log
slow operations based on the time that MongoDB spends working on that
operation, rather than the total latency for the operation. This means
that factors such as waiting for locks and flow control do not affect
whether an operation exceeds the slow operation threshold.

This change provides the following improvements for logging and query
analysis:

- Slow queries are logged more accurately based on the time MongoDB
  spends processing the query.

- Query analysis tools such as the Query Profiler, Performance Advisor,
  and Search Query Telemetry report slow operations based on
  ``workingMillis`` instead of ``durationMillis``. This change provides
  a more accurate view of problematic queries.

- :ref:`Slow query logs <log-message-json-examples-slow-op>` include a
  metric for the time queued on execution tickets,
  ``queues.execution.totalTimeQueuedMicros``. This metric helps identify
  whether an operation is slow because of the time it takes to complete,
  or the time it spends waiting to start. 

For more information, see :method:`db.setProfilingLevel()`.

Database Profiler
~~~~~~~~~~~~~~~~~

When you specify a :ref:`filter <set-profiling-level-options-filter>`
for the database profiler, you can log operations based on the new
``workingMillis`` metric. You can log operations based on both
``workingMillis`` and ``durationMillis`` and set each metric to a
different threshold.

Aggregation
-----------

BinData Conversion
~~~~~~~~~~~~~~~~~~

Starting in MongoDB 8.0, you can use the :expression:`$convert` operator
to perform the following conversions:

- String values to binData values
- binData values to string values

MongoDB 8.0 also includes a new helper expression,
:expression:`$toUUID`, which provides simplified syntax for converting
strings to :abbr:`UUID (Universally unique identifier)` values.

$queryStats Change Stream Improvements
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Starting in MongoDB 8.0, :pipeline:`$queryStats` improves tracking and
reporting metrics for change streams. For more information, see
:ref:`$queryStats Change Streams Behavior
<queryStats-change-stream-behavior>`.

``$rank`` and ``$denseRank`` Behavior
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/fact-8-0-rank-dense-rank-fix.rst


Sharding
--------

Unshard Collections
~~~~~~~~~~~~~~~~~~~

Starting in MongoDB 8.0, you can unshard existing sharded collections with the
:dbcommand:`unshardCollection` command or the :method:`sh.unshardCollection`
method. This operation moves all documents in the collection onto a specified
shard or the shard with the least amount of data.

Replication
-----------

New ``replSetGetStatus`` Metrics
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Starting in MongoDB 8.0, the following metrics are available when using the
:dbcommand:`replSetGetStatus` command:

- :data:`replSetGetStatus.electionCandidateMetrics.lastSeenWrittenOpTimeAtElection`
- :data:`replSetGetStatus.electionParticipantMetrics.lastWrittenOpTimeAtElection`
- :data:`replSetGetStatus.electionParticipantMetrics.maxWrittenOpTimeInSet`
- :data:`replSetGetStatus.members[n].optimeWritten`
- :data:`replSetGetStatus.members[n].optimeWrittenDate`
- :data:`replSetGetStatus.members[n].lastWrittenWallTime`
- :data:`replSetGetStatus.optimeWritten`
- :data:`replSetGetStatus.optimeWrittenDate`
- :data:`replSetGetStatus.optimes.lastWrittenWallTime`
- :data:`replSetGetStatus.optimes.writtenOpTime`

Replication
-----------

Oplog Buffers
~~~~~~~~~~~~~

Starting in MongoDB 8.0, secondaries write and apply oplog entries for each batch
in parallel. A writer thread reads new entries from the primary and writes them
to the local oplog. An applier thread asynchronously applies these changes to the
local database. This changes increases replication throughput for secondaries.

This introduces a breaking change for :serverstatus:`metrics.repl.buffer`, as it
now provides metrics on two buffers instead of one.

MongoDB 8.0 deprecates the following server status metrics:

- :serverstatus:`metrics.repl.buffer.count`
- :serverstatus:`metrics.repl.buffer.maxSizeBytes`
- :serverstatus:`metrics.repl.buffer.sizeBytes`

MongoDB 8.0 adds the following server status metrics:

- :serverstatus:`metrics.repl.buffer.apply`
- :serverstatus:`metrics.repl.buffer.apply.count`
- :serverstatus:`metrics.repl.buffer.apply.maxCount`
- :serverstatus:`metrics.repl.buffer.apply.maxSizeBytes`
- :serverstatus:`metrics.repl.buffer.apply.sizeBytes`
- :serverstatus:`metrics.repl.buffer.write`
- :serverstatus:`metrics.repl.buffer.write.count`
- :serverstatus:`metrics.repl.buffer.write.maxSizeBytes`
- :serverstatus:`metrics.repl.buffer.write.sizeBytes`
- :serverstatus:`metrics.repl.write`
- :serverstatus:`metrics.repl.write.batchSize`
- :serverstatus:`metrics.repl.write.batches`
- :serverstatus:`metrics.repl.write.batches.num`
- :serverstatus:`metrics.repl.write.batches.totalMillis`

General Changes
---------------

Moving Collections that have Change Streams
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/movePrimary-change-streams.rst

For details, see :ref:`movePrimary-change-streams`.

New Database Commands
~~~~~~~~~~~~~~~~~~~~~

- :dbcommand:`abortMoveCollection`
- :dbcommand:`abortUnshardCollection`
- :dbcommand:`moveCollection`
- :dbcommand:`unshardCollection`


New mongosh Methods
~~~~~~~~~~~~~~~~~~~

- :method:`sh.abortMoveCollection()`
- :method:`sh.abortUnshardCollection()`
- :method:`sh.moveCollection()`
- :method:`sh.unshardCollection`

Moveable Collections
~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/moveable-collections-intro.rst

Shutdown Performance
~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/fact-8-0-shutdown-speed.rst

Store Application Data on Config Shards
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Starting in MongoDB 8.0, you can configure a config server to store
application data in addition to the usual sharded cluster metadata. The
config server is then known as a *config shard*. For details, see
:ref:`sharded-cluster-config-server-config-shards`.

$lookup Stage in Transactions with Sharded Collections
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Starting in MongoDB 8.0, you can use the :pipeline:`$lookup` stage within 
a transaction while targeting a sharded collection.

Compaction Improvements
~~~~~~~~~~~~~~~~~~~~~~~

Background Compaction
`````````````````````

Starting in MongoDB 8.0, you can use the new :dbcommand:`autoCompact` command 
to perform background compaction. If enabled, the server attempts to keep free 
space within each collection and index below the specified the 
``freeSpaceTargetMB`` value.

dryRun Option 
`````````````

.. include:: /includes/fact-compact-dryrun.rst 

Parameter Filtering
~~~~~~~~~~~~~~~~~~~

Starting in MongoDB 8.0, the :dbcommand:`getParameter` command
accepts a ``setAt`` field. You can use this field to filter the
``allParameters: true`` return document to show only those
parameters that you can set at 
:ref:`startup <getParameters-startup>` or 
:ref:`runtime <getParameters-runtime>`.

New Bulk Write Command
~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/bulkWrite-introduction.rst

Read Concern on Capped Collections
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/snapshot-capped-collections.rst

DDL Operations
~~~~~~~~~~~~~~

In MongoDB 8.0, if you add or remove a shard while your cluster executes
a DDL operation (operation that modifies a collection such as
:dbcommand:`reshardCollection`), any operation that adds or removes a
shard only executes after the concurrent DDL operation finishes. 

Default Timeout for Queries
~~~~~~~~~~~~~~~~~~~~~~~~~~~

Starting in MongoDB 8.0, you can use the :parameter:`defaultMaxTimeMS`
cluster parameter to specify a default time limit for individual read
operations to complete.

New Query Shape and Query Settings
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

MongoDB 8.0 introduces a new :ref:`query shape <query-shapes>`. The
pre-existing query shape is renamed as the :term:`plan cache query
shape`.

Starting in MongoDB 8.0, you can add query settings for the new query
shape. The :term:`query optimizer` uses the query settings as an
additional input during query planning, which affects the plan selected
to run a query that has a matching query shape.

Query settings have improved functionality compared to :ref:`index
filters <index-filters>`. Index filters are also deprecated starting in
MongoDB 8.0, and you should avoid using them.

- To add query settings, use the :dbcommand:`setQuerySettings` command.
- To delete query settings, use the :dbcommand:`removeQuerySettings`
  command.
- To retrieve query settings, use a :pipeline:`$querySettings` stage in
  an aggregation pipeline.
- To block a query shape, see :ref:`operation rejection filters
  <operation-rejection-filters>`.

Starting in MongoDB 8.0, ``queryShapeHash`` is included in the following
output:

- :dbcommand:`explain` command in the :data:`explain.queryShapeHash`
  field
- :ref:`database profiler <database-profiler>` in
  the :data:`system.profile.queryShapeHash` field
- :ref:`$currentOp aggregation pipeline stage <current-op-agg>` in
  the :data:`$currentOp.queryShapeHash` field
- :ref:`slow query log <log-message-slow-ops>`

.. include:: /includes/plan-cache-rename.rst

Sort Support for updateOne
~~~~~~~~~~~~~~~~~~~~~~~~~~

Starting in MongoDB 8.0, the :method:`~db.collection.updateOne` method supports
a ``sort`` option. This controls how MongoDB orders the document before it selects
the document to receive the update.

Previous releases use the :method:`~db.collection.findAndModify` and
:method:`~db.collection.findOneAndUpdate` methods to update
the first document in a user-specified sort order. Support for retryable writes
requires these methods to copy the entire document to a special side
collection for each node, which is a more expensive operation than the ``updateOne()``
method with the new ``sort`` option.

.. _8.0-tcmalloc-upgrade:

Upgraded TCMalloc 
~~~~~~~~~~~~~~~~~

.. include:: /includes/8.0-tcmalloc-intro.rst

serverStatus Metrics 
````````````````````

The following new :dbcommand:`serverStatus` metrics report information about 
``tcmalloc`` usage:

- :serverstatus:`tcmalloc.usingPerCPUCaches`
- :serverstatus:`tcmalloc.generic.peak_memory_usage`
- :serverstatus:`tcmalloc.tcmalloc.cpu_free`
- :serverstatus:`tcmalloc.tcmalloc.total_bytes_held`
- :serverstatus:`tcmalloc.tcmalloc.cpuCache`
- :serverstatus:`tcmalloc.tcmalloc.cpuCache.N.overflows`
- :serverstatus:`tcmalloc.tcmalloc.cpuCache.N.underflows`
- :serverstatus:`tcmalloc.tcmalloc_derived.total_free_bytes`

tcmallocEnableBackgroundThread Parameter
````````````````````````````````````````

Starting in MongoDB 8.0, the :parameter:`tcmallocEnableBackgroundThread` is 
enabled by default. This allows MongoDB to periodically release memory back to 
the operating system.

Query Planning and Execution
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Block Processing
````````````````

.. include:: /includes/fact-block-processing.rst

To see if your time series query uses block processing, check the  
:data:`explain.queryPlanner.winningPlan.slotBasedPlan.stages` field in the 
explain plan output.

To learn more, see :ref:`timeseries-querying-block-processing`.


Express Query Stages
````````````````````

Starting in MongoDB 8.0, a limited set of queries (including ``_id``
equality matches) skip regular query planning and execution. Instead,
these queries use an optimized index scan plan consisting of one of
these plan stages:

- ``EXPRESS_CLUSTERED_IXSCAN`` 
- ``EXPRESS_DELETE``
- ``EXPRESS_IXSCAN`` 
- ``EXPRESS_UPDATE``

For more information on query plans, see :ref:`explain-results`.

Rejected Query Plan Output
``````````````````````````

.. include:: /includes/explain-results/8.0-rejected-query-plan-changes.rst

This change also ensures that ``executionStats`` for rejected plans are
non-zero. As a result, you can now see statistics such as how many
documents or keys a rejected plan examined. 

For more information on rejected query plans, see
:data:`explain.queryPlanner.rejectedPlans`.

Batch Multi-Document Insert Operations
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Starting in MongoDB 8.0, insert operations for 
:ref:`multi-document transactions <transactions>` no longer produce 
individual ``oplog`` entries. Instead, multi-document inserts are batched 
as a single entry. The change stream :data:`insert` event for each document
has the same ``clusterTime``.

This change increases performance of multi-document insert operations 
and eliminates possible replication lag caused by multiple ``oplog`` writes.

OIDC Identity Providers Can Share an Issuer
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/fact-oidc-multiple-config-for-same-issuer.rst


.. _8.0-security-changes:

Security
--------

{+qe+} Range Queries
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Starting in MongoDB 8.0, :ref:`Queryable Encryption <qe-manual-feature-qe>`
supports range queries on encrypted fields using the :query:`$lt`,
:query:`$lte`, :query:`$gt`, and :query:`$gte` operators. For details, see
:ref:`qe-reference-automatic-encryption-supported-operations`. To enable range
queries on encrypted fields, see :ref:`qe-create-encryption-schema`.

OCSF Schema for Log Messages
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Starting in MongoDB 8.0, you can specify the {+ocsf+} schema for audit
log messages. The OCSF schema provides logs in a standardized format
compatible with log processors.

To set the schema used for log messages, use the
:setting:`auditLog.schema` configuration file option.

For example log messages in OCSF format, see
:ref:`event-audit-messages-ocsf`.

.. _8.0-rapid-release-changes:

Changes Introduced in 7.X-Series Rapid Releases
-----------------------------------------------

MongoDB 8.0 includes changes and features from the following Rapid
Release versions:

- :ref:`MongoDB 7.1 Release Notes <release-notes-7.1>`

- :ref:`MongoDB 7.2 Release Notes <release-notes-7.2>`

- :ref:`MongoDB 7.3 Release Notes <release-notes-7.3>`

.. _8.0-upgrade:

Upgrade Procedures
------------------

.. important:: Feature Compatibility Version

   To upgrade to MongoDB 8.0 from a 7.0 deployment, the 7.0 deployment
   must have ``featureCompatibilityVersion`` set to ``7.0``. To check
   the version:

   .. code-block:: javascript

      db.adminCommand( { getParameter: 1, featureCompatibilityVersion: 1 } )

To upgrade to MongoDB 8.0, refer to the upgrade instructions specific to
your MongoDB deployment:

- :ref:`<8.0-upgrade-standalone>`

- :ref:`<8.0-upgrade-replica-set>`

- :ref:`<8.0-upgrade-sharded-cluster>`

If you need guidance on upgrading to 8.0, MongoDB professional services
offer major version upgrade support to help ensure a smooth transition
without interruption to your MongoDB application. To learn more, see
:products:`MongoDB Consulting </consulting?tck=docs_server>`.

.. _8.0-download:

Download
--------

To download MongoDB 8.0, go to the `MongoDB Download Center
<https://www.mongodb.com/try/download/community-edition?tck=docs_server>`__.

.. toctree::
   :titlesonly:
   :hidden:

   Compatibility Changes </release-notes/8.0-compatibility>
   Upgrade 7.0 to 8.0 </release-notes/8.0-upgrade>
   Downgrade 8.0 to 7.0 </release-notes/8.0-downgrade>
