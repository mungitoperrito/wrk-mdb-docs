.. _8.0-compatibility:

========================================================
Compatibility Changes in MongoDB 8.0 (Release Candidate)
========================================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. include:: includes/rc-available.rst

.. _8.0-downgrade-incompatible:
.. _8.0-downgrade-considerations:

Query Behavior
--------------

Queries for null Don't Match undefined Fields
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Starting in MongoDB 8.0, comparisons to ``null`` in equality match
expressions don't match ``undefined`` values.

For example, consider these documents and query:

.. code-block:: javascript

   // people collection
   
   { _id: 1, name: null },
   { _id: 2, name: undefined },
   { _id: 3, name2: "Alice" }

.. code-block:: javascript

   db.people.find( { name: null } )

Prior to MongoDB 8.0, the preceding query would match documents where:

- The ``name`` field is ``null`` (``_id: 1``)
- The ``name`` field is ``undefined`` (``_id: 2``)
- The ``name`` field does not exist (``_id: 3``)

Starting in MongoDB 8.0, the preceding query does not match the document
where the ``name`` field is ``undefined`` (``_id: 2``).

To match documents where ``name`` is ``undefined``, you must explicitly
specify the ``undefined`` type in your query. For example, the following
query returns all sample documents:

.. code-block:: javascript

   db.people.find( { 
      $or: [
         { name: null },
         { name: { $type: "undefined" } }
      ]
   } ) 

This query behavior change also impacts these operations:

- :query:`$eq`

- :query:`$in`
 
- :pipeline:`$lookup`, because a ``null`` local field no longer matches
  an ``undefined`` foreign field. 

Deprecations
------------

.. list-table::
   :widths: 20 80
   :header-rows: 1

   * - Deprecated
     - Description

   * - Hedged reads
     - .. include:: /includes/hedged-reads-deprecated.rst

   * - Index filters
     - *Deprecated in version 8.0.*

       .. include:: /includes/persistent-query-settings-avoid-index-filters-intro.rst

   * - Server-side JavaScript functions
     - .. include:: /includes/server-side-js-deprecated.rst

   * - ``tcmallocAggressiveMemoryDecommit``
     - MongoDB 8.0 deprecates the ``tcmallocAggressiveMemoryDecommit`` parameter.

   * - ``enableFinerGrainedCatalogCacheRefresh``
     - MongoDB 8.0 deprecates the ``enableFinerGrainedCatalogCacheRefresh``
       parameter.

Backward-Incompatible Features
------------------------------

General Changes
---------------

Shutdown Performance
~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/fact-8-0-shutdown-speed.rst

Concurrent Compact Commands Not Allowed
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Starting in MongoDB 8.0, if you try to run multiple concurrent
:dbcommand:`compact` commands on the same collection, MongoDB returns an
error.

Geospatial Input Validation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Starting in MongoDB 8.0, you cannot use geospatial queries with 
malformed input. In prior versions, certain geospatial queries 
accept malformed input without an error.

Aggregation
-----------

``$rank`` and ``$denseRank`` Behavior
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/fact-8-0-rank-dense-rank-fix.rst

$shardedDataDistribution Output
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/sharding/shardedDataDistribution-output-limitation.rst

For details, see :pipeline:`$shardedDataDistribution`.
