.. _release-notes-6.0:

=================================================
Release Notes for MongoDB 6.0 (Release Candidate)
=================================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: twocols

.. include:: /includes/rc-available.rst

This page describes changes and new features introduced in MongoDB 6.0.

MongoDB 6.0 is a |lts| Release, which means that it is supported for
both MongoDB Atlas and on-premises deployments. MongoDB 6.0 includes
changes introduced in MongoDB Rapid Releases 5.1, 5.2, and 5.3. This
page describes changes introduced in those Rapid Releases and MongoDB
6.0.

To learn more about the differences between |lts| and Rapid releases,
see :ref:`release-version-numbers`.

Aggregation
-----------

.. _6.0-rel-notes-new-agg-stages:

New Aggregation Stages
~~~~~~~~~~~~~~~~~~~~~~

MongoDB 6.0 introduces the following aggregation stages:

.. list-table::
   :header-rows: 1
   :widths: 20 80

   * - Stage
     - Description

   * - :pipeline:`$densify`
     - Creates new documents in a sequence of documents where values in
       a specified field are missing.

   * - :pipeline:`$documents`
     - Returns literal documents from input expressions.

   * - :pipeline:`$fill`
     - .. include:: /includes/fact-fill-description.rst

.. _6.0-rel-notes-new-agg-operators:

New Aggregation Operators
~~~~~~~~~~~~~~~~~~~~~~~~~

MongoDB 6.0 introduces the following aggregation operators:

.. list-table::
   :header-rows: 1
   :widths: 20 80

   * - Operator
     - Description

   * - :group:`$bottom`
     - Returns the bottom element within a group according to the specified 
       sort order.

   * - :group:`$bottomN`
     - Returns an aggregation of the bottom ``n`` elements within a group,
       according to the specified sort order.

   * - :group:`$firstN`
     - Returns an aggregation of the first ``n`` elements within a group.
       Distinct from the :expression:`$firstN` array operator.

   * - :expression:`$firstN (array operator) <$firstN>`
     - Returns a specified number of elements from the beginning of an 
       array.
       Distinct from the :group:`$firstN` accumulator.
  
   * - :group:`$lastN`
     - Returns an aggregation of the last ``n`` elements within a group.
       Distinct from the :expression:`$lastN` array operator.

   * - :expression:`$lastN (array operator) <$lastN>`
     - Returns a specified number of elements from the end of an 
       array.
       Distinct from the :group:`$lastN` accumulator.

   * - :group:`$linearFill`
     - .. include:: /includes/fact-linear-fill-description.rst

   * - :group:`$locf`
     - .. include:: /includes/fact-locf-description.rst
  
   * - :group:`$maxN`
     - Returns an aggregation of the ``n`` maximum valued elements 
       within a group.
       Distinct from the :expression:`$maxN` array operator.

   * - :expression:`$maxN (array operator) <$maxN>`
     - Returns the ``n`` largest values in an array.
       Distinct from the :group:`$maxN` accumulator.

   * - :group:`$minN`
     - Returns an aggregation of the ``n`` minimum valued elements 
       within a group.
       Distinct from the :expression:`$minN` array operator.

   * - :expression:`$minN (array operator) <$minN>`
     - Returns the ``n`` smallest values in an array.
       Distinct from the :group:`$minN` accumulator.

   * - :group:`$top`
     - Returns the top element within a group according to the specified 
       sort order.
       Distinct from the command :dbcommand:`top`.

   * - :group:`$topN`
     - Returns an aggregation of the top ``n`` elements within a group,
       according to the specified sort order.

   * - :expression:`$sortArray`
     - Sorts an array based on its elements. 

   * - :expression:`$tsIncrement`
     - .. include:: /includes/tsIncrement-introduction.rst
   
   * - :expression:`$tsSecond`
     - .. include:: /includes/tsSecond-introduction.rst

``$lookup`` and ``$graphLookup`` with Sharded Collections
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/5.1-fact-sharded-lookup-graphlookup.rst

|sbe-title| Can Execute ``$group`` and ``$lookup`` Stages
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Starting in version 6.0, MongoDB uses the :ref:`slot-based execution
query engine <5.1-rel-notes-sbe>` to execute :pipeline:`$group` and
:pipeline:`$lookup` stages when certain conditions are met.

For more information, see :ref:`sbe-pipeline-optimizations`.

.. _6.0-rel-notes-change-streams:

Change Streams
--------------

.. |change-streams| replace:: :ref:`change streams <changeStreams>`

.. include:: /includes/change-streams-optimization.rst

Clustered Collections
---------------------

.. include:: /includes/clustered-collections-introduction.rst

To learn about the benefits compared to a normal collection, see
:ref:`clustered-collections`.

Indexes
-------

Starting in MongoDB 5.1, you can use the :dbcommand:`collMod` database
command to add the ``expireAfterSeconds`` option to an existing
single-field non-TTL index.

Installation
------------

Notarized Binaries on macOS
~~~~~~~~~~~~~~~~~~~~~~~~~~~

Starting in MongoDB 6.0 (and 5.0.9, 4.4.14, 4.2.20), MongoDB
installations on macOS are notarized. When installing on macOS, you no
longer need to instruct macOS to trust MongoDB binaries.

SELinux Policies
~~~~~~~~~~~~~~~~

Starting in MongoDB 5.1, there is a new SE Linux Policy for:

- :ref:`MongoDB Enterprise Server <install-enterprise-rhel-configure-selinux>`
- :ref:`MongoDB Community Edition Server <install-rhel-configure-selinux>`

running on Red Hat Linux. The SELinux policy is for use with default
installations using ``rpm`` installer packages.

Replica Sets
------------

``initialSyncMethod`` Parameter                                            
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~                                            

Starting in MongoDB 5.2, the :parameter:`initialSyncMethod` determines  
whether :ref:`initial sync <replica-set-initial-sync>` is a                
:ref:`logical initial sync <replica-set-initial-sync-logical>` or a        
:ref:`file copy based initial sync                                         
<replica-set-initial-sync-file-copy-based>`.

:parameter:`initialSyncMethod` is only available in MongoDB Enterprise  
Server.

Security
--------

KMIP Key Activation
~~~~~~~~~~~~~~~~~~~

Starting in MongoDB 5.3, :setting:`security.kmip.activateKeys` activates all 
newly created KMIP keys upon creation and then periodically checks that 
keys are in an active state. 

Polling for Active State Keys
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Starting in MongoDB 5.3, :setting:`security.kmip.keyStatePollingSeconds` sets 
the polling interval in seconds at which :binary:`mongod` polls the KMIP server 
for active keys. 

Sharding
--------

Default Chunk Size Increased from 64 MB to 128 MB 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Starting in MongoDB 5.2, the 
:ref:`default chunk size <sharding-chunk-size>` is 128 megabytes. In 
earlier versions of MongoDB, the default chunk size is 64 megabytes.

``enableSharding`` No Longer Required
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Starting in MongoDB 6.0, the :dbcommand:`enableSharding` command is
no longer required to shard a collection.

Stable API
----------

The following sections describe additions to the :ref:`Stable API
<stable-api>` introduced in MongoDB 6.0.

To see the full list of database commands available in the Stable API,
see :ref:`stable-api-changelog`.

Database Commands
~~~~~~~~~~~~~~~~~

Starting in MongoDB 6.0, the following database commands are supported
in the Stable API:

.. list-table::
   :header-rows: 1
   :stub-columns: 1
   :widths: 10 20 10

   * - Command
     - Description
     - Stable API Version
   * - :dbcommand:`count`
     - Counts the number of documents in a collection or a view. (Also
       available in the Stable API for 5.0-series deployments starting
       in MongoDB 5.0.9.)
     - V1

Aggregation Stages and Operators
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Starting in MongoDB 6.0, the following aggregation stages and operators
are supported in the Stable API:

.. list-table::
   :header-rows: 1
   :stub-columns: 1
   :widths: 10 20 10

   * - Stage or Operator
     - Description
     - Stable API Version

   * - :group:`$bottom`
     - Returns the bottom element within a group according to the specified
       sort order.
     - V1

   * - :group:`$bottomN`
     - Returns an aggregation of the bottom ``n`` elements within a group,
       according to the specified sort order.
     - V1
   
   * - :expression:`$dateAdd`
     - Increments a :doc:`Date </reference/method/Date>` object by a
       specified number of time units.
     - V1

   * - :expression:`$dateDiff`
     - Returns the difference between two dates. 
     - V1

   * - :expression:`$dateSubtract`
     - Decrements a :doc:`Date </reference/method/Date>` object by a
       specified number of time units.
     - V1

   * - :expression:`$dateTrunc`
     - Truncates a date.
     - V1

   * - :pipeline:`$densify`
     - .. include:: /includes/fact-densify-description.rst
     - V1

   * - :group:`$firstN` (aggregation accumulator)
     - Returns an aggregation of the first ``n`` elements within a group.
     - V1

   * - :expression:`$firstN` (array operator)
     - Returns a specified number of elements from the beginning of an
       array. 
     - V1

   * - :expression:`$getField`
     - Returns the value of a specified field from a document.
     - V1

   * - :group:`$lastN` (aggregation accumulator)
     - Returns an aggregation of the last ``n`` elements within a group.
     - V1

   * - :expression:`$lastN` (array operator)
     - Returns a specified number of elements from the end of an
       array.
     - V1

   * - :group:`$locf`
     - .. include:: /includes/fact-locf-description.rst
     - V1  

   * - :group:`$maxN` (aggregation accumulator)
     - Returns an aggregation of the maximum value ``n`` elements within
       a group.
     - V1

   * - :expression:`$maxN` (array operator)
     - Returns the ``n`` largest values in an array.
     - V1

   * - :group:`$minN` (aggregation accumulator)
     - Returns an aggregation of the minimum value ``n`` elements within
       a group.
     - V1

   * - :expression:`$minN` (array operator)
     - Returns the ``n`` smallest values in an array.
     - V1

   * - :expression:`$setField`
     - Adds, updates, or removes a specified field in a document.
     - V1

   * - :pipeline:`$setWindowFields`
     - Performs operations on a specified span of documents in a
       collection, known as a *window*, and returns the results based on
       the chosen :ref:`window operator
       <setWindowFields-window-operators>`.
     - V1

   * - :expression:`$sortArray`
     - Sorts an array based on its elements.
     - V1

   * - :group:`$top`
     - Returns the top element within a group according to the specified
       sort order.
     - V1

   * - :group:`$topN`
     - Returns an aggregation of the top ``n`` elements within a group,
       according to the specified sort order.
     - V1

   * - :expression:`$tsIncrement`
     - .. include:: /includes/tsIncrement-introduction.rst
     - V1

   * - :expression:`$tsSecond`
     - .. include:: /includes/tsSecond-introduction.rst
     - V1


Time Series Collections
-----------------------

The following sections describe improvements and new features for
:ref:`time series collections <manual-timeseries-collection>`.

Sharded Time Series Collections
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/5.1/5.1-release-notes-sharded-time-series.rst

Updates and Deletes
~~~~~~~~~~~~~~~~~~~

Starting in MongoDB 5.1, time series collections support 
:ref:`update and delete operations
<timeseries-limitations-updates-deletes>` with limitations.

Time Series Column Compression
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Starting in MongoDB 5.2, time series collections now use **column
compression**. Column compression adds a number of innovations that work
together to significantly improve practical compression, reduce your
data's overall storage on disk, and also improve:

- Read performance
- The amount of data time series collections can store in-memory
- WiredTiger cache usage

Support for ``$geoNear``
~~~~~~~~~~~~~~~~~~~~~~~~

Starting in MongoDB 5.3, you can use the :pipeline:`$geoNear` pipeline
operator on any field in a :ref:`time series collection
<manual-timeseries-collection>`.

Additional Secondary Index Types
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can add additional :term:`secondary index <secondary index>` types
to time series collections, including :ref:`2dsphere <2dsphere-index>`
and :ref:`2d <2d-index>` indexes.

For all additional indexes and other improvements, see
:ref:`timeseries-add-secondary-index-mongodb-6.0`.

Sort Operations Use Secondary Indexes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Sort operations on time series collections can use indexes to improve
performance. For more information and an example, see
:ref:`timeseries-secondary-index-sort-performance`.

.. _6.0-rel-notes-general:

General Improvements
--------------------

Capped Collections Improvements
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Starting in MongoDB 6.0, you can change a 
:ref:`capped collection's <manual-capped-collection>` maximum size, either in 
bytes or in number of documents, using the :dbcommand:`collMod` command. See
:ref:`Resize a Capped Collection <resize-capped-collection>` for more details.

``numOrphanDocs`` Field Added to collStats Command
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Starting in MongoDB 6.0, the :ref:`collStats output <collStats-output>` 
includes the :data:`collStats.numOrphanDocs` field that shows the number of 
:term:`orphaned documents <orphaned document>` in the collection. 

Change Streams with Document Pre- and Post-Images
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Starting in MongoDB 6.0, you can use :ref:`change streams
<change-stream-output>` to output the version of a document before and
after changes (the document pre- and post-images). For examples, see
:ref:`db.collection.watch-change-streams-pre-and-post-images-example`.

Exclude Embedded Fields in ``serverStatus`` Output
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Starting in MongoDB 6.0 (and 5.0.9, 4.4.15), you can exclude embedded fields 
from the :dbcommand:`serverStatus` output.

Connections
~~~~~~~~~~~

Starting in MongoDB 6.0, the :method:`Mongo() <db.getMongo()>`
connection object has the following new methods:

- :method:`Mongo.getWriteConcern()` returns the :term:`write concern`
- :method:`Mongo.setWriteConcern()` sets the :term:`write concern`

Cluster Administration
----------------------

Cluster Server Parameters
~~~~~~~~~~~~~~~~~~~~~~~~~

Starting in MongoDB 6.0, you can use :ref:`<cluster-parameters>` to modify 
and retrieve configuration options for all nodes in a replica set or sharded 
cluster. You can use :dbcommand:`setClusterParameter` to modify cluster-wide 
options and :dbcommand:`getClusterParameter` to retrieve the value of a cluster 
parameter.

Multiple Arbiters Unsupported
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/support-multiple-arbiters.rst

Changes Affecting Compatibility
-------------------------------

Some changes can affect compatibility and may require user actions. For
a detailed list of compatibility changes, see
:ref:`6.0-compatibility`.

.. _6.0-upgrade:

Upgrade Procedures
------------------

Report an Issue
---------------

To report an issue, see
https://github.com/mongodb/mongo/wiki/Submit-Bug-Reports for
instructions on how to file a JIRA ticket for the MongoDB server or one
of the related projects.

.. toctree::
   :titlesonly:
   :hidden:

   /release-notes/6.0-compatibility
   /release-notes/6.0-downgrade
   /release-notes/6.0-upgrade
