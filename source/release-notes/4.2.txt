========================================================
Release Notes for MongoDB 4.2 (Development Series 4.1.x)
========================================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol


.. include:: /includes/in-dev.rst

Removed MMAPv1 Storage Engine
-----------------------------

MongoDB 4.2 removes the deprecated MMAPv1 storage engine. 

If your 4.0 deployment uses MMAPv1, you must change the deployment to
:doc:`/core/wiredtiger` before upgrading to MongoDB 4.2. For details,
see:

- :doc:`/tutorial/change-standalone-wiredtiger`

- :doc:`/tutorial/change-replica-set-wiredtiger`

- :doc:`/tutorial/change-sharded-cluster-wiredtiger`

.. _4.2-mmapv1-conf-options:

MMAPv1 Specific Configuration Options
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

MongoDB removes the following MMAPv1 specific configuration
options:

.. list-table::
   :header-rows: 1
   :widths: 70 45

   * - Configuration File Setting
     - Command-line Option

   * - ``storage.mmapv1.journal.commitIntervalMs``
     -

   * - ``storage.mmapv1.journal.debugFlags``
     - ``mongod --journalOptions``

   * - ``storage.mmapv1.nsSize``
     - ``mongod --nssize``

   * - ``storage.mmapv1.preallocDataFiles``
     - ``mongod --noprealloc``

   * - ``storage.mmapv1.quota.enforced``
     - ``mongod --quota``

   * - ``storage.mmapv1.quota.maxFilesPerDB``
     - ``mongod --quotaFiles``

   * - ``storage.mmapv1.smallFiles``
     - ``mongod --smallfiles``

   * - ``storage.repairPath``
     - ``mongod --repairpath``

   * - ``replication.secondaryIndexPrefetch``
     - ``mongod --replIndexPrefetch``

MMAPv1 Specific Parameters
~~~~~~~~~~~~~~~~~~~~~~~~~~

MongoDB removes the following MMAPv1 parameters:

- ``newCollectionsUsePowerOf2Sizes``
- ``replIndexPrefetch``

MMAPv1 Specific Command
~~~~~~~~~~~~~~~~~~~~~~~

MongoDB removes the MMAPv1 specific ``touch`` command.

MMAPv1 Specific Options for Binaries, Commands and Methods
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

MongoDB removes the MMAPv1 specific options:

- ``noPadding`` and ``usePowerOf2Sizes`` for :dbcommand:`collMod`

- ``verbose`` for :dbcommand:`collStats`

- ``flags`` for :dbcommand:`create`
 
- ``paddingFactor``, ``paddingBytes``, ``preservePadding`` for the
  :method:`db.createCollection()` method and the :dbcommand:`compact`
  command.

- ``repair`` for :binary:`~bin.mongodump`

Removed Commands and Methods
----------------------------

.. list-table::
   :header-rows: 1

   * - Removed Command
     - Removed Method
     - Notes

   * - ``group``

     - ``db.collection.group()``

     - Use :method:`db.collection.aggregate()` with the
       :pipeline:`$group` stage instead.

   * - ``eval``

     - 

     - The MongoDB 4.2 :binary:`~bin.mongo` shell methods
       :method:`db.eval()` and :method:`db.collection.copyTo()` can
       only be run when connected to MongoDB 4.0 or earlier.


   * - ``copydb``

     - 

     - The corresponding :binary:`~bin.mongo` shell helpers
       ``db.copyDatabase()`` can only be run when connected to MongoDB
       4.0 or earlier.

       As an alternative, users can use :binary:`~bin.mongodump` and
       :binary:`~bin.mongorestore` or write a script using the drivers.

   * - ``clone``

     - 

     - The corresponding :binary:`~bin.mongo` shell helpers
       ``db.cloneDatabase()`` can only be run when connected to MongoDB
       4.0 or earlier.

       As an alternative, users can use :binary:`~bin.mongodump` and
       :binary:`~bin.mongorestore` or write a script using the drivers.

   * - ``geoNear``

     - 

     - Use :method:`db.collection.aggregate()` with the
       :pipeline:`$geoNear` stage instead.

       For more information, see :ref:`4.2-compat-remove-geoNear`.

   * - ``parallelCollectionScan``
     - 
     -


   * - ``repairDatabase``

     - ``db.repairDatabase()``

     - For more information, see :ref:`4.2-compat-remove-repairDatabase`.

Remove ``maxScan`` Option
~~~~~~~~~~~~~~~~~~~~~~~~~

MongoDB removes the deprecated option ``maxScan`` for the
:dbcommand:`find` command and the :binary:`~bin.mongo` shell helper
``cursor.maxScan()``. Use either the ``maxTimeMS`` option for the
:dbcommand:`find` command or the helper :method:`cursor.maxTimeMS()` instead.

Sharded Clusters
----------------

.. include:: /includes/extracts/sharded-clusters-backup-restore-limitations-atomicity-general.rst

.. _4.2-security:

Security Improvements
---------------------

.. _4.2-tls:

Add ``TLS`` Options
~~~~~~~~~~~~~~~~~~~

MongoDB 4.2 adds ``TLS`` options for the :ref:`mongod
<tls-mongod-options>`, the :ref:`mongos <mongos-tls-options>`, and the
:ref:`mongo shell<mongo-shell-tls>` to replace the corresponding
``SSL`` options (deprecated in 4.2). The new TLS options provide
**identical** functionality as the deprecated ``SSL`` options as MongoDB
has always supported TLS 1.0 and later.

- For the command-line TLS options, refer to the :ref:`mongod
  <tls-mongod-options>`, :ref:`mongos <mongos-tls-options>`, and
  :ref:`mongo shell <mongo-shell-tls>` pages.

- For the corresponding ``mongod`` and ``mongos`` configuration file
  options, refer to the :ref:`configuration file
  <net-tls-conf-options>` page.

- For the connection string ``tls`` options, refer to the
  :ref:`connection string <uri-options-tls>` page.

.. tip::

   Most of the new ``TLS`` option names are similar to the ``SSL``
   option name; e.g. :option:`--tlsMode <mongod --tlsMode>` instead of
   :option:`--sslMode <mongod --sslMode>`. The exceptions are:

   - :setting:`net.tls.certificateKeyFile` vs. :setting:`net.ssl.PEMKeyFile`
   - :setting:`net.tls.certificateKeyFilePassword` vs. :setting:`net.ssl.PEMKeyPassword`
   - :option:`--tlsCertificateKeyFile <mongod --tlsCertificateKeyFile>` vs.  :option:`--sslPEMKeyFile <mongod --sslPEMKeyFile>`
   - :option:`--tlsCertificateKeyFilePassword <mongod --tlsCertificateKeyFile>` vs.  :option:`--sslPEMKeyPassword <mongod --sslPEMKeyPassword>`

.. seealso:: :ref:`4.2-tlsclustercafile`

Deprecate ``SSL`` Options
~~~~~~~~~~~~~~~~~~~~~~~~~

MongoDB 4.2 deprecates the ``SSL`` options for the :ref:`mongod
<ssl-mongod-options>`, the :ref:`mongos <mongos-ssl-options>`, and the
:ref:`mongo shell<mongo-shell-ssl>` as well as the corresponding
:ref:`net-ssl-conf-options` configuration file options.

Use the new :ref:`TLS <4.2-tls>` options instead.

Add Parameter ``tlsWithholdClientCertificate``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

MongoDB 4.2 adds :parameter:`tlsWithholdClientCertificate` to ``setParameter``
for :binary:`~bin.mongod` and :binary:`~bin.mongos`. Set to ``true`` to stop
the mongod acting as a client during intra-cluster communication from sending
its configured ``TLS`` certificate to the remote mongod. Use with settings
allowing inbound connections without certificates.

.. _4.2-tlsclustercafile:

Add ``tlsClusterCAFile`` Option
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

MongoDB 4.2 adds the 
:option:`--tlsClusterCAFile <mongod --tlsClusterCAFile>` option/:setting:`net.tls.clusterCAFile` for
:binary:`~bin.mongod` and :binary:`~bin.mongos`, which specifies a 
:file:`.pem` file for validating the TLS certificate from a client
establishing a connection. This lets you use separate Certificate Authorities
to verify the client to server and server to client portions of the TLS
handshake.

.. seealso:: :ref:`4.2-tls`

``passwordPrompt()``
~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/4.2-changes-passwordPrompt.rst

For example:

.. code-block:: javascript

   db.createUser( { 
      user:"user123",
      pwd: passwordPrompt(),   // Instead of specifying the password in cleartext
      roles:[ "readWrite" ]
   } )

Keyfile Format Change to YAML
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/4.2-changes-keyfile-fmt.rst

General Security Enhancements
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- Add :authaction:`serverStatus` to the :authrole:`backup` built-in
  role.

Aggregation Improvements
------------------------

.. _4.2-agg-out:

``$out`` Stage Enhancements
~~~~~~~~~~~~~~~~~~~~~~~~~~~

MongoDB 4.2 adds a new syntax for the :pipeline:`$out` aggregation stage. With
the new syntax, you can:

- merge the output with an existing collection

- replace the content of an existing collection with the output

- output to a collection in a different database

- output to an existing sharded collection.

An example of using the new syntax to merge output with an existing collection
in a different database is:

.. code-block:: javascript
  
   { $out: { to : "employees", mode : "insertDocuments", db : "hr" } }

With the older, still-supported syntax, you can only replace the content of an
existing collection with the output and you cannot output to a sharded
collection.

An example of the old syntax is: 

.. code-block:: javascript
   
   { $out: "stock" }

.. seealso:: :ref:`4.2-compat-out`

.. _4.2-trigonometry-expressions:

Aggregation Trigonometry Expressions
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

MongoDB 4.2 adds new
trigonometry expressions for use in aggregation pipelines.

.. include:: /includes/extracts/agg-operators-trigonometry.rst

New Stage
~~~~~~~~~

.. include:: /includes/extracts/4.2-changes-planCacheStats.rst

.. include:: /includes/extracts/4.2-changes-planCacheStats-pref.rst
 
Change Stream
-------------

``startAfter`` Option for Change Streams
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

MongoDB 4.2 adds ``startAfter`` as an option for :ref:`changeStreams`, which
starts a new change stream after the event indicated by a resume token. With
this option, you can start a change stream from an
:ref:`invalidate event <change-event-invalidate>`, thereby guaranteeing no
missed notifications after the previous stream was invalidated.

.. _wildcard-releasenotes:

Wildcard Indexes
----------------

MongoDB 4.2 adds wildcard indexes to support workloads where users query
against custom fields or a large variety of fields in a collection.
Administrators can create a wildcard index on a subset of fields or
all fields in a document, instead of creating multiple indexes to
support each user's unique data access patterns.

MongoDB indexes any scalar values associated to the specified field path
or paths, where the index key includes the full path to the field. For
fields that are documents, MongoDB descends into the document and
creates index keys for any field-value pairs in the document. For fields
that are arrays, MongoDB creates an index key for each value in the 
array similar to :ref:`multikey <index-type-multikey>` indexing 
behavior.

.. important::

   Wildcard indexes are not designed to replace workload-based index
   planning. For more information on creating indexes to support
   queries, see :ref:`create-indexes-to-support-queries`.

.. container:: admonition

   Consider a collection ``products_catalog`` where documents may
   contain a ``product_attributes`` field. The 
   ``product_attributes`` field can contain a variety of 
   arbitrary subfields, including embedded documents and arrays. 

   .. code-block:: json

      {
         "_id" : ObjectId("5c1d358bf383fbee028aea0b"),
         "product_name" : "Super Suit",
         "product_price" : 299.99,
         "product_attributes" : {
           "superStrength" : true,
           "superSpeed" : true,
           "elements" : [ "ice", "water" ],
           "resistance" : "Fire"
         }
       }

   * The following operation creates a wildcard index on the 
     ``product_attributes`` field path.

     .. code-block:: shell

        use inventory
        db.products_catalog.createIndex ( { "product_attributes.$**" : 1 } )

     The created index can support queries on 
     ``product_attributes`` and its subpaths:

     .. code-block:: shell

        db.products_catalog.find( { "product_attributes.superFlight" : true } )
        db.products_catalog.find( { "product_attributes.maxSpeed" : { $gt : 20 } } )
        db.products_catalog.find( { "product_attributes.elements" : { $eq: "water" } } )

   * For workloads where users may arbitrarily query against any field 
     in the document, you can create a wildcard index that covers all
     fields in the document:

     .. code-block:: shell

        use inventory
        db.products_catalog.createIndex( { "$**" : 1 } ) 

     The created index can support queries on any arbitrary field 
     within documents in the collection:

     .. code-block:: shell

        db.products_catalog.find( { "product_price" : { $lt : 25 } } )
        db.products_catalog.find( { "product_attributes.elements" : { $eq: "water" } } )

   * For workloads where users may arbitrarily query against any field
     in specific subpaths of the document, you can use the optional
     ``wildcardProjection`` document to specify inclusion or exclusion 
     patterns and limit the coverage of the wildcard index. The 
     following operation creates a wildcard index on specific subpaths 
     of ``product_attributes``:

     .. code-block:: shell

        use inventory
        db.products_catalog.createIndex(
          { "$**" : 1 },
          {
            "wildcardProjection" : {
              "product_attributes.elements" : 1
              "product_attributes.resistance" : 1
            }
          }
        )

     While the key pattern ``"$**" : 1`` covers all fields in the
     document, the ``wildcardProjection`` field limits the wildcard
     index coverage to only the specified fields. 

     The created index can support queries on
     ``product_attributes.elements``, 
     ``product_attributes.resistance``. and their subpaths:

     .. code-block:: shell

        db.products_catalog.find( { "product_attributes.elements" : { $eq: "water" } } )
        db.products_catalog.find( { "product_attributes.resistance" : "Fire" } )

Wildcard indexes are a type of :doc:`sparse </core/index-sparse>` index,
where the index only contains entries for fields with non-empty
values, e.g. a scalar value or ``null``.

You must set the :binary:`mongod <bin.mongod>`
:ref:`featureCompatibilityVersion <view-fcv>` (fCV) to 4.2 before you
can create wildcard indexes. For instructions on setting the fCV, see 
:ref:`4.2-compatibility-enabled`.

Syntax Notes
~~~~~~~~~~~~

MongoDB 4.2 adds the following syntax to the :dbcommand:`createIndexes` 
database command and its shell helpers 
:method:`db.collection.createIndex()` and
:method:`db.collection.createIndexes()` for creating wildcard indexes:

.. tabs::

   tabs:
     - id: db.collection.createIndex()
       name: db.collection.createIndex()
       content: |

         .. code-block:: javascript

            db.collectionName.createIndex(
              { "$**" : 1 },
              {
                wildcardProjection: {
                   projectionFieldA: 1,
                   projectionFieldB: 1
                }
              }
            )

     - id: db.collection.createIndexes()
       name: db.collection.createIndexes()
       content: |

         .. code-block:: javascript

            db.collectionName.createIndexes(
              [ { "$**" : 1 } ],
              {
                wildcardProjection: {
                   projectionFieldA: 1,
                   projectionFieldB: 1
                }
              }
            )  


     - id: createIndexes
       name: createIndexes
       content: |

         .. code-block:: javascript

            db.runCommand(
              {
                 createIndex: "collectionName",
                 indexes: [
                   {
                      key: { "$**" : 1 },
                      wildcardProjection: {
                        projectionFieldA: 1,
                        projectionFieldB: 1
                      }
                   }
                 ]
              }
            )

* To create a wildcard index on all fields, specify ``{ "$**" : 1 }`` 
  as the index key.

* To create a wildcard index on a specific field and its subpaths,
  specify the full path to that field as the index key and
  append ``"$**"`` to the path, i.e. ``{ "path.to.field.$**" : 1 }``.

  Wildcard indexes cannot support multiple key fields; i.e they cannot 
  be :doc:`compound </core/index-compound>`.

* To include or exclude specific fields and subfields from indexing,
  specify the optional ``wildcardProjection`` document.

  Each field in the ``wildcardProjection`` document represents a 
  field path and each value that defines whether to include or exclude 
  that field path from indexing.
  
  For example:

  - Index only the specified field paths and their subpaths:

    .. code-block:: javascript

       db.runCommand(
         {
             createIndex: "collectionName",
             indexes: [
               {
                 key: { "$**" : 1 },
                 wildcardProjection: {
                   field.path.a: 1,
                   field.path.b: 1
                 }
               }
             ]
         }
       )

  - Index all fields *excluding* the specified field paths and their 
    subpaths:

    .. code-block:: javascript

       db.runCommand(
         {
             createIndex: "collectionName",
             indexes: [
               {
                 key: { "$**" : 1 },
                 wildcardProjection: {
                   field.path.a: 0,
                   field.path.b: 0
                 }
               }
             ]
         }
       )

  The ``wildcardprojection`` cannot contain *both* include and exclude
  specifications. If the ``key`` specifies a single field path, you
  cannot exclude any field paths in the ``wildcardProjection`` document.

  By default, wildcard indexes ignore the ``_id`` field unless 
  specifically included in the ``wildcardProjection`` document. 

Limitations
~~~~~~~~~~~

Wildcard indexes do not support the following index types or properties:

* :doc:`TTL </core/index-ttl>`
* :doc:`Text </core/index-text>`
* :doc:`2d (Geospatial) </core/geospatial-indexes>`
* :doc:`2dsphere (Geospatial) </core/2dsphere>`
* :doc:`Hashed </core/index-hashed>`
* :doc:`Unique </core/index-unique>`

Wildcard indexes do not support the following query operator patterns:

* :query:`{ $exists : false } <$exists>`
* :query:`{ $eq: null } <$eq>`
* :query:`{ $eq: { } } <$eq>`
* :query:`{ $eq: [ { a : 1} ] } <$eq>`
* :query:`{ $eq: { \<object\> } } <$eq>`
* :query:`{ $ne: { \<object\> } } <$ne>`
* :query:`{ $ne: null } <$ne>` (for queries on field paths that include arrays)

You cannot shard a collection using a wildcard index.

For queries that specify multiple fields covered by a wildcard index,
the wildcard index can support at most *one* of the fields in the
query. The :ref:`query planner <query-plans-query-optimization>` selects
which wildcard index field to support for any given query. 

The query planner can also use the wildcard index to support
:method:`~cursor.sort()` operations **only if**:

- The sort field is covered by the wildcard index, *and*
- The sort field was also included in the query predicate, *and*
- The query planner selected the sort field for satisfying the query.

General Improvements
--------------------

``outputConfig`` Option
~~~~~~~~~~~~~~~~~~~~~~~

MongoDB 4.2 adds the :option:`--outputConfig <mongod --outputConfig>` option for 
:binary:`~bin.mongod` and :binary:`~bin.mongos`, which outputs the resolved 
YAML configuration document to ``stdout`` and halts the server instance.

Remove Index Key Size Limit
~~~~~~~~~~~~~~~~~~~~~~~~~~~

Starting in MongoDB 4.2, for :ref:`featureCompatibilityVersion
<view-fcv>` set to ``"4.2"`` or greater, MongoDB removes the
:limit:`Index Key Limit`. For fCV set to ``"4.0"``, the limit still
applies.

.. seealso:: :ref:`4.2 Indexes Compatibility Changes <4.2-index-compat-changes>`

Remove Index Name Length Limit
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/4.2-changes-index-names.rst

.. seealso:: 
   :ref:`4.2 Indexes Compatibility Changes <4.2-index-compat-changes>`,
   :ref:`4.2-compatibility-enabled`

Externally Sourced Values for Configuration Files
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/fact-expansion-directive-intro.rst

The following expansion directives are available:

.. list-table::
   :header-rows: 1
   :widths: 30 70

   * - Expansion Directive
     - Description

   * - :configexpansion:`__rest`
     - Allows users to specify a ``REST`` endpoint as the external source
       for configuration file options *or* the full configuration file.

   * - :configexpansion:`__exec`
     - Allows users to specify a shell or terminal command as the
       external source for configuration file options *or* the
       full configuration file.

For complete documentation, see :ref:`externally-sourced-values`.

.. _4.2-currentOp:

``currentOp``
~~~~~~~~~~~~~

MongoDB 4.2 adds a new option ``idleCursors`` to the
:pipeline:`$currentOp` aggregation stage in order to return information
on idle cursors.

In addition, MongoDB 4.2 adds the following new fields to the documents
returned from the :pipeline:`$currentOp` aggregation stage,
:dbcommand:`currentOp` command, and :method:`db.currentOp()` helper:

.. list-table::
   :header-rows: 1

   * - ``$currentOp``
     - ``currentOp``/``db.currentOp()``
     - Description

   * - :data:`$currentOp.type`
     - :data:`currentOp.type`
   
     - Specifies whether the reported operation is an ``op``,
       ``idleSession``, or ``idleCursor``.

   * - :data:`$currentOp.cursor`
     - :data:`currentOp.cursor`

     - Specifies cursor details. Available when returning ``getmore``
       operations or ``idleCursor`` information. 

See also :ref:`4.2 current op compatibility changes <4.2-current-op-compat>`

Logging
~~~~~~~

- Added :data:`INITSYNC` component to log messages.

- Added :data:`ELECTION` component to log messages.

- When logging to :option:`syslog <mongod --syslog>`, the format of the
  message text includes the :ref:`component <log-message-components>`.
  For example:

  .. code-block:: none

     ...  ACCESS   [repl writer worker 5] Unsupported modification to roles collection ...

  Previously, the :option:`syslog <mongod --syslog>` message text did
  not include the component. For
  example:

  .. code-block:: none

     ... [repl writer worker 1] Unsupported modification to roles collection ...

- MongoDB 4.2 adds a ``usedDisk`` indicator to the :doc:`profiler log
  messages </tutorial/manage-the-database-profiler>` and
  :doc:`diagnostic log messages </reference/log-messages>` for the
  :dbcommand:`aggregate` operation. The ``usedDisk`` indicates whether
  any stages of an :dbcommand:`aggregate` operation wrote data to
  temporary files due to memory restrictions. For more information on
  aggregation memory restrictions, see :ref:`agg-memory-restrictions`.

- .. _slow-oplog:

  Starting in version 4.2 (also available starting in 4.0.6),
  secondary members of a replica set now log oplog entries that take
  longer than the slow operation threshold to apply. These messages are
  :option:`logged <mongod --logpath>` for the secondaries under the
  :data:`REPL` component with the text ``applied op: <oplog entry> took
  <num>ms``.

  .. code-block:: none

     2018-11-16T12:31:35.886-0500 I REPL   [repl writer worker 13] applied op: command { ... }, took 112ms

  The slow oplog application logging on secondaries are:

  - Not affected by the
    :setting:`~operationProfiling.slowOpSampleRate`; i.e. all slow
    oplog entries are logged by the secondary.

  - Not affected by the
    :parameter:`logLevel`/:setting:`systemLog.verbosity` level (or the
    :setting:`systemLog.component.replication.verbosity` level); i.e.
    for oplog entries, the secondary logs only the slow oplog entries.
    Increasing the verbosity level does not log all oplog entries.

  - Not captured by the :doc:`profiler
    </tutorial/manage-the-database-profiler>` and not affected by the
    profiling level.

  For more information on setting the slow operation threshold, see 

  - :option:`mongod --slowms`

  - :setting:`~operationProfiling.slowOpThresholdMs`

  - The :dbcommand:`profile` command or
    :method:`db.setProfilingLevel()` shell helper method.

- Starting in MongoDB 4.2, the :dbcommand:`getLog` command truncates
  any event that contains more than 1024 characters. In earlier
  versions, :dbcommand:`getLog` truncates after 512 characters.

- .. include:: /includes/extracts/4.2-changes-log-storage.rst

- .. include:: /includes/extracts/4.2-changes-log-query-shapes-plan-cache-key.rst

  See :ref:`4.2-query-plans`.

Metrics
~~~~~~~

- Added new fields to :serverstatus:`shardingStatistics`:

  - :serverstatus:`shardingStatistics.countDocsClonedOnRecipient`

  - :serverstatus:`shardingStatistics.countDocsClonedOnDonor`

  - :serverstatus:`shardingStatistics.countDocsDeletedOnDonor`

  - :serverstatus:`shardingStatistics.countRecipientMoveChunkStarted`

Network Compression
~~~~~~~~~~~~~~~~~~~

Starting in version 4.2, the network compressors for
:binary:`~bin.mongod` and :binary:`~bin.mongos` default to both
``snappy,zlib`` compressors, in that order. In version 4.0,
:binary:`~bin.mongod` and :binary:`~bin.mongos` enable network
compression by default with ``snappy`` as the compressor.

For more information on network compression, see
:setting:`net.compression.compressors`.

.. _4.2-query-plans:

``queryHash`` and ``planCacheKey``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- .. _4.2-query-hash:

  ``queryHash``
        .. include:: /includes/extracts/4.2-changes-query-shapes.rst

- .. _4.2-plan-cache-key:

  ``planCacheKey``
        .. include:: /includes/extracts/4.2-changes-plan-cache-key.rst

        .. seealso:: :ref:`plan-cache-key`

- The ``queryHash`` and ``planCacheKey`` are available in:

  - :doc:`profiler entry </tutorial/manage-the-database-profiler>`
    fields :data:`~system.profile.queryHash` and
    :data:`~system.profile.planCacheKey` the logged query operations.

  - :ref:`diagnostic log messages (i.e. mongod/mongos log
    messages)<log-message-slow-ops>` for the logged query operations.

  - :doc:`explain() output </reference/explain-results>` fields:
    :data:`~explain.queryPlanner.queryHash` and
    :data:`~explain.queryPlanner.planCacheKey`

The fields are also available in operations that return information
about the query plan cache:

- :pipeline:`$planCacheStats` aggregation stage (*New in MongoDB 4.2*)

- :method:`PlanCache.listQueryShapes()`
  method/:dbcommand:`planCacheListQueryShapes` command

- :method:`PlanCache.getPlansByQuery()`
  method/:dbcommand:`planCacheListPlans` command

``$regex`` and ``$not``
~~~~~~~~~~~~~~~~~~~~~~~

Starting in MongoDB 4.2 (and 4.0.7), :query:`$not` operator can perform logical
``NOT`` operation on :query:`$regex` operator expressions as well as
on regular expression objects (i.e. ``/pattern/``).

In 4.0 and earlier versions, you could use :query:`$not` operator with
regular expression objects (i.e. ``/pattern/``) but not with
:query:`$regex` operator expressions.


Changes Affecting Compatibility
-------------------------------

Some changes can affect compatibility and may require user actions. For
a detailed list of compatibility changes, see
:doc:`/release-notes/4.2-compatibility`.

.. _4.2-upgrade:

Upgrade Procedures
------------------

.. admonition:: Feature Compatibility Version

   To upgrade, the 4.0 instances must have
   ``featureCompatibilityVersion`` set to ``4.0``. To check the version:

   .. code-block:: javascript

      db.adminCommand( { getParameter: 1, featureCompatibilityVersion: 1 } )

   For specific details on verifying and setting the
   ``featureCompatibilityVersion`` as well as information on other
   prerequisites/considerations for upgrades, refer to the individual
   upgrade instructions:

   - :doc:`/release-notes/4.2-upgrade-standalone`

   - :doc:`/release-notes/4.2-upgrade-replica-set`

   - :doc:`/release-notes/4.2-upgrade-sharded-cluster`

If you need guidance on upgrading to 4.2, `MongoDB offers major version
upgrade services
<https://www.mongodb.com/products/consulting?jmp=docs>`_
to help ensure a smooth transition without interruption to your MongoDB application.

Report an Issue
---------------

To report an issue, see
https://github.com/mongodb/mongo/wiki/Submit-Bug-Reports for
instructions on how to file a JIRA ticket for the MongoDB server or one
of the related projects.

.. toctree::
   :hidden:

   /release-notes/4.2-compatibility
   /release-notes/4.2-upgrade-standalone
   /release-notes/4.2-upgrade-replica-set
   /release-notes/4.2-upgrade-sharded-cluster
   /release-notes/4.2-downgrade

