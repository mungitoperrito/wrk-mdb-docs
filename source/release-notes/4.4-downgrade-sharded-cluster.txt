======================================================
Downgrade |newversion| Sharded Cluster to |oldversion|
======================================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. role:: red(strong)
   :class: text-danger

.. include:: /includes/4.4-upgrade-replacements.rst

.. include:: /includes/in-dev.rst

Before you attempt any downgrade, familiarize yourself with the content
of this document.

Downgrade Path
--------------

.. include:: /includes/downgrade-path.rst

.. |downgrading| replace:: downgrading


Create Backup
-------------

*Optional but Recommended.*  Create a backup of your database.


Prerequisites
-------------

To downgrade from |newversion| to |oldversion|, you must remove
incompatible features that are persisted and/or update incompatible
configuration settings. 

.. |target| replace:: :binary:`~bin.mongos` instance

1. Namespace Length
~~~~~~~~~~~~~~~~~~~

.. container::

   Starting in MongoDB 4.4:

   .. include:: /includes/fact-collection-namespace-limit.rst

   Before downgrading, resolve any collections or views with namespaces
   that exceed the :limit:`Namespace Length` limit.

   To determine if you have any collections or views with namespaces
   that exceed the :limit:`Namespace Length` limit if the Feature
   Compatibility Version (fCV) is set to ``"4.2"``, connect
   :binary:`~bin.mongo` shell to the :binary:`~bin.mongos` and run:

   .. code-block:: javascript

      db.adminCommand("listDatabases").databases.forEach(function(d){
         let mdb = db.getSiblingDB(d.name);

         mdb.getCollectionInfos( ).forEach(function(c){
            namespace = d.name + "." + c.name
            namespacelenBytes =  encodeURIComponent(namespace).length

            if (namespacelenBytes > 120) {
               print (c.type.toUpperCase() + " namespace exceeds 120 bytes:: " + namespace )
            }
         } )
      })

   If any collection or view namespace exceeds 120 bytes, then :red:`prior` to
   downgrading the fCV:

   - For unsharded collections, rename the collections using the
     :dbcommand:`renameCollection` command.

   - For sharded collections:

     - Use :pipeline:`$merge` to a new sharded collection with a shorter
       name, then drop the original collection.

     - Use :binary:`~bin.mongoexport` and :binary:`~bin.mongoimport` into
       a new collection with a shorter name, then drop the original collection.

   - For views, use :method:`db.createView()` to recreate the view
     using a shorter name, then drop the original view.
     
.. _4.4-downgrade-feature-compatibility-sharded-cluster:

2. Downgrade Feature Compatibility Version (fCV)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To downgrade the ``featureCompatibilityVersion`` of your sharded
cluster:

#. Connect a :binary:`~bin.mongo` shell to the |target|.

#. .. include:: /includes/4.4-downgrade-fcv.rst

#. To ensure that all members of the sharded cluster reflect the
   updated ``featureCompatibilityVersion``, connect to each shard replica
   set member and each config server replica set member and check the
   ``featureCompatibilityVersion``:

   .. tip::

      For a sharded cluster that has access control enabled, to run the
      following command against a shard replica set member, you must
      connect to the member as a :ref:`shard local user
      <shard-local-users>`.

   .. code-block:: javascript

      db.adminCommand( { getParameter: 1, featureCompatibilityVersion: 1 } )

   All members should return a result that includes:

   .. code-block:: javascript

      "featureCompatibilityVersion" : { "version" : "4.2" }

   If any member returns a ``featureCompatibilityVersion`` of |newfcv|,
   wait for the member to reflect version |oldfcv| before proceeding.

For more information on the returned ``featureCompatibilityVersion``
value, see :ref:`view-fcv`.

2. Remove FCV |newversion| Persisted Features
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following steps are necessary only if fCV has ever been set to
|newfcv|.

Remove all persisted |newversion| |features| that are incompatible with
|oldversion|. These include:


.. |binary| replace:: any :binary:`~bin.mongod`/:binary:`~bin.mongos` instance

Procedure
---------

Downgrade a Sharded Cluster
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. warning::

   Before proceeding with the downgrade procedure, ensure that all
   members, including delayed replica set members in the sharded
   cluster, reflect the prerequisite changes.  That is, check the
   ``featureCompatibilityVersion`` and the removal of incompatible
   features for each node before downgrading.

.. include:: /includes/steps/4.4-downgrade-sharded-cluster.rst


