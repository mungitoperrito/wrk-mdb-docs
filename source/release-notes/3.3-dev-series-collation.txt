:orphan:

.. _collation:

==================================
Development Series 3.3.x Collation
==================================

.. default-domain:: mongodb

.. include:: /includes/3.3-dev-series.rst

See also :doc:`/release-notes/3.3-dev-series`.

Overview
--------

Collation allows users to specify language-specific rules for string
comparison. MongoDB 3.3.x introduces the collation option and
:method:`cursor.collation()` method to support language-specific rules
for string sorting and matching operations. 

You can specify collation for a collection, an index, or specific
operations that support collation. If you specify a collation at the
collection level:

- Indexes on that collection will be created with that collation unless
  the index creation operation explictly specify a different collation.
  
- Operations on that collection use the collection's default collation
  unless they explictly specify a different collation.

If collation is unspecified, MongoDB uses the simple binary comparison
used in prior versions

Collation Option
----------------

The collation option has the following syntax:

.. code-block:: javascript

   collation: {
      locale: <string>,
      caseLevel: <boolean>,
      caseFirst: <string>,
      strength: <int>,
      numericOrdering: <boolean>,
      alternate: <string>,
      maxVariable: <string>,
      backwards: <boolean>
   }


.. list-table::
   :header-rows: 1
   :widths: 20 80

   * - Field
     - Description

   * - ``locale``

     - String that represents the locale. See
       :ref:`collation-languages-locales` for a list of supported
       locales.
       
       To specify simple binary comparison, specify ``locale`` value of
       ``"simple"``.

   * - ``strength``

     - *Optional*. Integer that determines the level of comparison to perform. 
       Corresponds to `ICU Comparison Levels 
       <http://userguide.icu-project.org/collation/concepts#TOC-Comparison-Levels>`_.

       Possible values are:

       .. list-table::
          :header-rows: 1
          :widths: 10 90

          * - Value
            - Description
          * - 1

            - Primary level of comparison. Collation performs
              comparisons of the base characters only, ignoring other
              differences such as diacritics and case.

          * - 2 

            - Secondary level of comparison. Collation performs
              comparisons up to secondary differences, such as
              diacritics [#additional]_. That is,
              collation performs comparisons of base characters
              (primary differences) and diacritics (secondary
              differences). Differences between base characters takes
              precedence over secondary differences.

          * - 3

            - Tertiary level of comparison. Collation performs
              comparisons up to tertiary differences, such as case
              [#additional]_. That is, collation
              performs comparisons of base characters (primary
              differences), diacritics (secondary differences), and
              case (tertiary differences). Differences between base
              characters takes precedence over secondary differences,
              which takes precedence over tertiary differences.

              This is the default level.

          * - 4

            - Quaternary Level. Limited for specific use case to
              consider punctuation when levels 1-3 ignore punctuation
              or for processing Japanese text.
              
              .. COMMENT DocsTeam: need more specificity regarding the
                 Japanese text. Also see about maybe footnoting levels 4
                 and 5.
              

          * - 5

            - Identical Level. Limited for specific use case of tie
              breaker.
              
              .. COMMENT DocsTeam: need more specificity; per ICU -
                 level 5 distinguishes Hebrew cantillation marks.
                 Also see about maybe footnoting levels 4 and 5.

       See `ICU Collation: Comparison Levels
       <http://userguide.icu-project.org/collation/concepts#TOC-Comparison-Levels>`_
       for details.

   * - ``caseLevel``

     - *Optional*. Boolean that determines whether to include case
       comparison at ``strength`` level ``1`` or ``2``.

       If ``true``, include case comparison; i.e.

       - When used with ``strength:1``, collation compares base
         characters and case. 

       - When used with ``strength:2``, collation compares base
         characters, diacritics (and possible other secondary
         differences) and case.

       If ``false``, do not include case comparison at level
       ``1`` or ``2``. The default is ``false``.

       For more information, see `ICU Collation: Case Level
       <http://userguide.icu-project.org/collation/concepts#TOC-CaseLevel>`_.

   * - ``caseFirst``

     - *Optional*. Boolean that determines sort order of case
       differences during tertiary level comparisons.
   
       Possible values are: 
       
       .. list-table::
          :header-rows: 1
          :widths: 10 90

          * - Value
            - Description
          * - "upper"
            - Uppercase sorts before lowercase.
            
          * - "lower"
            - Lowercase sorts before uppercase.

          * - "off"

            - Default value. Similar to ``"lower"`` with slight
              differences. See
              `<http://userguide.icu-project.org/collation/customization>`_
              for details of differences.

   * - ``numericOrdering``

     - *Optional*. Boolean that determines whether to compare numeric strings
       as numbers or as strings.

       If ``true``, compare as numbers; i.e. ``"10"`` is greater than
       ``"2"``.

       If ``false``, compare as strings; i.e. ``"10"`` is less than
       ``"2"``.

       Default is ``false``.

   * - ``alternate``

     - *Optional*. String that determines whether collation should
       consider whitespace and punctuation as base characters for
       purposes of comparison.

       Possible values are: 
       
       .. list-table::
          :header-rows: 1
          :widths: 10 90

          * - Value
            - Description

          * - ``"non-ignorable"``

            - Whitespace and punctuation are considered base characters.

          * - ``"shifted"``

            - Whitespace and punctuation are not considered base
              characters and are only distinguished at strength levels
              greater than 3.
              
              See `ICU Collation: Comparison Levels
              <http://userguide.icu-project.org/collation/concepts#TOC-Comparison-Levels>`_
              for more information.

       Default is ``"non-ignorable"``.

   * - ``maxVariable``

     - *Optional*. String that determines up to which characters are
       are considered ignorable when ``alternate: "shifted"``. Has no
       effect if ``alternate: "non-ignorable"``

       Possible values are: 
       
       .. list-table::
          :header-rows: 1
          :widths: 10 90

          * - Value
            - Description

          * - ``"punct"``

            - Both whitespaces and punctuation are "ignorable", i.e.
              not considered base characters.

          * - ``"space"``

            - Whitespace are "ignorable", i.e. not considered base
              charactersnot considered base characters.


   * - ``backwards``

     - *Optional*. Boolean that determines whether strings with
       diacritics compare from the end of the string to front, such as
       with some French dictionary ordering. That is, the *last*
       diacritic difference determines the sort order for secondary
       differences.

       If ``true``, compare from end to front.

       If ``false``, compare from front to back.
       
       The default value is ``false``.

   * - ``normalization``

     - *Optional* Boolean that determines whether to check if text
       require normalization and to perform normalization. Generally,
       majority of text does not require this normalization processing.

       .. COMMENT DocsTeam:  need to be more specific in description:
          "normalizing combining characters in certain languages."
         
       If ``true``, check if fully normalized and perform normaliztion
       to compare text.
       
       If ``false``, does not check.
       
       The default value is ``false``.
       
       See
       `<http://userguide.icu-project.org/collation/concepts#TOC-Normalization>`_
       for details.

Operations that Accept Collation Option
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following operations accept the collation option:

``db.createCollection()``
``````````````````````````

You can specify collation at the collection level. For example, the
following operation creates a collection, specifying a collation for
the collection:

.. code-block:: javascript

   db.createCollection( "myColl", { collation: { locale: "fr" } } );

This collation will be used by indexes and operations that support
collation unless they explicitly specify a different collation. For
example, insert the following documents into ``myColl``:

.. code-block:: javascript

   { _id: 1, category: "café" }
   { _id: 2, category: "cafe" }
   { _id: 3, category: "cafE" }

The following operation uses the collection's collation:

.. code-block:: javascript

   db.myColl.find().sort( { category: 1 } )

The operation returns documents in the following order:

.. code-block:: javascript

   { "_id" : 2, "category" : "cafe" }
   { "_id" : 3, "category" : "cafE" }
   { "_id" : 1, "category" : "café" }

The same operation on a collection that uses simple binary collation
(i.e. no specific collation set) returns documents in the following order:

.. code-block:: javascript

   { "_id" : 3, "category" : "cafE" }
   { "_id" : 2, "category" : "cafe" }
   { "_id" : 1, "category" : "café" }


For a collection, you can only specify the collation during the
collection creation. Once set, you cannot modify the collection's
default collation.


``db.collection.createIndex()``
```````````````````````````````

You can specify collation for an index, as in the following example:

.. code-block:: javascript

   db.myColl.createIndex(
      { category: 1 },
      { name: "category_fr", collation: { locale: "fr", strength: 2 } }
   )

If you have specified a collation at the collection level, then:

- If you do not specify a collation when creating the index, MongoDB
  creates the index with that collation.

- If you do specify a collation when creating the index, MongoDB
  creates the index with the specified collation.

.. tip::
   
   By specifying a collation ``strength`` of ``1`` or ``2``, you can
   create a case-insensitive index. Index with a collation ``strength``
   of ``1`` is both diacritic- and case-insensitive.
   
Unlike other index options, you can create multiple indexes on the same
key(s) with different collations. To create indexes with the same key
pattern but different collations, you must supply unique index names.

both the collation option and the index name differ.

For example, given the previously created index, you can also create
the following indexes:

.. code-block:: javascript

  db.myColl.createIndex(
      { category: 1 },
      { unique:1 , name: "unique_coll_en", collation: { locale: "en"  } }
  );
 
  db.myColl.createIndex( { category: 1 } );
  
  
MongoDB creates the second index with ``{ collation: { locale: "fr" }
}``, which is the collation specified at the collection-level.

For string queries, to use an index that has collation specified,
operations must specify the same collation as the index.

``db.collection.aggregate()``
`````````````````````````````

You can specify the collation option for the
:method:`db.collection.aggregate()` method:

.. code-block:: javascript

   db.collection.aggregate( [ <stage>, ... ], { collation: { ... } } )

For example:

.. code-block:: javascript

   db.myColl.aggregate(
      [ { $group: { _id: "category", count: { $sum: 1 } } } ],
      { collation: { locale: "fr", strength: 1 } } 
   );


``db.collection.distinct()``
````````````````````````````

You can specify the collation option for the
:method:`db.collection.distinct()` method:

.. code-block:: javascript

   db.collection.distinct( <field>, <query filter>, { collation: { ... } } )

For example:

.. code-block:: javascript

   db.myColl.distinct( 
      "category",
      { category: "cafe" },
      { collation: { locale: "fr", strength: 1 } } 
   );


``db.collection.find<X>`` Methods
``````````````````````````````````

You can specify the collation option for the
:method:`db.collection.findAndModify()`,
:method:`db.collection.findOne()`,
:method:`db.collection.findOneAndDelete()`,
:method:`db.collection.findOneAndReplace()`, and
:method:`db.collection.findOneAndUpdate()` methods:

.. code-block:: javascript

   db.collection.findAndModify({
       query: <document>,
       sort: <document>,
       remove: <boolean>,
       update: <document>,
       new: <boolean>,
       ...
       collation: <document>
   });
   
   db.collection.findOneAndDelete(
      <filter>,
      {
        collation: { ... },
        projection: <document>,
        ...
      }
   )
   
   db.collection.findOneAndReplace(
      <filter>,
      <replacement>,
      {
        collation: { ... },
        projection: <document>,
        ...
      }
   )
   
   db.collection.findOneAndUpdate(
      <filter>,
      <update>,
      {
        collation: { ... },
        projection: <document>,
        sort: <document>,
        ...
      }

For example:

.. code-block:: javascript

   db.myColl.findAndModify({
       query: { category: "cafe" },
       sort: { category: 1 },
       update: { $set: { status: "Updated" } },
       collation: { locale: "fr", strength: 1 }
   });


.. seealso:: 

   To specify collation for
   :method:`db.collection.find()`, see :ref:`method-cursor-collation`.
   
.. COMMENT DocsTeam -- replace :ref:`method...` with :method:`cursor.collation()`.
   

``db.collection.group()``
`````````````````````````

.. note:: MongoDB 3.3.x deprecates the
   :method:`db.collection.group()` method. Instead, use
   :method:`db.collection.aggregate()` or
   :method:`db.collection.mapReduce()`.

``db.collection.mapReduce()``
`````````````````````````````

You can specify the collation option in the options document:

.. code-block:: javascript

   db.collection.mapReduce(
       <map>,
       <reduce>,
       {
         collation: { ... },
         out: <collection>,
         query: <document>,
         ...
      }
   )

For example:

.. code-block:: javascript

   db.myColl.mapReduce(
      function(){ emit(this.category, "matched cafe") },
      function(key,value){ return key; },
      { query: { category: "cafe" },
        collation: { locale: "fr", strength: 1 },
        out: "outputColl" }
   )
                        
Remove and Delete Methods
``````````````````````````

You can specify the collation option for the delete and remove methods:

.. code-block:: javascript

   db.collection.deleteOne(
      <query>,
      {
         collation: { ... },
         writeConcern: <document>
      }
   )
   db.collection.deleteMany(
      <query>,
      {
         collation: { ... },
         writeConcern: <document>
      }
   )

   db.collection.remove(
      <query>,
      { collation: { ... }, justOne: <boolean>, writeConcern: <document> }
   )

For example:

.. code-block:: javascript

   db.myColl.deleteOne(
      { category: "cafe" },
      { collation: { locale: "fr", strength: 1 } }
   )
    
Update and Replace Methods
``````````````````````````

You can specify the collation option for the update and replace methods:

.. code-block:: javascript

   db.collection.update(
      <query>, 
      <update>,
      { collation: { ... }, upsert: <boolean>, multi: <bool>, writeConcern: <document> }
   )
   
   db.collection.updateOne(
      <query>, 
      <update>,
      { collation: { ... }, upsert: <boolean>, writeConcern: <document> }
   )
   
   db.collection.updateMany(
      <query>, 
      <update>,
      { collation: { ... }, upsert: <boolean>, writeConcern: <document> }
   )
   
   db.collection.replaceOne(
      <query>, 
      <replacement document>,
      { collation: { ... }, upsert: <boolean>, writeConcern: <document> }
   )
     
For example:

.. code-block:: javascript

   db.myColl.updateMany( 
      { category: "cafe"},
      { $set: { status: "Updated" } },
      { collation: { locale: "fr", strength: 1 } }
   );

Bulk Write Methods
``````````````````

You can specify the collation option for the individual update,
replace, and delete operations in a bulk operation:

.. code-block:: javascript

   db.collection.bulkWrite([
        { updateOne: { filter: <document>, update: <document>, upsert: <boolean>, collation: { ... } } },
        { updateMany: { filter: <document>, update: <document>, upsert: <boolean>, collation: { ... } } },
        { replaceOne: { filter: <document>, replacement: <document>, upsert: <boolean>, collation: { ... } } },   
        { deleteOne :  { "filter" : <document>, collation: { ... } } },
        { deleteMany :  { "filter" : <document>, collation: { ... } } }
      ],
      {
         writeConcern : <document>,
         ordered : <boolean>
      }
   )

.. _method-cursor-collation:

``cursor.collation()``
----------------------

.. method:: cursor.collation(<collation document>)

   Specifies the collation for the cursor returned by the
   :method:`db.collection.find()`. To use, append to the
   :method:`db.collection.find()`. 

   The :method:`cursor.collation()` accepts the following collation
   document.

   .. code-block:: javascript

      {
         locale: <string>,
         caseLevel: <boolean>,
         caseFirst: <string>,
         strength: <int>,
         numericOrdering: <bool>,
         alternate: <string>,
         maxVariable: <string>,
         backwards: <boolean>
      }


   .. list-table::
      :widths: 20 80

      * - Field

        - Description

      * - ``locale``

        - String that represents the ICU locale. See
          :ref:`collation-languages-locales` for a list of supported
          locales.
       
          To specify simple binary comparison, specify ``locale`` value of
          ``"simple"``.


      * - ``strength``

        - *Optional*. Integer that determines the level of comparison to perform. 
          Corresponds to `ICU Comparison Levels 
          <http://userguide.icu-project.org/collation/concepts#TOC-Comparison-Levels>`_.

          Possible values are:

          .. list-table::
             :header-rows: 1
             :widths: 10 90

             * - Value
               - Description
             * - 1

               - Primary level of comparison. Collation performs
                 comparisons of the base characters only, ignoring other
                 differences such as diacritics and case.

             * - 2 

               - Secondary level of comparison. Collation performs
                 comparisons up to secondary differences, such as
                 diacritics [#additional]_. That is,
                 collation performs comparisons of base characters
                 (primary differences) and diacritics (secondary
                 differences). Differences between base characters takes
                 precedence over secondary differences.

             * - 3

               - Tertiary level of comparison. Collation performs
                 comparisons up to tertiary differences, such as case and
                 letter variants [#additional]. That is, collation
                 performs comparisons of base characters (primary
                 differences), diacritics (secondary differences), and
                 case and variants (tertiary differences). Differences between base
                 characters takes precedence over secondary differences,
                 which takes precedence over tertiary differences.

                 This is the default level.

             * - 4

               - Quaternary Level. Limited for specific use case to
                 consider punctuation when levels 1-3 ignore punctuation
                 or for processing Japanese text.

             * - 5

               - Identical Level. Limited for specific use case of tie
                 breaker.

          See `ICU Collation: Comparison Levels
          <http://userguide.icu-project.org/collation/concepts#TOC-Comparison-Levels>`_
          for details.

      * - ``caseLevel``

        - *Optional*. Boolean that determines whether to include case
          comparison at ``strength`` level ``1`` or ``2``.

          If ``true``, include case comparison; i.e.

          - When used with ``strength:1``, collation compares base
            characters and case. 

          - When used with ``strength:2``, collation compares base
            characters, diacritics (and possible other secondary
            differences) and case.

          If ``false``, do not include case comparison at level
          ``1`` or ``2``. The default is ``false``.

          For more information, see `ICU Collation: Case Level
          <http://userguide.icu-project.org/collation/concepts#TOC-CaseLevel>`_.

      * - ``caseFirst``

        - *Optional*. Boolean that determines sort order of case
          differences during tertiary level comparisons.
   
          Possible values are: 
       
          .. list-table::
             :header-rows: 1
             :widths: 10 90

             * - Value
               - Description
             * - "upper"
               - Uppercase has lower sort order than lowercase.
            
             * - "lower"
               - Lowercase has lower sort order than uppercase.

             * - "off"

               - Default value. Similar to ``"lower"`` with sligth
                 differences. See
                 `<http://userguide.icu-project.org/collation/customization>`_
                 for details of differences.

      * - ``numericOrdering``

        - *Optional*. Boolean that determines whether to compare numeric strings
          as numbers or as strings.

          If ``true``, compare as numbers; i.e. ``"10"`` is greater than
          ``"2"``.

          If ``false``, compare as strings; i.e. ``"10"`` is less than
          ``"2"``.

          Default is ``false``.

      * - ``alternate``

        - *Optional*. String that determines whether collation should
          consider whitespace and punctuation as base characters for
          purposes of comparison.

          Possible values are: 
       
          .. list-table::
             :header-rows: 1
             :widths: 10 90

             * - Value
               - Description

             * - ``"non-ignorable"``

               - Whitespace and punctuation are considered base characters.

             * - ``"shifted"``

               - Whitespace and punctuation are not considered base
                 characters and are only distinguished at strength levels
                 greater than 3.
              
                 See `ICU Collation: Comparison Levels
                 <http://userguide.icu-project.org/collation/concepts#TOC-Comparison-Levels>`_
                 for more information.

          Default is ``"non-ignorable"``.

      * - ``maxVariable``

        - *Optional*. String that determines up to which characters are
          are considered ignorable when ``alternate: "shifted"``. Has nos
          effect if ``alternate: "non-ignorable"``

          Possible values are: 
       
          .. list-table::
             :header-rows: 1
             :widths: 10 90

             * - Value
               - Description

             * - ``"punch"``

               - Both whitespaces and punctuation are "ignorable", i.e.
                 not considered base characters.

             * - ``"space"``

               - Whitespace are "ignorable", i.e. not considered base
                 charactersnot considered base characters.


      * - ``backwards``

        - *Optional*. Boolean that determines whether strings with
          diacritics sort from back of the string, such as with some
          French dictionary ordering.

          If ``true``, compare from back to front.

          If ``false``, compare from front to back.
       
          The default value is ``false``.

      * - ``normalization``

        - *Optional* Boolean that determines whether to check if text
          require normalization and to perform normalization. Generally,
          majority of text does not require this normalization processing.

          If ``true``, check if fully normalized and perform normaliztion
          to compare text.
       
          If ``false``, does not check.
       
          The default value is ``false``.
       
          See
          `<http://userguide.icu-project.org/collation/concepts#TOC-Normalization>`_
          for details.

   Consider a collection ``foo`` with the following documents:

   .. code-block:: javascript

      { "_id" : 1, "x" : "a" }
      { "_id" : 2, "x" : "A" }
      { "_id" : 3, "x" : "á" }

   The following operation specifies a query filter of ``x: "a"``. The
   operation also includes a collation option with ``locale: "en_US"``
   (US English locale) and ``strength: 1`` (compare base characters
   only; i.e. ignore case and diacritics):

   .. code-block:: javascript

      db.foo.find( { x: "a" } ).collation( { locale: "en_US", strength: 1 } )

   The operation returns the following documents:

   .. code-block:: javascript

      { "_id" : 1, "x" : "a" }
      { "_id" : 2, "x" : "A" }
      { "_id" : 3, "x" : "á" }

   If you do not specify the collation, i.e. ``db.collection.find( { x:
   "a" } )``, the query would only match the following document:

   .. code-block:: javascript

      db.foo.find( { x: "a" } )

   You can chain other cursor methods, such as :method:`cursor.sort()`
   and :method:`cursor.count()`, to :method:`cursor.collation()`:

   .. code-block:: javascript

      db.collection.find({...}).collation({...}).sort({...});
      db.collection.find({...}).collation({...}).count();

.. [#additional]

   Depending on the language, other differences may exist at this level.



.. _collation-languages-locales:

Supported Languages and Locales
-------------------------------

MongoDB's collation feature supports the following languages. The
following table lists the supported languages and the associated
locales as defined by `ICU Locale
ID <http://userguide.icu-project.org/locale>`_. [#missing-locale]_

.. list-table::
   :class: index-table index-table-less-padding

   * - .. list-table::
          :header-rows: 1

          * - Language
            - Locale

          * - Arabic
            - ``ar``

          * - Armenian
            - ``hy``

          * - Bengali
            - ``bn``

          * - Catalan
            - ``ca``

          * - Chinese
            - ``zh``

          * - Chinese (Traditional Han)
            - ``zh_Hant``

          * - Croatian
            - ``hr``
          
          * - Czech
            - ``cs``

          * - Danish
            - ``da``

          * - Dutch
            - ``nl_NL``

          * - English
            - ``en``

          * - English (United States)
            - ``en_US``

          * - English (United States, Computer)
            - ``en_US_POSIX``

          * - Estonian
            - ``et``

          * - Filipino
            - ``fil``

          * - Finnish
            - ``fi_FI``

          * - French
            - ``fr``

          * - French (Canada)
            - ``fr_CA``

          * - Georgian
            - ``ka``

          * - German
            - ``de``

          * - German (Austria)
            - ``de_AT``

          * - Greek
            - ``el``
          

          * - Hebrew
            - ``he``
          

          * - Hindi
            - ``hi``

          * - Hungarian
            - ``hu``

     - .. list-table::
          :header-rows: 1

          * - Language
            - locale

          * - Icelandic
            - ``is``

          * - Indonesian
            - ``id``

          * - Irish
            - ``ga``

          * - Italian
            - ``it``

          * - Japanese
            - ``ja``

          * - Korean
            - ``ko``

          * - Latvian
            - ``lv``

          * - Lithuanian
            - ``lt``

          * - Norwegian Nynorsk
            - ``nn``

          * - Pashto
            - ``ps``

          * - Persian
            - ``fa``

          * - Persian (Afghanistan)
            - ``fa_AF``

          * - Polish
            - ``pl``

          * - Portuguese
            - ``pt``

          * - Punjabi
            - ``pa``

          * - Romanian
            - ``ro``
       

          * - Russian
            - ``ru``
       

          * - Slovak
            - ``sk``
       

          * - Slovenian
            - ``sl``

          * - Spanish
            - ``es``
       

          * - Swedish
            - ``sv``

          * - Thai
            - ``th``

          * - Turkish
            - ``tr``

          * - Ukrainian
            - ``uk``

          * - Urdu
            - ``ur``

          * - Vietnamese
            - ``vi``

.. tip::

   To explicitly specify simple binary comparison, specify ``locale``
   value of ``"simple"``.

.. [#missing-locale]

   To request support for a locale, please file a JIRA ticket with the
   `Server project <https://jira.mongodb.org/browse/SERVER>`_

