.. _write-op-insert:

================
Insert Documents
================

.. default-domain:: mongodb

.. meta::
   :description: Insert documents using MongoDB
   :keywords: insert documents, create documents, MongoDB 3.4, version 3.4 

This page provides examples of insert operations in the
:program:`mongo` shell. The examples use the following methods:

- :ref:`db.collection.insert() <write-op-insertOne>`

- :ref:`db.collection.insertOne() <write-op-insertMany>`

- :ref:`db.collection.insertMany() <write-op-insert-method>`

.. admonition:: Creating a Collection
   :class: note

   If the collection does not currently exist, insert operations will
   create the collection.

.. _write-op-insertOne:

Insert a Document via ``db.collection.insertOne()``
---------------------------------------------------

.. versionadded:: 3.2

:method:`db.collection.insertOne()` inserts a *single* :ref:`document
<bson-document-format>` into a collection.

The following example inserts a new document into the ``members``
collection. The new document has fields ``name``, ``age``, ``status``,
and ``likes``. Since the document does not specify an ``_id`` field,
MongoDB adds the ``_id`` field with an ObjectId value to the new
document. See :ref:`write-op-insert-behavior`.

.. code-block:: javascript

   db.members.insertOne(
      {
         name: "sue",
         age: 19,
         status: "P",
         likes : [ "golf", "racquetball" ]
      }
   )

.. only:: website

   You can run this method in the web shell below:

   .. include:: /includes/fact-mws.rst

:method:`~db.collection.insertOne()` will return a document that
includes the newly inserted document's ``_id`` field. For an example of
a return document, see :ref:`db.collection.insertOne() reference
<insertOne-examples>`.

To retrieve the document that you just inserted, :ref:`query the collection
<document-query-filter>`:

.. code-block:: javascript

   db.members.find( { "name": "sue" } )

For more information and examples, see
:method:`db.collection.insertOne()`.

.. _write-op-insertMany:

Insert Multiple Documents via ``db.collection.insertMany()``
------------------------------------------------------------

.. versionadded:: 3.2

:method:`db.collection.insertMany()` inserts *multiple* :ref:`documents
<bson-document-format>` into a collection.

The following example inserts three new documents into the ``members``
collection. Each document has fields ``name``, ``age``, ``status``,
and ``likes``. Since the documents do not specify an ``_id`` field,
MongoDB adds the ``_id`` field with an ObjectId value to each document.
See :ref:`write-op-insert-behavior`.

.. code-block:: javascript

   db.members.insertMany(
      [
        { name: "bob", age: 42, status: "A", likes: [ "soccer" ] },
        { name: "ahn", age: 22, status: "A", likes: [ "basketball", "racquetball" ] },
        { name: "xi", age: 34, status: "D", likes: [ "tennis", "golf", "swimming" ] }
      ]
   )

.. only:: website

   You can run this method in the web shell below:

   .. include:: /includes/fact-mws.rst

:method:`~db.collection.insertMany()` will return a document providing
each inserted document's ``_id`` field. See the
:ref:`reference <insertMany-examples>` for an example.

To retrieve the inserted documents, :ref:`query the collection
<read-operations-query-document>`:

.. code-block:: javascript

   db.members.find()

For more information and examples, see
:method:`db.collection.insertMany()`.

.. _write-op-insert-method:

Insert Document or Documents via ``db.collection.insert()``
-----------------------------------------------------------

:method:`db.collection.insert()` inserts a single document or multiple
documents into a collection. To insert a single document, pass a
document to the method; to insert multiple documents, pass an array of
documents to the method.

The following example inserts a new document into the ``members``
collection. The new document has fields ``name``, ``age``, ``status``,
and ``likes``. Since the document does not specify an ``_id`` field,
MongoDB adds the ``_id`` field with an ObjectId value to the document.
See :ref:`write-op-insert-behavior`.

.. code-block:: javascript

   db.members.insert(
      {
         name: "sue",
         age: 19,
         status: "P",
         likes : [ "golf", "racquetball" ]
      }
   )

.. only:: website

   You can run this method in the web shell below:

   .. include:: /includes/fact-mws.rst

:method:`db.collection.insert` returns a :method:`WriteResult` object
providing status information.

For example, a successful insert returns the following
:method:`WriteResult` object:

.. code-block:: javascript

   WriteResult({ "nInserted" : 1 })

The :data:`~WriteResult.nInserted` field specifies the number of
documents inserted. If the operation encounters an error, the
:method:`WriteResult` object will contain the error information.

The following example inserts multiple documents into the ``members``
collection. Since the documents do not specify an ``_id`` field,
MongoDB adds the ``_id`` field with an ObjectId value to each document.
See :ref:`write-op-insert-behavior`.

.. code-block:: javascript

   db.members.insert(
      [
        { name: "bob", age: 42, status: "A", likes: [ "soccer" ] },
        { name: "ahn", age: 22, status: "A", likes: [ "basketball", "racquetball" ] },
        { name: "xi", age: 34, status: "D", likes: [ "tennis", "golf", "swimming" ] }
      ]
   )

The method returns a :method:`BulkWriteResult` object with the status
of the operation. A successful insert of the documents returns the
following :method:`BulkWriteResult` object:

.. code-block:: javascript

   BulkWriteResult({
      "writeErrors" : [ ],
      "writeConcernErrors" : [ ],
      "nInserted" : 3,
      "nUpserted" : 0,
      "nMatched" : 0,
      "nModified" : 0,
      "nRemoved" : 0,
      "upserted" : [ ]
   })

For more information and examples, see :method:`db.collection.insert()`.

.. _write-op-insert-behavior:

Insert Behavior
---------------

Collection Creation
~~~~~~~~~~~~~~~~~~~

If the collection does not currently exist, insert operations will
create the collection.

``_id`` Field
~~~~~~~~~~~~~

.. include:: /includes/fact-id-field.rst

Atomicity
~~~~~~~~~

All write operations in MongoDB are atomic on the level of a single
document. For more information on MongoDB and atomicity, see
:doc:`/core/write-operations-atomicity`

Write Acknowledgement
~~~~~~~~~~~~~~~~~~~~~

With write concerns, you can specify the level of acknowledgement
requested from MongoDB for write operations. For details, see
:doc:`/reference/write-concern`.

.. seealso::

   - :method:`db.collection.insert()`

   - :method:`db.collection.insertOne()`

   - :method:`db.collection.insertMany()`

   - :ref:`additional-inserts`

.. class:: hidden

   .. toctree::
      :titlesonly: 

      /reference/insert-methods
