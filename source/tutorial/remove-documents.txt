.. _write-op-delete:

================
Delete Documents
================

.. default-domain:: mongodb

.. meta::
   :description: MongoDB Manual: How to delete documents in MongoDB. How to remove documents in MongoDB. How to specify conditions for removing or deleting documents in MongoDB.
   :keywords: delete from collection, remove documents from collection, delete documents from collection, MongoDB Manual

This page provides examples of delete operations in the
:program:`mongo` shell.

The examples on this page use the ``inventory`` collection. To create
and/or populate the ``inventory`` collection, run the following in the
:program:`mongo` shell:

.. class:: copyable-code

.. code-block:: javascript

   db.inventory.insert( [
      { item: "journal", qty: 25, size: { h: 14, w: 21, uom: "cm" }, status: "A" },
      { item: "notebook", qty: 50, size: { h: 8.5, w: 11, uom: "in" }, status: "P" },
      { item: "paper", qty: 100, size: { h: 8.5, w: 11, uom: "in" }, status: "D" },
      { item: "planner", qty: 75, size: { h: 22.85, w: 30, uom: "cm" }, status: "D" },
      { item: "postcard", qty: 45, size: { h: 10, w: 15.25, uom: "cm" }, status: "A" },
   ]);

.. only:: website

   You can run the operation in the web shell below:

   .. include:: /includes/fact-mws.rst

.. _write-op-deleteMany:

Delete All Documents
--------------------

To remove all documents from a collection, pass an empty :ref:`filter
<document-query-filter>` document ``{}`` to either the
:method:`db.collection.deleteMany()` or the
:method:`db.collection.remove()` method.

``db.collection.deleteMany()``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following example uses the :method:`db.collection.deleteMany()`
method to delete *all* documents from the ``inventory`` collection:

.. class:: copyable-code

.. code-block:: javascript

   db.inventory.deleteMany({})

The method returns a document with the status of the operation. For
more information and examples, see :method:`db.collection.deleteMany()`.

``db.collection.remove()``
~~~~~~~~~~~~~~~~~~~~~~~~~~

Alternatively, the following example uses the
:method:`db.collection.remove()` method to delete *all* documents from
the ``inventory`` collection:

.. class:: copyable-code

.. code-block:: javascript

   db.inventory.remove({})

To delete all documents from a collection, it may be more efficient to
use the :method:`db.collection.drop()` method to drop the entire
collection, including the indexes, and then recreate the collection and
rebuild the indexes.

Delete All Documents that Match a Condition
-------------------------------------------

You can specify criteria, or filters, that identify the documents to
delete. These :ref:`filters <document-query-filter>` use the same
syntax as read operations:

- .. include:: /includes/extracts/filter-equality.rst

- .. include:: /includes/extracts/filter-query-operators.rst

To delete all documents that match a deletion criteria, pass a
:ref:`filter <document-query-filter>` parameter to either
:method:`db.collection.deleteMany()` method or the
:method:`db.collection.remove()` method.

``db.collection.deleteMany()``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following example uses :method:`db.collection.deleteMany()` to
remove all documents from the ``inventory`` collection where the ``status``
field equals ``"A"``:

.. class:: copyable-code

.. code-block:: javascript

   db.inventory.deleteMany({ status : "A" })

The method returns a document with the status of the operation.

``db.collection.remove()``
~~~~~~~~~~~~~~~~~~~~~~~~~~

Alternatively, the following example uses
:method:`db.collection.remove()` to remove all documents from the
``inventory`` collection where the ``status`` field equals ``"P"``:

.. class:: copyable-code

.. code-block:: javascript

   db.inventory.remove( { status : "P" } )

For large deletion operations, it may be more efficient to copy the
documents that you want to keep to a new collection and then use
:method:`db.collection.drop()` on the original collection.

Remove Only One Document that Matches a Condition
-------------------------------------------------

To delete at most a single document that match a specified filter,even
though multiple documents may match the specified filter, use either
the :method:`db.collection.deleteOne()` method or the
:method:`db.collection.remove()` method with the ``<justOne>``
parameter set to ``true`` or ``1``.

``db.collection.deleteOne()``
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following example uses :method:`db.collection.deleteOne()` to
delete the *first* document where ``status`` is ``"D"``.

.. class:: copyable-code

.. code-block:: javascript

   db.inventory.deleteOne( { status: "D" } )

``db.collection.remove()``
~~~~~~~~~~~~~~~~~~~~~~~~~~

Alternatively, the following example uses the
:method:`db.collection.remove()` with the ``<justOne>`` parameter set
to ``1`` to delete the *first* document where ``status`` is
``"D"``:

.. class:: copyable-code

.. code-block:: javascript

   db.inventory.remove({ status: "D" }, 1)

.. _write-op-delete-behavior:
.. _write-op-remove-behavior:

Delete Behavior
---------------

Indexes
~~~~~~~

Delete operations do not drop indexes, even if deleting all documents
from a collection.

Atomicity
~~~~~~~~~

All write operations in MongoDB are atomic on the level of a single
document. For more information on MongoDB and atomicity, see
:doc:`/core/write-operations-atomicity`.

Write Acknowledgement
~~~~~~~~~~~~~~~~~~~~~

With write concerns, you can specify the level of acknowledgement
requested from MongoDB for write operations. For details, see
:doc:`/reference/write-concern`.

.. seealso::

   - :method:`db.collection.deleteMany()`

   - :method:`db.collection.deleteOne()`

   - :method:`db.collection.remove()`

   - :ref:`additional-deletes`

.. class:: hidden

   .. toctree::
      :titlesonly:

      /reference/delete-methods

