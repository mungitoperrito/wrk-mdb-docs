.. _field-level-encryption-automatic:

============================================
Automatic Client-Side Field Level Encryption
============================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. include:: /includes/fact-client-side-field-level-encryption-beta.rst

.. include:: /includes/extracts/csfle-enterprise-atlas-only.rst

Overview
--------

Official MongoDB 4.2-compatible drivers and the MongoDB 4.2
:binary:`~bin.mongo` shell support automatic client-side field level
encryption. Applications configured for automatic client-side field
level encryption identify specific fields in documents for encryption.
4.2 drivers use the automatic encryption rules specified to the client
for identifying encrypted fields and their associated encryption keys.

Automatic client-side field level encryption requires specifying
per-field encryption rules using a strict subset of 
`JSON Schema Draft 4 standard syntax 
<https://tools.ietf.org/html/draft-zyp-json-schema-04>`_
and encryption-specific schema keywords. See
:ref:`field-level-encryption-json-schema` for complete documentation.

The official MongoDB 4.2-compatible drivers and 4.2 :binary:`~bin.mongo`
shell use the Enterprise-only :ref:`field-level-encryption-mongocryptd`
process to parse the automatic encryption rules and apply the encryption
rules when reading or writing documents:

- For write operations, the driver/shell encrypts field values *prior*
  to writing to the MongoDB database. 

- For read operations, the driver/shell encrypts field values in the
  query *prior* to issuing the read operation.

- For read operations that returns encrypted fields, the driver/shell
  :ref:`automatically decrypts
  <field-level-encryption-automatic-decryption>` the encrypted values
  *only if* the driver/shell was configured with access to the keys used
  to protect those values.

Enabling Automatic Client-Side Field Level Encryption
-----------------------------------------------------

Each official MongoDB 4.2-compatible driver introduces new functionality
for supporting automatic encryption and data encryption key management.
Defer to your preferred :ref:`driver's documentation
<field-level-encryption-drivers>` for language-specific instructions on
implementing automatic client-side field level encryption.

The MongoDB 4.2 :binary:`~bin.mongo` shell adds an additional option
to the :method:`Mongo()` method for instantiating a database
connection with automatic client-side field level encryption. 
For a complete example, see 
:ref:`mongo-connection-automatic-client-side-encryption-enabled`.

Automatic client-side field level encryption requires access to the
:ref:`mongocryptd` process on the client host machine. See
:ref:`mongocryptd` for complete documentation on installation. The
official MongoDB 4.2-compatible drivers have additional options for
managing the ``mongocryptd`` process. Generally, the 4.2-compatible
drivers and 4.2 :binary:`~bin.mongo` shell can access the
``mongocryptd`` process if it is in the system ``PATH``.

Applications must specify the following components when instantiating
the database connection to enable automatic client-side field level
encryption:

- A :ref:`key vault <field-level-encryption-keyvault>` of data
  encryption keys. The key vault can reside on either a remote MongoDB
  cluster *or* the MongoDB cluster storing client-side encrypted data.  

- A supported :ref:`Key Management Service (KMS) 
  <field-level-encryption-kms>` provider used to manage Customer Master
  Keys (CMK). MongoDB encrypts all data encryption keys using the
  specified CMK *prior* to storing them in the key vault, leaving only
  metadata unencrypted.
  
  4.2-compatible drivers and the 4.2 :binary:`~bin.mongo` shell need
  access to the KMS to encrypt and decrypt protected fields *or* to
  create new data encryption keys.

- Per-field automatic encryption rules using 
  :ref:`JSON schema syntax <field-level-encryption-json-schema>`. 

Server-Side Field Level Encryption Enforcement
----------------------------------------------

The MongoDB 4.2 server supports using :doc:`schema validation
</core/schema-validation>` to enforce encryption of specific fields in a
collection. Clients performing :ref:`automatic client-side field level
encryption <field-level-encryption-json-schema>` have specific behavior
depending on the :ref:`database connection configuration
<mongo-connection-automatic-client-side-encryption-enabled>`:

- If the connection :ref:`ClientSideFieldLevelEncryptionOptions`
  ``schemaMap`` object contains a key for the specified collection, the
  client uses that object to perform automatic field level encryption
  and ignores the remote schema. The local rules **must** encrypt at
  minimum those the ``taxid`` and ``taxid-short`` fields. 

- If the connection :ref:`ClientSideFieldLevelEncryptionOptions`
  ``schemaMap`` object does *not* contain a key for the specified
  collection, the client downloads the server-side remote schema for the
  collection and uses it to perform automatic field level encryption.
  
  This configuration requires the client to trust the server has a valid
  schema with respect to automatic field level encryption. The client
  only uses the remote schema to perform automatic field level
  encryption and does not enforce any other validation rules specified
  in the schema.

For complete documentation on server-side client-side field level
encryption enforcement, see
:ref:`field-level-encryption-enforce-schema`.

.. toctree::
   :titlesonly:
   :hidden:

   /reference/security-client-side-automatic-json-schema.txt
   /reference/security-client-side-query-aggregation-support.txt
   /reference/security-client-side-encryption-appendix.txt