.. _retryable-writes:

================
Retryable Writes
================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. |enable-retryable-writes| replace:: To enable retryable writes in the
   3.6 drivers, see :urioption:`retryWrites`. To enable retryable writes
   in the :binary:`~bin.mongo` shell, provide the
   :option:`--retryWrites <mongo --retryWrites>` option.

.. versionadded:: 3.6

Certain write operations on replica sets and sharded clusters using the
:ref:`WiredTiger <storage-wiredtiger>` and
:ref:`in-memory <storage-inmemory>` storage engines are "retryable", and
automatically handle transient network errors and replica set election.

.. note::

   MongoDB drivers do **not** enable retryable writes for connections by
   default. |enable-retryable-writes|

   Writes are retried only once.

.. _retryable-write-ops:

Retryable Write Operations
--------------------------

The following write operations are retryable when issued with
acknowledged write concern; e.g., :doc:`/reference/write-concern`
cannot be :writeconcern:`{w: 0} </<number/>>`.

.. list-table::
   :header-rows: 1

   * - Methods
     - Descriptions

   * - | :method:`db.collection.insertOne()`
       | :method:`db.collection.insert()`
       | :method:`db.collection.insertMany()`

     - Insert operations.

   * - | :method:`db.collection.updateOne()`
       | :method:`db.collection.replaceOne()`
       | :method:`db.collection.save()`
       | :method:`db.collection.update()` where ``multi`` is ``false``

     - Single-document update operations.

   * - | :method:`db.collection.deleteOne()`
       | :method:`db.collection.remove()` where ``justOne`` is ``true``

     - Single document delete operations.

   * - | :method:`db.collection.findAndModify()`
       | :method:`db.collection.findOneAndDelete()`
       | :method:`db.collection.findOneAndReplace()`
       | :method:`db.collection.findOneAndUpdate()`

     - ``findAndModify`` operations. All ``findAndModify`` operations
       are single document operations.

   * - :method:`db.collection.bulkWrite()` with the following write
       operations:

       - :ref:`bulkwrite-write-operations-insertOne`

       - :ref:`updateOne <bulkwrite-write-operations-updateOneMany>`

       - :ref:`bulkwrite-write-operations-replaceOne`

       - :ref:`deleteOne <bulkwrite-write-operations-deleteOneMany>`

     - Bulk write operations that only consist of the single-document
       write operations. A retryable bulk operation can include any
       combination of the specified write operations but cannot include
       any multi-document write operations, such as ``updateMany``.


   * - :method:`Bulk <Bulk()>` operations for:

       - :method:`Bulk.find.removeOne()`
       - :method:`Bulk.find.replaceOne()`
       - :method:`Bulk.find.replaceOne()`

     - Bulk write operations that only consist of the single-document
       write operations. A retryable bulk operation can include any
       combination of the specified write operations but cannot include
       any multi-document write operations, such as ``update`` which
       specifies ``true`` for the ``multi`` option.


Limitations
-----------

Supported Deployment Topologies
   Available on replica sets and sharded clusters only.

Supported Storage Engine
   Available for the :doc:`WiredTiger storage engine
   </core/wiredtiger>` and :doc:`in-memory storage engine
   </core/inmemory>`.

   Retryable writes are not available on storage engines that don't
   support doc level locking; e.g. MMAPv1.

3.6 MongoDB Drivers
   Clients require MongoDB drivers updated for MongoDB 3.6:

   .. include:: /includes/3.6-drivers.rst

   |enable-retryable-writes|

Feature Compatibility Version
   ``featureCompatibilityVersion`` must be at least "3.6". For more
   information, see :dbcommand:`setFeatureCompatibilityVersion`.

Request Write Acknowledgement
   :doc:`/reference/write-concern` must be an acknowledge write
   concern. For example, write operations issued with :writeconcern:`{w: 0}
   </<number/>>` are not retryable.

Persistent Network Errors
   As the retry attempt is made only once, the retryable feature can
   help address transient network errors but not persistent network
   errors.

Failover Period Exceeds :urioption:`serverSelectionTimeoutMS`
   Upon encountering a failover and receiving the ``not master`` error,
   the drivers wait :urioption:`serverSelectionTimeoutMS` seconds to
   determine the new primary before retrying. The retryable feature
   does not addresss instance where the failover period exceeds
   :urioption:`serverSelectionTimeoutMS`.

.. warning::

   If the client application becomes temporarily unresponsive for more
   than the :parameter:`localLogicalSessionTimeoutMinutes` after
   issuing a write operation, there is a chance that when the client
   applications starts responding (without a restart), the write
   operation may be retried and applied again.
