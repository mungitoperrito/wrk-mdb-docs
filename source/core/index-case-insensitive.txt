.. _index-feature-case-insensitive:

========================
Case Insensitive Indexes
========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. versionadded:: 3.4

Case insensitive indexes support queries that search for text
without regard for case.

You can create a case insensitive index with
:method:`db.collection.createIndex()` by specifying the ``collation``
parameter as an option. For example:

.. code-block:: javascript

   db.collection.createIndex( { "key" : 1 },
                              { collation: {
                                  locale : <locale>,
                                  strength : <strength>
                                }
                              } )

The ``collation`` option takes a document with the following keys:

- ``locale``: specifies language rules. See
  :ref:`Collation Locales<collation-languages-locales>` for a list of
  available locales.

- ``strength``: determines comparison rules. A value of
  ``1`` or ``2`` indicates a case insensitive collation. Defaults to
  ``3`` (performs comparisons up to tertiary differences, such as case
  and letter variants).

Behavior
--------

The use of a case insensitive :doc:`collation</reference/collation>`
allows queries to match on document values and do sorting without
regard for letter case. Using a case insensitive index does not affect
the results of a query, but it can increase performance; see
:doc:`Indexes</indexes>` for a detailed discussion of the costs and
benefits of indexes.

To use a case insensitive index, a query must specify the same
collation which the index uses, unless there is a collection-wide
default collation in place.

Examples
--------

Collections with no default collation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can run case insensitive queries against a collection with no
default collation by specifying a collation at the query level.
To make use of an index with collation in such a collection, the
collation specified in the query must be the same as the collation
on the index.

The following example creates a collection with no default collation,
then adds an index with collation on the ``type`` field.

.. code-block:: javascript

   db.createCollection("fruit")

   db.fruit.createIndex( { type: 1},
                         { collation: { locale: 'fr_CA', strength: 1 } } )

To use the index, queries must specify the same collation.

.. code-block:: javascript

   db.fruit.insert( [ { type: "apple" },
                      { type: "Apple" },
                      { type: "APPLE" } ] )

   db.fruit.find( { type: "apple" } ) // does not use index, finds one result

   db.fruit.find( { type: "apple" } ).collation( { locale: 'fr_CA', strength: 1 } )
   // uses the index, finds three results

   db.fruit.find( { type: "apple" } ).collation( { locale: 'fr_CA', strength: 2 } )
   // does not use the index, finds three results

Collections with a default collation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

One way to create and use case insensitve indexes is to
create a collection with a default case insensitive collation and
then add an index to the collection, which inherits the collection's
default collation. All queries which do not specify a different
collation also inherit the default collation.

The following example creates a collection called ``names`` with a
default collation, then creates an index on the ``first_name`` field.

.. code-block:: javascript

   db.createCollection("names", { collation: { locale: 'en_US', strength: 2 } } )

   db.names.createIndex( { first_name: 1 } ) // inherits the default collation

Insert a small collection of names:

.. code-block:: javascript

   db.names.insert( [ { first_name: "Betsy" },
                      { first_name: "BETSY"},
                      { first_name: "betsy"} ] )

Queries on this collection use the specified collation by default,
and if possible use the index as well.

.. code-block:: javascript

   db.names.find( { first_name: "betsy" } )
   // inherits the default collation: { collation: { locale: 'en_US', strength: 2 } }

The operation uses the collection's default collation and finds all three
documents. It uses the index on the ``first_name`` field for better
performance.

It is still possible to perform case sensitive searches on this
collection by specifying a different collation in the query:

.. code-block:: javascript

   db.names.find( { first_name: "betsy" } ).collation( { locale: 'en_US' } )
   // does not use the collection's default collation

The operation finds only one document, because it uses a collation with
no ``strength`` value specified. It does not use the collection's default
collation or the index.

Ignoring case and special characters
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A collection called ``names`` has no default
collation and contains the following documents:

.. code-block:: javascript

   { "first_name" : "Juan", "last_name" : "Garcia" }
   { "first_name" : "Enrico", "last_name" : "Garc√≠a" }
   { "first_name" : "Luis", "last_name" : "garcia" }

The use case for this application calls for queries to ignore
case and special characters, including accents, umlauts, and other
diacritical marks, while using an index to improve query performance.

To create an index with a collation, use a collation document
when creating the index.

.. code-block:: javascript

   db.names.createIndex( { last_name : 1 },
                         { collation : { locale : 'en_US', strength : 1 } } )

Because this collection has no default collation, you must include
the a collation document in the query. For the query to use the index,
the collation document in the query must match exactly the one on
the index.

.. code-block:: javascript

   db.coll.find( { last_name : 'garcia' },
                 { collation : { locale : 'en_US', strength : 1 } } )

This query finds all documents where ``last_name`` matches
``garcia``, regardless of case or diacritical marks, and uses the index
shown above for better performance. A similar query which uses no
collation or a different collation does not use the index.

.. _alternate-example:

Ignoring spaces and punctuation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A collection called ``streets`` contains the following documents:

.. code-block:: javascript

   { "_id" : 1, "street" : "Avenue C" }
   { "_id" : 2, "street" : "Avenue..B" }
   { "_id" : 3, "street" : "AvenueA" }

The following query has no collation and sorts the documents in
lexical order:

.. code-block:: javascript

   db.streets.find().sort( { street : 1 } )

The operation returns the following documents:

.. code-block:: javascript

   { "_id" : 1, "street" : "Avenue C" }
   { "_id" : 2, "street" : "Avenue..B" }
   { "_id" : 3, "street" : "AvenueA" }

The following query uses a collation with the ``alternate`` parameter
set to ``shifted`` and sorts the documents while ignoring spaces and
punctuation:

.. code-block:: javascript

   db.streets.find().sort( { street : 1 } ).collation(
      { locale : "en_US", alternate : "shifted" }
   )

The operation returns the following documents:

.. code-block:: javascript

   { "_id" : 3, "street" : "AvenueA" }
   { "_id" : 2, "street" : "Avenue..B" }
   { "_id" : 1, "street" : "Avenue C" }
