==========================
Atomicity and Transactions
==========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

In MongoDB, a write operation is atomic on the level of a single
document, even if the operation modifies multiple embedded documents
*within* a single document.

.. include:: /includes/extracts/concurrent-operations-multi-document-writes.rst

.. include:: /includes/extracts/transactions-intro.rst

Transaction-Like Semantics
--------------------------

Since a single document can contain multiple embedded documents,
single-document atomicity is sufficient for many practical use cases.

Starting in version 4.0, MongoDB provides :doc:`multi-document
transactions </core/transactions>` for replica sets.

.. _concurrency-control:

Concurrency Control
-------------------

Concurrency control allows multiple applications to run concurrently
without causing data inconsistency or conflicts.

One approach is to create a :ref:`unique index <index-type-unique>` on a
field that can only have unique values. This prevents insertions or
updates from creating duplicate data. Create a unique index on multiple
fields to force uniqueness on that combination of field values. For
examples of use cases, see :ref:`update() and Unique Index
<update-with-unique-indexes>` and :ref:`findAndModify() and Unique Index
<upsert-and-unique-index>`.

Another approach is to specify the expected current value of a field in
the query predicate for the write operations.

.. seealso:: :doc:`/core/read-isolation-consistency-recency`
