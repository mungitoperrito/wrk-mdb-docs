.. _replica-set-sync:

================================
Replica Set Data Synchronization
================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

In order to maintain up-to-date copies of the shared data set,
secondary members of a replica set :term:`sync` or replicate data from
other members. MongoDB uses two forms of data synchronization:
initial sync to populate new members
with the full data set, and replication to apply ongoing changes to the
entire data set.

.. _replica-set-initial-sync:

Initial Sync
------------

Initial sync copies all the data from one member of the replica set to
another member.

Process
~~~~~~~

When you perform an initial sync, MongoDB:

#. Clones all databases except the :ref:`local
   <replica-set-local-database>` database. To clone, the
   :binary:`~bin.mongod` scans every collection in each source database and
   inserts all data into its own copies of these collections.

   .. versionchanged:: 3.4 
      Initial sync builds all collection indexes as the documents are
      copied for each collection. In earlier versions of MongoDB, only
      the ``_id`` indexes are built during this stage.

   .. versionchanged:: 3.4
      Initial sync pulls newly added oplog records during the data copy. Ensure
      that the target member has enough disk space in the ``local``
      database to temporarily store these oplog records for the
      duration of this data copy stage.

#. Applies all changes to the data set. Using the oplog from the
   source, the :binary:`~bin.mongod` updates its data set to reflect the
   current state of the replica set.

   When the initial sync finishes, the member transitions from
   :replstate:`STARTUP2` to :replstate:`SECONDARY`.

To perform an initial sync, see
:doc:`/tutorial/resync-replica-set-member`.

.. _init-sync-retry:

Fault Tolerance
~~~~~~~~~~~~~~~

If a secondary performing initial sync encounters a *non-transient*
network error during the sync process, the secondary restarts the
initial sync process from the beginning.

Starting in MongoDB 4.4, a secondary performing initial sync can attempt
to resume the sync process if interrupted by a *transient* network
error. The sync source must also run MongoDB 4.4 to support resumable
initial sync. If the sync source runs MongoDB 4.2 or earlier, the
secondary must restart the initial sync process as if it encountered a
non-transient network error.

By default, the secondary tries to resume initial sync for 24 hours.
MongoDB 4.4 adds the
:parameter:`initialSyncTransientErrorRetryPeriodSeconds` server
parameter for controlling the amount of time the secondary attempts to
resume initial sync. If the secondary cannot successfully resume the
initial sync process during the configured time period, it selects a new
healthy source from the replica set and restarts the initial
synchronization process from the beginning. 

The secondary attempts to restart the initial sync up to ``10`` times
before returning a fatal error.

.. _replica-set-replication:

Replication
-----------

Secondary members replicate data continuously after the initial sync.
Secondary members copy the :doc:`oplog </core/replica-set-oplog>` from
their *sync from* source and apply these operations in an asynchronous
process. [#slow-oplogs]_

Secondaries may automatically change their *sync from* source as needed
based on changes in the ping time and state of other members'
replication.

.. versionchanged:: 3.2

   .. include:: /includes/fact-voting-node-sync-incompatibility.rst

Secondaries avoid syncing from
:ref:`delayed members <replica-set-delayed-members>` and :ref:`hidden
members <replica-set-hidden-members>`.

If a secondary member has :rsconf:`members[n].buildIndexes` set to ``true``,
it can only sync from other members where :rsconf:`~members[n].buildIndexes`
is ``true``. Members where :rsconf:`~members[n].buildIndexes` is ``false`` can
sync from any other member, barring other sync restrictions.
:rsconf:`~members[n].buildIndexes` is ``true`` by default.

.. [#slow-oplogs]

   .. include:: /includes/extracts/4.2-changes-slow-oplog-log-message-footnote.rst

.. _replica-set-internals-multi-threaded-replication:

Multithreaded Replication
~~~~~~~~~~~~~~~~~~~~~~~~~

MongoDB applies write operations in batches using multiple threads to
improve concurrency. MongoDB groups batches by document id (:ref:`WiredTiger
<storage-wiredtiger>`) and simultaneously applies each group of
operations using a different thread. MongoDB always applies write
operations to a given document in their original write order.

.. versionchanged:: 4.0

Starting in MongoDB 4.0, read operations that
:ref:`target secondaries <replica-set-read-preference>` and are
configured with a :ref:`read concern<read-concern>` level of
:readconcern:`"local"` or  :readconcern:`"majority"` will now read from
a :ref:`WiredTiger<storage-wiredtiger>` snapshot of the data if the read
takes place on a secondary where replication batches are being applied. 
Reading from a snapshot guarantees a consistent view of the
data, and allows the read to occur simultaneously with the ongoing
replication without the need for a lock. As a result, secondary reads
requiring these read concern levels no longer need to wait for
replication batches to be applied, and can be handled as they are
received.

Flow Control
~~~~~~~~~~~~

.. include:: /includes/extracts/4.2-changes-flow-control-general-desc.rst

For more information, see :ref:`flow-control`.
