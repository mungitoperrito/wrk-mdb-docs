.. _wildcard-index-core:

================
Wildcard Indexes
================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

MongoDB supports creating indexes on a field, or a set of fields, to 
support queries. Since MongoDB also supports dynamic schemas, document
fields can be added or updated at any time. Use wildcard indexes to
support queries against multiple, arbitrary, or unknown fields.

.. include:: /includes/indexes/index-creation-methods.rst

.. important::

   .. include:: /includes/indexes/wildcard-not-planning-replacement.rst

Get Started
-----------

You can:

- :ref:`Create a wildcard index on a single field
  <ex-wildcard-single-field>`
- :ref:`Create a wildcard index on all fields <ex-wildcard-all-fields>`
- :ref:`Create a compound wildcard index <wildcard-index-compound>`
- :ref:`Query and sort with wildcard indexes
  <wildcard-index-query-sort-support>`

.. _wildcard-index-details:

Details
-------

Wildcard indexes have specific behavior when indexing array fields or
fields that have objects like embedded documents:

- If the field is an object, the wildcard index descends into
  the object and indexes its contents. The wildcard index continues
  descending into any additional embedded documents it encounters.

- If the field is an array, then the wildcard index traverses the array
  and indexes each element:

  - If an element in the array is an object, the wildcard index
    descends into the object to index its contents as described above.
    
  - If the element is an array - that is, an array which is embedded
    directly within the parent array - then the wildcard index does
    *not* traverse the embedded array, but indexes the *entire* array
    as a single value.

- For all other fields, record the primitive (non-object/array) value
  into the index.

The wildcard index continues traversing any additional nested objects or
arrays until it reaches a primitive value (i.e. a field that is not an
object or array). It then indexes this primitive value, along with the
full path to that field.

For example, consider the following document:

.. code-block:: json

   {
     "parentField" : {
       "nestedField" : "nestedValue",
       "nestedObject" : {
         "deeplyNestedField" : "deeplyNestedValue" 
       },
       "nestedArray" : [
         "nestedArrayElementOne",
         [ "nestedArrayElementTwo" ]
       ]
     }
   }

A wildcard index which includes ``parentField`` records the following
entries:

- ``"parentField.nestedField" : "nestedValue"``
- ``"parentField.nestedObject.deeplyNestedField" : "deeplyNestedValue"``
- ``"parentField.nestedArray" : "nestedArrayElementOne"``
- ``"parentField.nestedArray" : ["nestedArrayElementTwo"]``

Note that the records for ``parentField.nestedArray`` do not include the
array position for each element. Wildcard indexes ignore array element
positions when recording the element into the index. Wildcard indexes
can still support queries that include explicit array indices. See
:ref:`wildcard-query-support-explicit-array-indices` for more
information.

For more information on wildcard index behavior with nested objects,
see :ref:`wildcard-index-nested-objects`. 

For more information on wildcard index behavior with nested arrays,
see :ref:`wildcard-index-nested-arrays`.

.. _wildcard-index-nested-objects:

Nested Objects
~~~~~~~~~~~~~~

When a wildcard index encounters a nested object, it descends into
the object and indexes its contents. For example:

.. code-block:: json

   {
     "parentField" : {
       "nestedField" : "nestedValue",
       "nestedArray" : ["nestedElement"]
       "nestedObject" : {
         "deeplyNestedField" : "deeplyNestedValue"
       }
     }
   }

A wildcard index which includes ``parentField`` descends into the
object to traverse and index its contents:

- For each field which is itself an object (i.e. an embedded document),
  descend into the object to index its contents. 

- For each field which is an array, traverse the array and index 
  its contents.

- For all other fields, record the primitive (non-object/array) value
  into the index.

The wildcard index continues traversing any additional nested objects or
arrays until it reaches a primitive value (i.e. a field that is not an
object or array). It then indexes this primitive value, along with the
full path to that field.

Given the sample document, the wildcard index adds the following records
to the index:

- ``"parentField.nestedField" : "nestedValue"`` 
- ``"parentField.nestedObject.deeplyNestedField" : "deeplyNestedValue"``
- ``"parentField.nestedArray" : "nestedElement"``

For more information on wildcard index behavior with nested arrays,
see :ref:`wildcard-index-nested-arrays`.

.. _wildcard-index-nested-arrays:

Nested Arrays
~~~~~~~~~~~~~

When a wildcard index encounters a nested array, it attempts to traverse
the array to index its elements. If the array is itself an element in a
parent array (i.e. an embedded array), the wildcard index instead
records the entire array as a value instead of traversing its contents.
For example:

.. code-block:: json

   {
     "parentArray" : [
       "arrayElementOne",
       [ "embeddedArrayElement" ],
       "nestedObject" : {
         "nestedArray" : [
           "nestedArrayElementOne",
           "nestedArrayElementTwo"
         ]
       }
     ]
   }

A wildcard index which includes ``parentArray`` descends into the
array to traverse and index its contents:

- For each element which is an array (i.e. an embedded array), 
  index the *entire* array as a value.

- For each element which is an object, descend into the object to 
  traverse and index its contents. 

- For all other fields, record the primitive (non-object/array) value
  into the index.

The wildcard index continues traversing any additional nested objects or
arrays until it reaches a primitive value (i.e. a field that is not an
object or array). It then indexes this primitive value, along with the
full path to that field.

Given the sample document, the wildcard index adds the following records
to the index:

- ``"parentArray" : "arrayElementOne"`` 
- ``"parentArray" : ["embeddedArrayElement"]``
- ``"parentArray.nestedObject.nestedArray" : "nestedArrayElementOne"``
- ``"parentArray.nestedObject.nestedArray" : "nestedArrayElementTwo"``

Note that the records for ``parentField.nestedArray`` do not include the
array position for each element. Wildcard indexes ignore array element
positions when recording the element into the index. Wildcard indexes
can still support queries that include explicit array indices.

For information on array index queries, see
:ref:`wildcard-query-support-explicit-array-indices`.

For information on nested BSON, see :limit:`Nested Depth for BSON
Documents`.

Index Display
~~~~~~~~~~~~~

.. include:: /includes/indexes/fact-wildcard-index-ordering.rst

Restrictions
~~~~~~~~~~~~

- You cannot shard a collection using a wildcard index. Create a
  non-wildcard index on the field or fields you want to shard on.
  For more information on shard key selection, see
  :ref:`sharding-shard-key`.

- You cannot specify the following properties for a wildcard index:

  - :ref:`Time to Live (TTL) <index-feature-ttl>`
  - :ref:`Unique <index-type-unique>`

- You cannot create the following index types using wildcard syntax:

  - :ref:`2d (Geospatial) indexes <2d-index-internals>`
  - :ref:`2dsphere (Geospatial) indexes <2dsphere-index>`
  - :ref:`Hashed indexes <index-type-hashed>`

.. include:: includes/indexes/wildcard-restrictions-compound.rst

For complete documentation on wildcard index creation restrictions, see 
:ref:`Wildcard Index Restrictions <wildcard-index-restrictions-create>`.

.. important::

   .. include:: /includes/indexes/wildcard-index-note-text.rst 

Additional Considerations
~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/indexes/wildcard-indexes-considerations

Learn More
----------

- :ref:`Single Wildcard Indexes <wildcard-index-single>`
- :ref:`Wildcard Index Query and Sort Support
  <wildcard-index-query-sort-support>`
- :ref:`Wildcard Index Restrictions <wildcard-index-restrictions>`

.. toctree::
   :titlesonly:
   :hidden:

   /reference/indexes/index-wildcard-single
   /reference/indexes/index-wildcard-compound
   /reference/indexes/index-wildcard-query-and-sort
   /reference/indexes/index-wildcard-restrictions


