.. facet::
   :name: genre
   :values: tutorial

.. meta::
   :keywords: code example, node.js

.. meta::
   :keywords: queryable encryption, contention

.. _qe-fundamentals-encrypt-query:
.. _qe-encryption-schema:

============================
Encrypted Fields and Queries
============================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

When you use {+qe+}, you define encrypted fields at the collection level 
using an {+enc-schema+}. Encrypting a field and enabling queries
increases storage requirements and impacts query performance.

For instructions on creating an {+enc-schema+} and configuring
querying, see :ref:`qe-create-encryption-schema`

Considerations when Enabling Querying
-------------------------------------

.. warning::

   .. include:: /includes/queryable-encryption/qe-enable-qe-at-collection-creation.rst

You can choose to make an encrypted field queryable. If you 
don't need to perform CRUD operations that require you to query an
encrypted field, you may not need to enable querying on that field. You
can still retrieve the entire document by querying other fields that are
queryable or unencrypted.

When you make encrypted fields queryable, MongoDB creates an index for 
each encrypted field, which can make write operations on that field take
longer. When a write operation updates an indexed field, MongoDB also
updates the related index.

When you create an encrypted collection, MongoDB creates 
:ref:`two metadata collections <qe-metadata-collections>`, increasing 
the storage space requirements.

.. _qe-contention:

Contention
----------

.. include:: /includes/queryable-encryption/qe-csfle-contention.rst

Adjusting the Contention Factor
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

You can optionally include the ``contention`` property on queryable fields to
change the contention factor from its default value of ``8``. Before you modify 
the contention factor, consider the following points:

.. include:: /includes/queryable-encryption/qe-csfle-setting-contention.rst

.. _qe-query-types:

Supported Query Types and Behavior
----------------------------------
Querying non-encrypted fields or encrypted fields with a supported query
type returns encrypted data that is then decrypted at
the client.

{+qe+} currently supports ``none`` and ``equality`` query types. If the
query type is unspecified, it defaults to ``none``. If the query type is
``none``, the field is  encrypted, but clients can't query it.

The ``equality`` query type supports the following expressions:

- :manual:`$eq </reference/operator/query/eq/>`
- :manual:`$ne </reference/operator/query/ne/>`
- :manual:`$in </reference/operator/query/in/>`
- :manual:`$nin </reference/operator/query/nin/>`
- :manual:`$and </reference/operator/query/and/>`
- :manual:`$or </reference/operator/query/or/>`
- :manual:`$not </reference/operator/query/not/>`
- :manual:`$nor </reference/operator/query/nor/>`
- :manual:`$expr </reference/operator/query/expr/>`

.. note::
   
   Queries that compare an encrypted field to ``null`` or to a regular expression result in an error, even with supported query operators.

.. _qe-query-unsupported:

{+qe+} ``equality`` queries don't support read or write operations
on a field when the operation compares the encrypted field to any of the
following :term:`BSON` types:

- ``double``
- ``decimal128``
- ``object``
- ``array``

Client and Server Schemas
-------------------------

.. content copied from source/core/csfle/fundamentals/automatic-encryption.txt

MongoDB supports using :ref:`schema validation <schema-validation-overview>`
to enforce encryption of specific fields in a collection. Clients using
automatic {+qe+} behave differently depending on the database connection configuration:

- If the connection ``encryptedFieldsMap`` object contains a key for the
  specified collection, the client uses that object to perform
  automatic {+qe+}, rather than using the remote schema. At minimum, 
  the local rules must encrypt all fields that the remote schema does.

- If the connection ``encryptedFieldsMap`` object doesn't contain a
  key for the specified collection, the client downloads the
  server-side remote schema for the collection and uses it instead.

  .. important:: Remote Schema Behavior

     When using a remote schema:

     - The client trusts that the server has a valid schema
     
     - The client uses the remote schema to perform automatic {+qe+} 
       only. The client does not enforce any other validation rules 
       specified in the schema.