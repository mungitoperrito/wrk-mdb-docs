========================================
Read Isolation, Consistency, and Recency
========================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Isolation Guarantees
--------------------

Read Uncommitted
~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/concurrent-operations-read-uncommitted.rst

Read uncommitted is the default isolation level and applies to
:program:`mongod` standalone instances as well as to replica sets and
sharded clusters.

Read Uncommitted And Single Document Atomicity
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/concurrent-operations-single-document-write.rst

However, although the readers may not see a *partially* updated
document, read uncommitted means that concurrent readers may still see
the updated document before the changes are :term:`durable`.

Read Uncommitted And Multiple Document Write
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/concurrent-operations-multi-document-writes.rst

Without isolating the multi-document write operations, MongoDB exhibits
the following behavior:

.. include:: /includes/extracts/concurrent-operations-multi-document-writes-no-isolation.rst

.. include:: /includes/extracts/concurrent-operations-isolate-operator.rst

.. seealso:: :doc:`/core/write-operations-atomicity`

.. _faq-developers-isolate-cursors:

Cursor Snapshot
~~~~~~~~~~~~~~~

.. include:: /includes/extracts/isolate-cursor-snapshot.rst


Monotonic Writes
----------------

.. include:: /includes/extracts/monotonic-writes.rst

.. _consistency-linearizable-reads:

Real Time Order
---------------

.. versionadded:: 3.4

For read and write operations on the primary, issuing read operations
with :readconcern:`"linearizable"` read concern and write operations
with :writeconcern:`"majority"` write concern enables multiple threads
to perform reads and writes on a single document as if a single thread
performed these operations in real time; that is, the corresponding
schedule for these reads and writes is considered linearizable.
