ref: 4.4-changes-certificate-expiry-warning
content: |

  .. versionchanged:: 4.4

    :binary:`~bin.mongod` / :binary:`~bin.mongos` logs a warning on
    connection if the presented x.509 certificate expires within ``30``
    days of the ``mongod/mongos`` host system time. See
    :ref:`4.4-rel-notes-certificate-expiration-warning` for more
    information.
---
ref: 4.4-validate-options
content: |

   Starting in MongoDB 4.4, for the WiredTiger storage engine, you can
   run the :dbcommand:`validate` command in the background or in the
   foreground. In earlier versions, you can only run
   :dbcommand:`validate` in the foreground:

   - When run in |background|, the operation takes an intent shared
     lock on the collection and does not block reads and writes or DDL
     operations on the collection; however, the operation does not
     update collection count and size metrics.
 
   - When run in |foreground|, the operation takes an exclusive lock on
     the collection and blocks all reads and writes and DDL operations
     on the collection until the operation finishes. When run on a
     secondary, the operation can block all other operations on that
     secondary until it finishes.
---
ref: 4.4-changes-passwordPrompt
content: |

   Starting in MongoDB 4.4, if you use the
   ``db.auth(<username>, <password>)`` syntax and omit the password,
   the user is prompted to enter a password.
---
ref: 4.4-changes-removed-commands
content: |
   MongoDB removes the following command(s) and :binary:`~bin.mongo` shell
   helper(s):

   .. list-table::
      :header-rows: 1
      :widths: 20 25 55
   
      * - Removed Command
        - Removed Helper
        - Alternatives
     
      * - ``cloneCollection``
   
        - ``db.cloneCollection()``

        - - Use :binary:`~bin.mongoexport` and
            :binary:`~bin.mongoimport`, or

          - Use the aggregation pipeline :pipeline:`$out` or
            :pipeline:`$merge` stages, or
 
          - Write a script using the drivers.

      * - ``planCacheListPlans``
   
        - ``PlanCache.getPlansByQuery()``

        - - Use the aggregation pipeline stage :pipeline:`$planCacheStats` or

          - Use the :binary:`~bin.mongo` shell helper method
            :method:`PlanCache.list()`. (Available starting in version 4.4)

          | See also :ref:`4.4-agg-planCachesStats-changes`.

      * - ``planCacheListQueryShapes``

        - ``PlanCache.listQueryShapes()``

        - - Use the aggregation pipeline stage :pipeline:`$planCacheStats` or
 
          - Use the :binary:`~bin.mongo` shell helper method
            :method:`PlanCache.list()`. (Available starting in version 4.4)

          | See also :ref:`4.4-agg-planCachesStats-changes`.

---
ref: 4.4-changes-removed-parameters
content: |
   MongoDB removes the following server parameter:

   .. list-table::
      :header-rows: 1
      :widths: 25 75
   
      * - Removed Parameter
        - Description
     
      * - ``failIndexKeyTooLong``
   
        - MongoDB 4.4 removes the ``failIndexKeyTooLong`` parameter.
          This parameter was deprecated in 4.2 as MongoDB with
          :ref:`featureCompatibilityVersion <view-fcv>` (fCV) version
          4.2+ no longer imposes an :limit:`Index Key Limit`. 

---
ref: 4.4-changes-planCache-changes
content: |

   Starting in version 4.4, 
   
   - :pipeline:`$planCacheStats` stage can be run on
     :binary:`~bin.mongos` instances as well as on
     :binary:`~bin.mongod` instances. In 4.2,
     :pipeline:`$planCacheStats` stage can only run on
     :binary:`~bin.mongod` instances.

   - :pipeline:`$planCacheStats` includes new fields: the :ref:`host
     <plancachestats-host>` field and, when run against a
     :binary:`~bin.mongos`, the :ref:`shard <plancachestats-shard>`
     field.

   - :binary:`~bin.mongo` shell provides the method
     :method:`PlanCache.list()` as a wrapper for
     :pipeline:`$planCacheStats` aggregation stage.

   - MongoDB removes the following:

     - ``planCacheListPlans`` and ``planCacheListQueryShapes``
       commands, and

     - ``PlanCache.getPlansByQuery()`` and
       ``PlanCache.listQueryShapes()`` methods.

     Use :pipeline:`$planCacheStats` or :method:`PlanCache.list()` instead.
---
ref: 4.4-changes-rollback-directory
content: |
   Starting in Mongo 4.4, the rollback directory for a collection is named
   after the collection's UUID rather than the collection namespace; e.g.

   .. code-block:: none
      :copyable: false

      <dbpath>/rollback/20f74796-d5ea-42f5-8c95-f79b39bad190/removed.2020-02-19T04-57-11.0.bson

   For details, see :ref:`replica-set-rollback-data`.

---
ref: 4.4-changes-timestamp-format
content: |

   Starting in MongoDB 4.4, |timestampfmt| no longer supports ``ctime``.
   An example of ``ctime`` formatted date is: ``Wed Dec 31
   18:17:54.811``.
---
ref: 4.4-changes-projection-sort-meta
content: |

   Starting in MongoDB 4.4:

   - You can specify :projection:`$meta` in the projection document
     of a :dbcommand:`find` command without specifying the
     :projection:`$meta` expression as part of a
     :method:`~cursor.sort()` document:
     
     .. code-block:: javascript 

       db.collection.find(
           <query>,
           { score: { $meta: "textScore" } }
       )

     As a result, you can project the
     :ref:`textScore <text-operator-text-score>` metadata without
     sorting the results by their search relevance.

   - You can specify the :projection:`$meta` expression as part of
     a :method:`~cursor.sort()` document without specifying
     :projection:`$meta` in the projection document of a 
     :dbcommand:`find` command:

     .. code-block:: javascript 

       db.collection.find(
           <query>
       ).sort( { score: { $meta: "textScore" } } )

     As a result, you can sort the resulting documents by their
     search relevance without projecting the ``textScore``. 

   - If you specify the :projection:`$meta` expression as part of a
     :method:`~cursor.sort()` document and the :term:`projection`
     document of a :dbcommand:`find` command, you can specify different
     field names for the :method:`~cursor.sort()` document and the
     :term:`projection` document.

     In the following example, the ``score`` field associated with the
     :projection:`$meta` expression in the projection document contains
     the document's :ref:`textScore <text-operator-text-score>`
     metadata. In contrast, the ``ignoredName`` field in the
     :method:`~cursor.sort()` document has an arbitrary name which
     does not affect the query.

     .. code-block:: javascript 

        db.collection.find(
          <query>, 
          { score: { $meta: "textScore" } }
        ).sort( { ignoredName: { $meta: "textScore" } } )

   In previous versions of MongoDB, the *same* :projection:`$meta`
   expression, including the ``<projectedFieldName>``, must appear in
   the :method:`~cursor.sort()` document and the :dbcommand:`find`
   command's projection document.
---
ref: 4.4-changes-textscore-predicate
content: |

   Starting in MongoDB 4.4, you must specify the :query:`$text` operator
   in the query predicate to use ``{ $meta: "textScore" }`` in either
   the :term:`projection` document or a :method:`~cursor.sort()`
   document.

   If you do not specify the :query:`$text` operator in the query
   predicate, the operation fails.

   .. example::

      The following :dbcommand:`find` command fails because it specifies
      ``{ $meta: "textScore" }`` in the :term:`projection` document, but
      does not specify :query:`$text` operator in the query predicate:

      .. code-block:: javascript
         :copyable: false

         // This command fails:

         db.articles.find( { }, { score: { $meta: "textScore" } } )

      To successfully execute the command, include the :query:`$text`
      operator in the query predicate:

      .. code-block:: javascript

         // This command succeeds:

         db.articles.find(
            { $text: { $search: "coffee" } },
            { score: { $meta: "textScore" } }
         )
---
ref: 4.4-changes-natural-sort-views
content: |

   Starting in MongoDB 4.4, you can specify a :operator:`$natural`
   sort when running a :dbcommand:`find` operation against a
   :doc:`view </core/views>`.
---
ref: 4.4-changes-drop-in-progress-indexes
content: |

  Starting in MongoDB 4.4, the :method:`db.collection.drop()` method and
  :dbcommand:`drop` command abort any in-progress index builds on the
  target collection before dropping the collection. Prior to MongoDB
  4.4, attempting to drop a collection with in-progress index builds
  results in an error, and the collection is not dropped.

  For replica sets or shard replica sets, aborting an index on the
  primary does not simultaneously abort secondary index builds.
  MongoDB attempts to abort the in-progress builds for the
  specified indexes on the :term:`primary` and if successful creates an
  associated ``abort`` :term:`oplog` entry. :term:`Secondary
  <secondary>` members with replicated in-progress builds wait for a
  commit or abort oplog entry from the primary before either committing
  or aborting the index build.
...
