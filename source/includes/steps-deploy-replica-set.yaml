# This file ref'd in steps-convert-replica-set-shard-deploy-test-data.yaml
# steps-deploy-geographically-distributed-replica-set-3member.yaml
# This file is tweaked to work with the other step file, as well.
#
title: "Start each member of the replica set with the appropriate options."
level: 4
ref: start-mongod
content: |

   For each member, start a :program:`mongod` instance with the
   following settings:

   - Set :setting:`replication.replSetName` option to the replica set name,

     .. include:: /includes/fact-unique-replica-set-names.rst

   - Set :setting:`net.bindIp` option to the ip or a comma-delimited
     list of ips, and

   - Set any other settings as appropriate for your deployment.

   In this tutorial, the three :program:`mongod` instances bind to the
   following ip address/hostname:

   .. list-table::
      :header-rows: 1

      * - Replica Set Member
        - IP Address
        - Hostname

      * - Member 0
        - ``11.1.111.00``
        - ``mongodb0.example.net``

      * - Member 1
        - ``11.1.111.11``
        - ``mongodb1.example.net``

      * - Member 2
        - ``11.1.111.22``
        - ``mongodb2.example.net``

   The following example specifies the replica set name and the ip
   binding through the :option:`--replSet` and :option:`--bind_ip`
   command-line options:

   .. code-block:: sh

      mongod --replSet "rs0" --bind_ip localhost,<ip address>

   For ``<ip address>``, specify the ip address or hostname for the
   :program:`mongod` instance that remote clients (including the other
   members of the replica set) can use to connect to the instance.
  
   Alternatively, you can also specify the :setting:`replica set name
   <replication.replSetName>` and the :setting:`ip addresses
   <net.bindIp>` in a :doc:`configuration file
   </reference/configuration-options>`:

   .. code-block:: yaml

      replication:
         replSetName: "rs0"
      net:
         bindIp: localhost,<ip address>

   To start :program:`mongod` with a configuration file, specify the
   configuration file's path with the :option:`--config <mongod
   --config>` option:
         
   .. code-block:: sh

      mongod --config <path-to-config>

   In production deployments, you can configure a :term:`init script`
   to manage this process. Init scripts are beyond the scope of this
   document.

---
title: "Connect a :program:`mongo` shell to one of the ``mongod`` instances."
level: 4
ref: open-shell
pre: |

  From the same machine where one of the :program:`mongod` is running
  (in this tutorial, ``mongodb0.example.net``), start the :program:`mongo`
  shell. To connect to the :program:`mongod` listening to localhost on
  the default port of ``27017``, simply issue:
action:
  language: sh
  code: |
    mongo
post: |

  Depending on your path, you may need to specify the path to the
  :program:`mongo` binary.
---
title: "Initiate the replica set."
level: 4
ref: initiate-rs
pre: |

  From the :program:`mongo` shell, run :method:`rs.initiate()` on
  replica set member 0.

  .. important::

     Run :method:`rs.initiate()` on *just one and only one*
     :program:`mongod` instance for the replica set:

action:
  language: javascript
  code: |
    rs.initiate( {
       _id : "rs0",
       members: [
          { _id: 0, host: "mongodb0.example.net:27017" },
          { _id: 1, host: "mongodb1.example.net:27017" },
          { _id: 2, host: "mongodb2.example.net:27017" }
       ]
    })
post: |
  MongoDB initiates a replica set, using 
  the default replica set configuration.
---
title: "View the replica set configuration."
level: 4
ref: verify-rsconf
action:
  - pre: |
      Use :method:`rs.conf()` to display the :doc:`replica set configuration
      object </reference/replica-configuration>`:
    language: javascript
    code: |
      rs.conf()
  - pre: |
      The replica set configuration object resembles the following:
    language: javascript
    code: |
      {
         "_id" : "rs0",
         "version" : 1,
         "protocolVersion" : NumberLong(1),
         "members" : [
            {
               "_id" : 0,
               "host" : "mongodb0.example.net:27017",
               "arbiterOnly" : false,
               "buildIndexes" : true,
               "hidden" : false,
               "priority" : 1,
               "tags" : {

               },
               "slaveDelay" : NumberLong(0),
               "votes" : 1
            },
            {
               "_id" : 1,
               "host" : "mongodb1.example.net:27017",
               "arbiterOnly" : false,
               "buildIndexes" : true,
               "hidden" : false,
               "priority" : 1,
               "tags" : {

               },
               "slaveDelay" : NumberLong(0),
               "votes" : 1
            },
            {
               "_id" : 2,
               "host" : "mongodb2.example.net:27017",
               "arbiterOnly" : false,
               "buildIndexes" : true,
               "hidden" : false,
               "priority" : 1,
               "tags" : {

               },
               "slaveDelay" : NumberLong(0),
               "votes" : 1
            }
            
         ],
         "settings" : {
            "chainingAllowed" : true,
            "heartbeatIntervalMillis" : 2000,
            "heartbeatTimeoutSecs" : 10,
            "electionTimeoutMillis" : 10000,
            "catchUpTimeoutMillis" : -1,
            "getLastErrorModes" : {

            },
            "getLastErrorDefaults" : {
               "w" : 1,
               "wtimeout" : 0
            },
            "replicaSetId" : ObjectId("585ab9df685f726db2c6a840")
         }
      }
---
title: "Ensure that the replica set has a primary."
level: 4
ref: check-status
pre: |
  Use :method:`rs.status()` to identify the primary in the replica set.
...
