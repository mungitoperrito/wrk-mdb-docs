title: Connect to ``mongos``.
ref: connect-mongos
level: 4
content: |
   Connect a :binary:`~bin.mongo` shell to a :binary:`~bin.mongos`.
---
title: Find the ``jumbo`` Chunk.
ref: find-jumbo
level: 4
content: |
   Run :method:`sh.status(true) <sh.status>` to find the chunk labeled
   ``jumbo``.

   .. code-block:: sh

      sh.status(true)

   For example, the following output from sh.status(true) shows that
   for the sharded collection ``test.foo``, both the chunk with shard
   key range { "x" : 1 } -->> { "x" : 2 } and the chunk with range ``{
   "x" : 2 } -->> { "x" : 3 }`` are ``jumbo``.
   
   .. code-block:: none
      :copyable: false
      :emphasize-lines: 18-19

       --- Sharding Status ---
         sharding version: {
            ...
         }
         shards:
            ...
         databases:
            ...
            test.foo
                    shard key: { "x" : 1 }
                    unique: false
                    balancing: true
                    chunks:
                            shardA	2
                            shardB	1
                            shardC	1
                    { "x" : { "$minKey" : 1 } } -->> { "x" : 1 } on : shardC Timestamp(3, 0) 
                    { "x" : 1 } -->> { "x" : 2 } on : shardA Timestamp(6, 1) jumbo 
                    { "x" : 2 } -->> { "x" : 3 } on : shardA Timestamp(5, 1) jumbo 
                    { "x" : 3 } -->> { "x" : { "$maxKey" : 1 } } on : shardB Timestamp(6, 0)
   
---
title: Refine the Shard Key for ``test.foo`` Collection.
ref: refine-key
level: 4
content: |
   
   To address the low cardinality of the key ``x``, refine the key for
   the ``test.foo`` collection. For example, add the ``postcode`` field
   as a suffix to the current shard key; i.e. the shard key will be ``{
   x: 1, postcode: 1 }`` after refinement.

   a. First, :method:`create the index <db.collection.createIndex()>`
      to support the shard key ``{ x: 1, postcode: 1 }`` if the
      index does not already exist.

      .. code-block:: javascript

         db.foo.createIndex( { x: 1, postcode: 1 } )

      For additional index considerations for refining the shard key,
      see :ref:`refineCollectionShardKey-index-considerations`.

   #. In the ``admin`` database, run the
      :dbcommand:`refineCollectionShardKey` command to add the
      ``postcode`` field as a suffix to the existing key:

      .. code-block:: javascript

         db.adminCommand( { 
            refineCollectionShardKey: "test.foo", 
            key: { x: 1, postcode: 1 }
         } )

   The :dbcommand:`refineCollectionShardKey` command updates the
   :doc:`chunk ranges </core/sharding-data-partitioning>` and
   :doc:`zone ranges </core/zone-sharding>` to incorporate the new
   fields without modifying the range values of the existing key
   fields. That is, the refinement of the shard key does not
   immediately affect the distribution of chunks across shards or
   zones. Any future chunk splits or migration occur as part of the
   routine sharding operations.
   
   .. tip::

      After you refine the shard key, it may be that not all documents in
      the collection have the suffix field(s). To populate the missing
      shard key field(s), see :ref:`shard-key-missing`.

      Before refining the shard key, ensure that all or most documents in
      the collection have the suffix fields, if possible, to avoid having
      to populate the field afterwards.

...