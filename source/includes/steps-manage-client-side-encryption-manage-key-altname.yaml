level: 4
ref: create-database-object
title: "Create the database connection."
stepnum: 1
source:
  file: steps-manage-client-side-encryption-create-key.yaml
  ref: create-database-object
---
level: 4
ref: create-key-vault
title: "Create the key vault object."
stepnum: 2
source:
  file: steps-manage-client-side-encryption-create-key.yaml
  ref: create-key-vault
---
level: 4
ref: modify-data-key
title: "Manage the data key's alternate name."
content: |

  Add Key Alternate Name
    Use the :method:`KeyVault.addKeyAlternateName()` to add a new
    alternate name to a data key:

    .. code-block:: javascript  
  
       keyVault.addKeyAlternateName(  
         UUID("b4b41b33-5c97-412e-a  02b-743498346079),
         "myNewKeyAlternateName"
       )

    The first parameter *must* be the UUID of the data key to modify.

    The second parameter *must* be a unique string.
    :method:`getKeyVault()` creates a unique index on ``keyAltNames``
    to enforce uniqueness of key alternate names.

    :method:`KeyVault.addKeyAlternateName()` returns the data key 
    document *prior* to modification. Use 
    :method:`KeyVault.getKey()` to retrive the modified data key.
  
  Remove Key Alternate Name
    Use the :method:`KeyVault.removeKeyAlternateName()` to remove 
    a key alternate name from a data key:
    
    .. code-block:: javascript

        keyVault.removeKeyAlternateName(
          UUID("b4b41b33-5c97-412e-a02b-743498346079"),
          "myNewKeyAlternateName"
        )

    The first parameter *must* be the UUID of the data key to modify.

    The second parameter *must* be a string key alternate name.

    :method:`KeyVault.removeKeyAlternateName()` returns the 
    data key *prior* to modification. Use :method:`KeyVault.getKey()`
    to retrieve the modified data key.
...

