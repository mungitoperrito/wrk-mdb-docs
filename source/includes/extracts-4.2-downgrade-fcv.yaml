ref: 4.2-downgrade-fcv-index-key
content: |

   Starting in MongoDB 4.2, for ``featureCompatibilityVersion`` (fCV)
   set to ``"4.2"`` or greater, MongoDB removes the :limit:`Index Key
   Limit`. For fCV set to ``"4.0"``, the limit still applies.

   If you have an index with keys that exceed the :limit:`Index Key
   Limit` once fCV is set to ``"4.0"``,
   consider changing the index to a hashed index or to indexing a
   computed value. You can also **temporarily** use
   :parameter:`failIndexKeyTooLong` set to ``false`` before resolving
   the problem. However, with :parameter:`failIndexKeyTooLong` set to
   ``false``, queries that use these indexes can return incomplete
   results.
---
ref: 4.2-downgrade-fcv-index-name
content: |

   Starting in MongoDB 4.2, for ``featureCompatibilityVersion`` (fCV)
   set to ``"4.2"`` or greater, MongoDB removes the :limit:`Index Key
   Limit`. For fCV set to ``"4.0"``, the limit still applies.

   If you have an index with a name that exceeds the :limit:`Index Name
   Length` once fCV is set to ``"4.0"``,
   drop and recreate the index with a shorter name.

   .. code-block:: javascript

      db.collection.dropIndex( <name | index specification> )

      db.collection.createIndex(
         { <index specification> },
         { name: <shorter name> }
      }
   
   .. see:: :method:`db.collection.dropIndex()` and :method:`db.collection.createIndex()`
---
ref: 4.2-downgrade-fcv-unique-index
content: |

   For ``featureCompatibilityVersion`` (fCV) set to ``"4.2"``, MongoDB
   uses a new internal format for unique indexes that is incompatible
   with 4.0. The new format applies to both existing unique indexes as
   well as newly created/rebuilt unique indexes. Use the following
   script to drop and recreate all unique indexes.

   .. code-block:: javascript

      // A script to rebuild unique indexes after downgrading fcv 4.2 to 4.0.
      // Run this script to drop and recreate unique indexes 
      // for backwards compatibility with 4.0.
      
      // Obtain a list of unique indexes for both v:1 and v:2
      var unique_idx_v1 = [];
      var unique_idx_v2 = [];
      db.adminCommand("listDatabases").databases.forEach(function(d){
         let mdb = db.getSiblingDB(d.name);
         mdb.getCollectionInfos().forEach(function(c){
            let currentCollection = mdb.getCollection(c.name);
            currentCollection.getIndexes().forEach(function(i){
               if (i.unique){
                  if (i.v === 1) {
                     unique_idx_v1.push(i);
                  }
                  else {
                     unique_idx_v2.push(i);
                  }
                  return;
               }
            });
         });
      });
      
      printjson(unique_idx_v1);
      printjson(unique_idx_v2);
      
      // Drop and recreate all v:1 indexes
      for (let idx of unique_idx_v1) {
         let splitpoint = idx.ns.indexOf(".");
         let dbName = idx.ns.substring(0,splitpoint);
         let collName = idx.ns.substring(splitpoint+1);
         let res = db.getSiblingDB(dbName).runCommand({dropIndexes: collName, index: idx.name});
         assert.commandWorked(res);
         res = db.getSiblingDB(dbName).runCommand({
            createIndexes: collName,
            indexes: [{"key": idx.key, "name": idx.name, "unique": true, "v": 1}]
         });
         assert.commandWorked(res);
      }
      
      // Drop and recreate all v:2 indexes
      for (let idx of unique_idx_v2) {
         let splitpoint = idx.ns.indexOf(".");
         let dbName = idx.ns.substring(0,splitpoint);
         let collName = idx.ns.substring(splitpoint+1);
         let res = db.getSiblingDB(dbName).runCommand({dropIndexes: collName, index: idx.name});
         assert.commandWorked(res);
         res = db.getSiblingDB(dbName).runCommand({
            createIndexes: collName,
            indexes: [{"key": idx.key, "name": idx.name, "unique": true, "v": 2}]
         });
         assert.commandWorked(res);
      }
...
