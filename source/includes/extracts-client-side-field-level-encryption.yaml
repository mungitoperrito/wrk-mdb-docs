ref: csfle-requires-enabling-encryption
content: |

  The :binary:`~bin.mongo` client-side field level encrytion methods require a
  database connection with client-side field level encryption enabled. If the
  current database connection was not initiated with client-side field level
  encryption enabled, either:
    
  - Use the :method:`Mongo()` constructor from the :binary:`~bin.mongo` shell
    to establish a connection with the required client-side field level
    encryption options. The :method:`Mongo()` method supports both Amazon Web
    Services and Local Key Management Service (KMS) providers for Customer
    Master Key (CMK) management.

    *or*

  - Use the ``mongo`` shell 
    :ref:`command line options
    <mongo-client-side-field-level-encryption-options>` to establish a
    connection with the required options. The command line options only support
    the AWS KMS provider for CMK management. 
---
ref: csfle-keyvault-unique-index
content: |

  The :method:`getKeyVault()` method automatically creates a :ref:`unique index
  <index-type-unique>` on ``keyAltNames``` with a :ref:`partial index
  <index-type-partial>` filter for only documents where ``keyAltNames`` exists.
  This prevents any two data keys from having the same key alternative name and
  therefore avoids ambiguity around which data key is appropriate for
  encryption/decryption.

  .. warning::

     Do not drop the unique index created by :method:`getKeyVault()`.
     Client-side field level encryption operations depend on server-enforced
     uniqueness of ``keyAltNames``. Removing the index may lead to unexpected
     or unpredictable behavior.
     
---
ref: csfle-environmental-variables
content: |

  To mitigate the risk of the AWS Access Key or AWS Secret Key leaking into
  logs, consider specifying an environment variable containing the required
  values as part of the :binary:`~bin.mongo` startup. For example, the following
  operation loads the ``AWS_ACCESS_KEY_ID`` and ``AWS_SECRET_ACCESS_KEY``
  environment variables into local variables in the :binary:`~bin.mongo` shell:

  .. code-block:: shell
      
     mongo --eval "
         var AWS_ACCESS_KEY_ID = '$AWS_ACCESS_KEY_ID'
         var AWS_SECRET_ACCESS_KEY = '$AWS_SECRET_ACCESS_KEY'
       " \
       --shell
       --nodb

  Use the created ``AWS_ACCESS_KEY_ID`` and ``AWS_SECRET_ACCESS_KEY`` 
  variables in the shell to reference the AWS credentials.
...