ref: transactions-read-pref
content: |

   :doc:`Multi-document transactions </core/transactions>` that contain
   read operations must use read preference :readmode:`primary`.

   All operations in a given transaction must route to the same member.
---
ref: transactions-usage
content: |
   .. important::

      Multi-document transaction incurs a greater performance cost over
      single document writes, and the availability of multi-document
      transaction should not be a replacement for effective schema design.
      For many scenarios, the denormalized data model will continue to be
      optimal for your data and use cases.
---
ref: transactions-intro
content: |
   Starting in version 4.0, for situations that require atomicity for
   updates to multiple documents or consistency between reads to multiple
   documents, MongoDB provides :doc:`multi-document transactions
   </core/transactions>` for replica sets.

   .. include:: /includes/extracts/transactions-usage.rst
---
ref: transactions-faq
content: |
   Because documents can bring together related data that would otherwise
   be modeled across separate parent-child tables in a relational schema,
   MongoDB's atomic single-document operations already provide transaction
   semantics that meet the data integrity needs of the majority of
   applications. One or more fields may be written in a single operation,
   including updates to multiple sub-documents and elements of an array.
   The guarantees provided by MongoDB ensure complete isolation as a
   document is updated; any errors cause the operation to roll back so
   that clients receive a consistent view of the document.

   Starting in version 4.0, for situations that require atomicity for
   updates to multiple documents or consistency between reads to multiple
   documents, MongoDB provides :doc:`multi-document transactions
   </core/transactions>` for replica sets, and transactions for sharded
   clusters are scheduled for MongoDB 4.2.
---
ref: transactions-operations-restrictions
content: |
 
   The following operations are not allowed in multi-document
   transactions:

   - Operations that affect the database catalog, such as creating or
     dropping a collection or an index. The
     :dbcommand:`listCollections` and :dbcommand:`listIndexes` commands
     and their helper methods are also excluded.

   - Non-CRUD and non-informational operations, such as
     :dbcommand:`createUser`, :dbcommand:`getParameter`,
     :dbcommand:`count`, etc. and their helpers.

---
ref: transactions-operations-restrictions-info
content: |

   Informational commands, such as :dbcommand:`isMaster`,
   :dbcommand:`buildInfo`, :dbcommand:`connectionStatus` (and their
   helper methods) are allowed in transactions; however, they cannot be
   the first operation in the transaction.

---
ref: transactions-operations-retry
content: |
   The commit and abort transaction operations are :doc:`retryable write
   operations </core/retryable-writes>`. If the commit operation or the
   abort operation encounters an error, MongoDB drivers retry the
   operation a single time regardless of whether :urioption:`retryWrites` is
   set to ``true``.

...
