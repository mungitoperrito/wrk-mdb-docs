.. _wildcard-index-single:

=======================
Single Wildcard Indexes
=======================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

MongoDB supports creating wildcard indexes on a field, or a set of
fields. A single index only has one index term. A single wildcard index
only has one term, but the term can match multiple fields.  

.. include:: /includes/extracts/wildcard-index-summary.rst

.. important::

   .. include:: /includes/indexes/wildcard-not-planning-replacement.rst

Wildcard Index Commands
-----------------------

.. include:: /includes/indexes/index-creation-methods.rst

Behavior
--------

.. include:: /includes/indexes/wildcard-indexes-considerations

For additional details, see :ref:`wildcard index details
<wildcard-index-details>`.

.. _ex-wc-single-index:

Examples
--------

.. _ex-wildcard-single-field:

Create a Wildcard Index on a Field
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To index the value of a specific field:

.. code-block:: javascript

   db.collection.createIndex( { "fieldA.$**" : 1 } )

With this wildcard index, MongoDB indexes all values of
``fieldA``. If the field is a nested document or array, the wildcard
index recurses into the document or array and stores the value for all 
fields in the document or array.

For example, documents in the ``product_catalog`` collection may contain
a  ``product_attributes`` field. The ``product_attributes`` field can
contain arbitrary nested fields, including embedded documents and
arrays:

.. code-block:: json

   {
     "product_name" : "Spy Coat",
     "product_attributes" : {
       "material" : [ "Tweed", "Wool", "Leather" ],
       "size" : {
         "length" : 72,
         "units" : "inches"
       }
     } 
   }

   {
     "product_name" : "Spy Pen",
     "product_attributes" : {
        "colors" : [ "Blue", "Black" ],
        "secret_feature" : {
          "name" : "laser",
          "power" : "1000",
          "units" : "watts"
        }
     }
   }

The following operation creates a wildcard index on the
``product_attributes`` field:

.. code-block:: javascript

   db.products_catalog.createIndex( { "product_attributes.$**" : 1 } )

The wildcard index can support arbitrary single-field queries on
``product_attributes`` or its embedded fields:

.. code-block:: bash
   :copyable: false
 
   db.products_catalog.find( { "product_attributes.size.length" : { $gt : 60 } } )
   db.products_catalog.find( { "product_attributes.material" : "Leather" } )
   db.products_catalog.find( { "product_attributes.secret_feature.name" : "laser" } )

.. |projection-ref| replace:: :ref:`createIndex-method-wildcard-option`

.. note::

   The path-specific wildcard index syntax is incompatible with the
   ``wildcardProjection`` option. See the |projection-ref| for more
   information.

For another example, see :ref:`createIndex-method-wildcard-onepath`.

.. _ex-wildcard-all-fields:

Create a Wildcard Index on All Fields
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To index the value of all fields in a document
(excluding ``_id``), specify ``"$**"`` as the index key:

.. code-block:: javascript

   db.collection.createIndex( { "$**" : 1 } )

With this wildcard index, MongoDB indexes all fields for each document
in the collection. If a given field is a nested document or array, the
wildcard index recurses into the document or array and stores the value
for all fields in the document or array.

For another example, see :ref:`createIndex-method-wildcard-allpaths`.

.. note::

   Wildcard indexes omit the ``_id`` field by default. To include the
   ``_id`` field in the wildcard index, you must explicitly include it
   in the ``wildcardProjection`` document. See |projection-ref| for
   more information.

Create a Wildcard Index on Multiple Specific Fields
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To index the values of multiple specific fields in a document:

.. code-block:: javascript

   db.collection.createIndex(
     { "$**" : 1 },
     { "wildcardProjection" : 
       { "fieldA" : 1, "fieldB.fieldC" : 1 }
     }
   )

With this wildcard index, MongoDB indexes all values for the specified
fields for each document in the collection. If a given field is a nested
document or array, the wildcard index recurses into the document or
array and stores the value for all fields in the document or array. 

.. note::

   .. include:: /includes/extracts/wildcard-index-inclusion-exclusion.rst

For another example, see :ref:`createIndex-method-wildcard-inclusion`.

Create a Wildcard Index that Excludes Multiple Specific Fields
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To index the fields of all fields in a document
*excluding* specific field paths:

.. code-block:: javascript

   db.collection.createIndex(
     { "$**" : 1 },
     { "wildcardProjection" : 
       { "fieldA" : 0, "fieldB.fieldC" : 0 }
     }
   )

With this wildcard index, MongoDB indexes all fields for each 
document in the collection *excluding* the specified field paths. If a
given field is a nested document or array, the wildcard index recurses
into the document or array and stores the values for all fields in the
document or array.

For another example, see :ref:`createIndex-method-wildcard-exclusion`.

.. note::

   .. include:: /includes/extracts/wildcard-index-inclusion-exclusion.rst


