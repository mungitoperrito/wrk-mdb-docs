===========================
Session.commitTransaction()
===========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. method:: Session.commitTransaction()

   .. versionadded:: 4.0

      :doc:`/core/transactions` are available for replica sets.

   Saves the changes made by the operations in the :doc:`multi-document
   transaction </core/transactions>` and ends the transaction. Until
   the commit, none of the data changes made from within the
   transaction is visible outside the transaction.

Behavior
--------

Write Concern
~~~~~~~~~~~~~

When commiting the transaction, the session uses the write concern
specified at the transaction start. See
:method:`Session.startTransaction()`.

If you commit using :writeconcern:`"w: 1" <\<number\>>` write concern,
your transaction can be :doc:`rolled back during the failover process
</core/replica-set-rollbacks>`.

Atomicity
~~~~~~~~~

When a transaction commits, all data changes made in the transaction
are saved and visible outside the transaction.

Example
-------

Consider a scenario where as changes are made to an employee's record
in the ``hr`` database, you want to ensure that the ``events``
collection in the ``reporting`` database are in sync with the ``hr``
changes. That is, you want to ensure that these writes are done as a
single transaction, such that either both operations succeed or fail.

The ``employees`` collection in the ``hr`` database has the following
documents:

.. code-block:: javascript

   { "_id" : ObjectId("5af0776263426f87dd69319a"), "employee" : 3, "name" : { "title" : "Mr.", "name" : "Iba Ochs" }, "status" : "Active", "department" : "ABC" }
   { "_id" : ObjectId("5af0776263426f87dd693198"), "employee" : 1, "name" : { "title" : "Miss", "name" : "Ann Thrope" }, "status" : "Active", "department" : "ABC" }
   { "_id" : ObjectId("5af0776263426f87dd693199"), "employee" : 2, "name" : { "title" : "Mrs.", "name" : "Eppie Delta" }, "status" : "Active", "department" : "XYZ" }


The ``events`` collection in the ``reporting`` database has the
following documents:

.. code-block:: javascript

   { "_id" : ObjectId("5af07daa051d92f02462644a"), "employee" : 1, "status" : { "new" : "Active", "old" : null }, "department" : { "new" : "ABC", "old" : null } }
   { "_id" : ObjectId("5af07daa051d92f02462644b"), "employee" : 2, "status" : { "new" : "Active", "old" : null }, "department" : { "new" : "XYZ", "old" : null } }
   { "_id" : ObjectId("5af07daa051d92f02462644c"), "employee" : 3, "status" : { "new" : "Active", "old" : null }, "department" : { "new" : "ABC", "old" : null } }

The following example opens a transaction, updates an employee's status
to ``Inactive`` in both the ``employees`` and the ``events``
collections, and commits the two operations as a single transaction.

.. code-block:: javascript

   function updateEmployeeInfo(session) {
      employeesCollection = session.getDatabase("hr").employees;
      eventsCollection = session.getDatabase("reporting").events;

      try{
         // Start a transaction for the session that uses:
         // - read concern "snapshot" 
         // - write concern "majority"
         session.startTransaction( {
            readConcern: { level: "snapshot" },
            writeConcern: { w: "majority" } 
         } );

         employeesCollection.updateOne( { employee: 3 }, { $set: { status: "Inactive" } } ); 
         eventsCollection.insertOne( { employee: 3, status: { new: "Inactive", old: "Active" } } );
      } catch (error) {
         print("Caught exception during transaction, aborting.");
         session.abortTransaction();  // Uses write concern "majority"
         throw error;
      }

      // Until commit, no data changes from the two operations in the transaction are visible outside the transaction
      session.commitTransaction(); // Uses write concern "majority"

   } // End of updateEmployeeInfo function

   // Start a session.
   session = db.getMongo().startSession( { mode: "primary" } );

   try {
      // call the employeeEvents function
      updateEmployeeInfo(session);
   } catch (error) {
      print("Caught exception during transaction.");
   }

   session.endSession();

.. seealso::

   - :method:`Session.abortTransaction()`

   - :method:`Session.commitTransaction()`
