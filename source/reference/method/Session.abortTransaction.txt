==========================
Session.abortTransaction()
==========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. method:: Session.abortTransaction()

   .. versionadded:: 4.0

      :doc:`/core/transactions` are available for replica sets.

   Terminates the :doc:`multi-document transaction
   </core/transactions>` and rolls back any data changes made by the
   operations within the transaction. That is, the transaction ends
   without saving any of the changes made by the operations in the
   transaction.

Behavior
--------

Write Concern
~~~~~~~~~~~~~

When aborting the transaction, the session uses the write concern
specified at the transaction start. See
:method:`Session.startTransaction()`.

Atomicity
~~~~~~~~~

When a transaction aborts, all data changes made by the writes in the
transaction are discarded without ever becoming visible and the
transaction ends.

Example
-------

Consider a scenario where as changes are made to an employee's record
in the ``hr`` database, you want to ensure that the ``events``
collection in the ``reporting`` database are in sync with the ``hr``
changes and vice versa. That is, you want to ensure that these writes are done as a
single transaction, such that either both operations succeed or fail.

The ``employees`` collection in the ``hr`` database has the following
documents:

.. code-block:: javascript

   { "_id" : ObjectId("5af0776263426f87dd69319a"), "employee" : 3, "name" : { "title" : "Mr.", "name" : "Iba Ochs" }, "status" : "Active", "department" : "ABC" }
   { "_id" : ObjectId("5af0776263426f87dd693198"), "employee" : 1, "name" : { "title" : "Miss", "name" : "Ann Thrope" }, "status" : "Active", "department" : "ABC" }
   { "_id" : ObjectId("5af0776263426f87dd693199"), "employee" : 2, "name" : { "title" : "Mrs.", "name" : "Eppie Delta" }, "status" : "Active", "department" : "XYZ" }

The ``employees`` collection has a unique index on the ``employee`` field.

The ``events`` collection in the ``reporting`` database has the
following documents:

.. code-block:: javascript

   { "_id" : ObjectId("5af07daa051d92f02462644a"), "employee" : 1, "status" : { "new" : "Active", "old" : null }, "department" : { "new" : "ABC", "old" : null } }
   { "_id" : ObjectId("5af07daa051d92f02462644b"), "employee" : 2, "status" : { "new" : "Active", "old" : null }, "department" : { "new" : "XYZ", "old" : null } }
   { "_id" : ObjectId("5af07daa051d92f02462644c"), "employee" : 3, "status" : { "new" : "Active", "old" : null }, "department" : { "new" : "ABC", "old" : null } }

The following example opens a transaction, attempts to add a record to
the ``events`` collection and add a document to the ``employees``
collection. If the operation encounters an error in either operations
or in committing the transaction, the session aborts the transaction.

.. code-block:: javascript

   // Start a session.
   session = db.getMongo().startSession( );

   employeesCollection = session.getDatabase("hr").employees;
   eventsCollection = session.getDatabase("reporting").events;

   // Start a transaction for the session that uses:
   // - read concern "snapshot" 
   // - write concern "majority"
   session.startTransaction( { 
      readConcern: { level: "snapshot" }, 
      writeConcern: { w: "majority" } 
   } );

   try{

      eventsCollection.insertOne( 
         { employee: 3, status: { new: "Active", old: null },  department: { new: "XYZ", old: null }  }
      );

      // Count number of events for employee 3
      var count = eventsCollection.find( { employee: 3 } ).count();
      print ( "Within open transaction: " + count );

      // The following operations should fail as an employee ``3`` already exist in employees collection
      employeesCollection.insertOne( 
         { employee: 3, name: { title: "Miss", name: "Terri Bachs" }, status: "Active", department: "XYZ" }
      ); 

   } catch (error) {
      print ("Abort transaction.")
      session.abortTransaction();  // Uses write concern "majority"
   }

   // Until commit, the data changes are not visible outside this transaction
   session.commitTransaction(); // Uses write concern "majority"

   var employeeCount = eventsCollection.find( { employees: 3 } ).count();

   print ("After abort transaction: " + employeeCount);

   session.endSession();

.. seealso::

   - :method:`Session.startTransaction()`

   - :method:`Session.commitTransaction()`
