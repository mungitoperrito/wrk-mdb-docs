================================
$listSearchIndexes (aggregation)
================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Definition
----------

.. pipeline:: $listSearchIndexes

.. |fts-indexes| replace:: :atlas:`{+fts+} indexes </atlas-search/atlas-search-overview/#fts-indexes>`

.. include:: /includes/atlas-search-commands/command-descriptions/getSearchIndexes-description.rst

.. include:: /includes/atlas-search-commands/atlas-only-db-command.rst

Syntax
------

Command syntax:

.. code-block:: javascript

   db.<collection>.aggregate(
      [
         {
            $listSearchIndexes:
               {
                  id: <indexId>,
                  name: <indexName>
               }
         }
      ]
   )

Command Fields
--------------

``$listSearchIndexes`` takes either of the following fields:

.. list-table::
  :header-rows: 1
  :widths: 20 20 20 80

  * - Field
    - Type
    - Necessity
    - Description

  * - ``id``
    - string
    - Optional
    - The id of the index to return information about.

  * - ``name``
    - string
    - Optional
    - The name of the index to return information about.
    

You cannot specify both ``id`` and ``name``. If you omit both the ``id``
and ``name`` fields, ``$listSearchIndexes`` returns information about
all Atlas Search indexes on the collection.

Access Control
--------------

.. |method-name| replace:: ``$listSearchIndexes``

.. include:: /includes/atlas-search-commands/access-control/list-access-control.rst

Output
------

.. |status-link| replace:: :ref:`search-index-status-aggregation`

.. include:: /includes/atlas-search-commands/command-output/listSearchIndex-output.rst

.. _search-index-status-aggregation:

Atlas Search Index Statuses
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/atlas-search-commands/command-output/search-index-statuses.rst

Examples
--------

These examples demonstrate how to:

- :ref:`listSearchIndexes-examples-return-all`

- :ref:`listSearchIndexes-examples-return-by-name`

- :ref:`listSearchIndexes-examples-return-by-id`

.. _listSearchIndexes-examples-return-all:

Return All Search Indexes
~~~~~~~~~~~~~~~~~~~~~~~~~

The following example returns all Atlas Search indexes on the ``movies``
collection:

.. code-block:: javascript

   db.movies.aggregate(
      [
         {
            $listSearchIndexes: { }
         }
      ]
   )

Sample output:

.. code-block:: javascript
   :copyable: false

   [
     {
       id: '648b5397d8261c7d7d6f720e',
       name: 'searchIndex01',
       status: 'READY',
       queryable: true,
       latestDefinition: { mappings: { dynamic: true } }
     },
     {
       id: '648b6110912df5513228465f',
       name: 'frenchIndex01',
       status: 'PENDING',
       queryable: false,
       latestDefinition: {
         mappings: {
           fields: {
             subject: {
               fields: { fr: { analyzer: 'lucene.french', type: 'string' } },
               type: 'document'
             }
           }
         }
       }
     }
   ]

The ``movies`` collection contains two indexes:

- ``searchIndex01`` is in the ``READY`` state.

- ``frenchIndex01`` is in the ``PENDING`` state.

.. _listSearchIndexes-examples-return-by-name:

Return a Single Search Index by Name
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following example returns the ``searchIndex01`` index on the
``movies`` collection:

.. code-block:: javascript

   db.movies.aggregate(
      [
         {
            $listSearchIndexes:
               {
                  name: "searchIndex01"
               }
         }
      ]
   )

Sample output:

.. code-block:: javascript
   :copyable: false

   [
     {
       id: '648cb60e06f6780ba87a9913',
       name: 'searchIndex01',
       status: 'READY',
       queryable: true,
       latestDefinition: { mappings: { dynamic: true } }
     }
   ]

.. _listSearchIndexes-examples-return-by-id:

Return a Single Search Index by id
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following example returns the ``frenchIndex01`` index based on the
index id:

.. code-block:: javascript

   db.movies.aggregate(
      [
         {
            $listSearchIndexes:
               {
                  id: "648b6110912df5513228465f"
               }
         }
      ]
   )

Sample output:

.. code-block:: javascript
   :copyable: false

   [
     {
       id: '648b6110912df5513228465f',
       name: 'frenchIndex01',
       status: 'PENDING',
       queryable: true,
       latestDefinition: {
         mappings: {
           fields: {
             subject: {
               fields: { fr: { analyzer: 'lucene.french', type: 'string' } },
               type: 'document'
             }
           }
         }
       }
     }
   ]

Learn More
----------

To use a ``mongosh`` method to view Atlas Search indexes, see
:method:`db.collection.getSearchIndexes()`.

To create Atlas Search indexes, see:

- The :method:`db.collection.createSearchIndex()` ``mongosh`` method

- The :dbcommand:`createSearchIndexes` database command
