.. _mongorestore:

================
``mongorestore``
================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. |tool-binary| replace:: mongorestore

.. include:: /includes/admonition-mac-osx-sierra-restriction.rst

Synopsis
--------

The :binary:`~bin.mongorestore` program loads data from either a binary
database dump created by :binary:`~bin.mongodump` or the standard input
(starting in version 3.0.0) into a :binary:`~bin.mongod` or
:binary:`~bin.mongos` instance.

Usage in Backup Strategy
------------------------

Standalones/Replica Sets
~~~~~~~~~~~~~~~~~~~~~~~~

For an overview of :binary:`~bin.mongorestore` usage as part of a
backup and recovery strategy, see
:doc:`/tutorial/backup-and-restore-tools`.

Sharded Clusters
~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/sharded-clusters-backup-restore-mongodump-mongorestore-restriction.rst
   
Syntax
------

.. include:: /includes/extracts/require-cmd-line-mongorestore.rst

.. code-block:: sh

   mongorestore [options] [<directory>/<BSON file>]


For example, to restore from a ``dump`` directory to a local
:binary:`~bin.mongod` instance running on port ``27017``:

.. code-block:: sh

   mongorestore  dump/

As :binary:`~bin.mongorestore` restores from the ``dump/`` directory,
it creates the database and collections as needed and logs its progress:

.. code-block:: sh
   :copyable: false

   2019-07-08T14:37:38.942-0400	preparing collections to restore from
   2019-07-08T14:37:38.944-0400	reading metadata for test.bakesales from dump/test/bakesales.metadata.json
   2019-07-08T14:37:38.944-0400	reading metadata for test.salaries from dump/test/salaries.metadata.json
   2019-07-08T14:37:38.976-0400	restoring test.salaries from dump/test/salaries.bson
   2019-07-08T14:37:38.985-0400	no indexes to restore
   2019-07-08T14:37:38.985-0400	finished restoring test.salaries (10 documents, 0 failures)
   2019-07-08T14:37:39.009-0400	restoring test.bakesales from dump/test/bakesales.bson
   2019-07-08T14:37:39.011-0400	restoring indexes for collection test.bakesales from metadata
   2019-07-08T14:37:39.118-0400	finished restoring test.bakesales (21 documents, 0 failures)
   2019-07-08T14:37:39.118-0400	restoring users from dump/admin/system.users.bson
   2019-07-08T14:37:39.163-0400	restoring roles from dump/admin/system.roles.bson
   2019-07-08T14:37:39.249-0400	31 document(s) restored successfully. 0 document(s) failed to restore.

You can also restore a specific collection or collections from the
``dump/`` directory. For example, the following operation restores a
single collection from corresponding data files in the ``dump/``
directory:

.. code-block:: sh

   mongorestore --nsInclude test.purchaseorders dump/

If the ``dump/`` directory does not contain the corresponding data file
for the specified namespace, no data will be restored. For example, the
following specifies a collection namespace that does not have a
corresponding data in the ``dump/`` directory:

.. code-block:: sh

   mongorestore --nsInclude foo.bar dump/

The :binary:`~bin.mongorestore` outputs the following messages:

.. code-block:: sh
   :copyable: false

   2019-07-08T14:38:15.142-0400	preparing collections to restore from
   2019-07-08T14:38:15.142-0400	0 document(s) restored successfully. 0 document(s) failed to restore.

For more examples, see :ref:`mongorestore-examples`.

For more information on the options and arguments, see
:ref:`mongorestore-options`.

Behavior
--------

Insert Only
~~~~~~~~~~~

:binary:`~bin.mongorestore` can create a new database or add data to an
existing database. However, :binary:`~bin.mongorestore` performs inserts
only and does not perform updates. That is, if restoring documents to
an existing database and collection and existing documents have the
same value ``_id`` field as the to-be-restored documents,
:binary:`~bin.mongorestore` will *not* overwrite those documents.

Rebuild Indexes
~~~~~~~~~~~~~~~

:binary:`~bin.mongorestore` recreates indexes recorded by
:binary:`~bin.mongodump`.

.. note::

   For MongoDB 2.6 through MongoDB versions with
   ``featureCompatibilityVersion`` (fCV) set to ``"4.0"`` or earlier,
   creating indexes will :limit:`error if an
   index key in an existing document exceeds the limit
   <Index Key Limit>`. 

   To avoid this issue, consider using hashed indexes or indexing a
   computed value instead. If you want to resolve the index issue after
   restoring the data, you can disable the default index key length
   validation on the target database by setting the :program:`mongod`
   instance's :parameter:`failIndexKeyTooLong` parameter to false.

Version Compatibility
~~~~~~~~~~~~~~~~~~~~~

.. include:: /includes/warning-mongodump-compatibility-2.2.rst

Exclude ``system.profile`` Collection
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

:binary:`~bin.mongorestore` does not restore the :data:`system.profile
<<database>.system.profile>` collection data.

FIPS
~~~~

.. include:: /includes/extracts/4.2-changes-fips-program.rst

Write Concern
~~~~~~~~~~~~~

Starting in version 4.2, if you specify write concern in both the
:option:`--writeConcern <mongorestore --writeConcern>` option and the
:option:`--uri connection string <mongorestore --uri>` option, the
:option:`--writeConcern <mongorestore --writeConcern>` value overrides
the write concern specified in the URI string.

In earlier versions, the two options are incompatible.

.. _mongorestore-required-access:

Required Access
---------------

.. include:: /includes/access-mongorestore-collections.rst

.. _mongorestore-options:

Options
-------

.. versionchanged:: 3.0.0
   :binary:`~bin.mongorestore` removed the ``--filter``, ``--dbpath``, and the
   ``--noobjcheck`` options.

.. binary:: mongorestore

.. program:: mongorestore

.. include:: /includes/option/option-mongorestore-help.rst

.. include:: /includes/option/option-mongorestore-verbose.rst

.. include:: /includes/option/option-mongorestore-quiet.rst

.. include:: /includes/option/option-mongorestore-version.rst

.. include:: /includes/option/option-mongorestore-uri.rst

.. include:: /includes/option/option-mongorestore-host.rst

.. include:: /includes/option/option-mongorestore-port.rst

.. include:: /includes/option/option-mongorestore-ssl.rst

.. include:: /includes/option/option-mongorestore-sslCAFile.rst

.. include:: /includes/option/option-mongorestore-sslPEMKeyFile.rst

.. include:: /includes/option/option-mongorestore-sslPEMKeyPassword.rst

.. include:: /includes/option/option-mongorestore-sslCRLFile.rst

.. include:: /includes/option/option-mongorestore-sslAllowInvalidCertificates.rst

.. include:: /includes/option/option-mongorestore-sslAllowInvalidHostnames.rst

.. include:: /includes/option/option-mongorestore-username.rst

.. include:: /includes/option/option-mongorestore-password.rst

.. include:: /includes/option/option-mongorestore-authenticationDatabase.rst

.. include:: /includes/option/option-mongorestore-authenticationMechanism.rst

.. include:: /includes/option/option-mongorestore-gssapiServiceName.rst

.. include:: /includes/option/option-mongorestore-gssapiHostName.rst

.. include:: /includes/option/option-mongorestore-db.rst

.. include:: /includes/option/option-mongorestore-collection.rst

.. include:: /includes/option/option-mongorestore-nsExclude.rst

.. include:: /includes/option/option-mongorestore-nsInclude.rst

.. include:: /includes/option/option-mongorestore-nsFrom.rst

.. include:: /includes/option/option-mongorestore-nsTo.rst

.. include:: /includes/option/option-mongorestore-objcheck.rst

.. include:: /includes/option/option-mongorestore-drop.rst

.. include:: /includes/option/option-mongorestore-dryRun.rst

.. include:: /includes/option/option-mongorestore-oplogReplay.rst

.. include:: /includes/option/option-mongorestore-oplogLimit.rst

.. include:: /includes/option/option-mongorestore-oplogFile.rst

.. include:: /includes/option/option-mongorestore-keepIndexVersion.rst

.. include:: /includes/option/option-mongorestore-noIndexRestore.rst

.. include:: /includes/option/option-mongorestore-noOptionsRestore.rst

.. include:: /includes/option/option-mongorestore-restoreDbUsersAndRoles.rst

.. include:: /includes/option/option-mongorestore-writeConcern.rst

.. include:: /includes/option/option-mongorestore-maintainInsertionOrder.rst

.. include:: /includes/option/option-mongorestore-numParallelCollections.rst

.. include:: /includes/option/option-mongorestore-numInsertionWorkersPerCollection.rst

.. include:: /includes/option/option-mongorestore-stopOnError.rst

.. include:: /includes/option/option-mongorestore-bypassDocumentValidation.rst

.. _mongorestore-path-option:

.. include:: /includes/option/option-mongorestore-gzip.rst

.. include:: /includes/option/option-mongorestore-archive.rst

.. include:: /includes/option/option-mongorestore-<path>.rst

.. include:: /includes/option/option-mongorestore-dir.rst

.. _mongorestore-examples:

Examples
--------

Restore with Access Control
~~~~~~~~~~~~~~~~~~~~~~~~~~~

In the following example, :binary:`~bin.mongorestore` restores from
``/opt/backup/mongodump-2011-10-24`` to a :binary:`~bin.mongod`
instance running on port ``27017`` on the host
``mongodb1.example.net``. The :option:`--uri <mongorestore --uri>`
string omits the user's password to have :binary:`~bin.mongorestore`
prompt for the password.

.. code-block:: sh

   mongorestore --uri "mongodb://user@mongodb1.example.net:27017/?authSource=admin" /opt/backup/mongodump-2011-10-24

Alternatively, you can specify the host, port, username, and
authentication database using :option:`--host <mongorestore --host>`,
:option:`--port <mongorestore --port>`, :option:`--username <mongorestore
--username>`, and :option:`--authenticationDatabase <mongorestore
--authenticationDatabase>`.  Omit :option:`--password <mongorestore
--password>` to have :binary:`~bin.mongorestore` prompt for the password:

.. code-block:: sh

   mongorestore --host mongodb1.example.net --port 27017 --username user --authenticationDatabase=admin /opt/backup/mongodump-2011-10-24

Restore a Collection
~~~~~~~~~~~~~~~~~~~~

.. versionadded:: 3.4

To restore a specific collection, use :option:`--nsInclude
<mongorestore --nsInclude>`, passing in the full namespace
(``<database>.<collection>``) of the collection.

For example, the following restores the collection named
``purchaseorders`` in the database ``test`` from the corresponding
files located in the ``dump/`` directory.

.. code-block:: sh

   mongorestore --nsInclude test.purchaseorders dump/

The :binary:`~bin.mongorestore` outputs the results, including the
number of documents restored:

.. code-block:: sh
   :copyable: false
   
   2019-06-28T19:23:42.858-0400   preparing collections to restore from
   2019-06-28T19:23:42.858-0400   reading metadata for test.purchaseorders from dump/test/purchaseorders.metadata.json
   2019-06-28T19:23:42.893-0400   restoring test.purchaseorders from dump/test/purchaseorders.bson
   2019-06-28T19:23:42.896-0400   restoring indexes for collection test.purchaseorders from metadata
   2019-06-28T19:23:42.991-0400   finished restoring test.purchaseorders (6 documents, 0 failures)
   2019-06-28T19:23:42.991-0400   6 document(s) restored successfully. 0 document(s) failed to restore.

If the ``dump/`` directory does not contain the corresponding data
files for the specified namespace, no data will be restored:

.. code-block:: sh
   :copyable: false

   2019-07-08T14:39:57.121-0400	preparing collections to restore from
   2019-07-08T14:39:57.121-0400	0 document(s) restored successfully. 0 document(s) failed to restore.

Alternatively, you can restore a specific collection using the
:option:`--db <mongorestore --db>`, :option:`--collection <mongorestore
--collection>`, and a ``.bson`` file:

.. code-block:: sh

   mongorestore --db test --collection purchaseorders dump/test/purchaseorders.bson

.. code-block:: sh
   :copyable: false

   2019-06-30T12:21:44.777-0400   checking for collection data in dump/test/purchaseorders.bson
   2019-06-30T12:21:44.779-0400   reading metadata for test.purchaseorders from dump/test/purchaseorders.metadata.json
   2019-06-30T12:21:44.813-0400   restoring test.purchaseorders from dump/test/purchaseorders.bson
   2019-06-30T12:21:44.881-0400   restoring indexes for collection test.purchaseorders from metadata
   2019-06-30T12:21:44.987-0400   finished restoring test.purchaseorders (6 documents, 0 failures)
   2019-06-30T12:21:44.987-0400   6 document(s) restored successfully. 0 document(s) failed to restore.

.. _example-basic-wildcard-usage:

Restore Collections Using Wild Cards
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. versionadded:: 3.4

:option:`--nsInclude <mongorestore --nsInclude>` and
:option:`--nsExclude <mongorestore --nsExclude>` support specifying the
:term:`namespaces <namespace>` you wish to include or exclude from a
restore operation using asterisks as *wild cards*.

The following example restores the documents in the ``dump/``
sub-directory of the current directory that match the specified
namespace pattern. The :option:`--nsInclude <mongorestore --nsInclude>`
statement specifies to only restore documents in the ``transactions``
database while :option:`--nsExclude <mongorestore --nsExclude>`
instructs :binary:`~bin.mongorestore` to exclude collections whose
names end with ``_dev``. :binary:`~bin.mongorestore` restores data to
the :binary:`~bin.mongod` instance running on the localhost interface
on port ``27017``.

.. code-block:: sh

   mongorestore --nsInclude 'transactions.*' --nsExclude 'transactions.*_dev' dump/

.. _example-complex-wildcard-usage:

Change Collections' Namespaces during Restore
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. versionadded:: 3.4

MongoDB 3.4 added the :option:`--nsFrom <mongorestore --nsFrom>` and
:option:`--nsTo <mongorestore --nsTo>` options, which enable you to
change the namespace of a collection that you are restoring.
:option:`--nsFrom <mongorestore --nsFrom>` and :option:`--nsTo
<mongorestore --nsTo>` support using asterisks as wild cards *and*
support using dollar signs to delimit "wild card" variables to use in
the replacement.

Consider a database ``data`` that you have exported to a ``dump/``
directory using :binary:`~bin.mongodump`. The ``data`` database
contains the following collections:

- ``sales_customer1``
- ``sales_customer2``
- ``sales_customer3``
- ``users_customer1``
- ``users_customer2``
- ``users_customer3``

Using :option:`--nsFrom <mongorestore --nsFrom>` and :option:`--nsTo
<mongorestore --nsTo>`, you can restore the data into different
namespaces. The following operation

- restores the ``sales_<customerName>`` collections in the ``data``
  database to ``sales`` collections in the ``<customerName>`` database,
  and

- restores the ``users_<customerName>`` collections to ``users``
  collections in the ``<customerName>`` database.

.. code-block:: sh

   mongorestore --nsInclude 'data.*' --nsFrom 'data.$prefix$_$customer$' --nsTo '$customer$.$prefix$'

.. _mongorestore-example-archive-file:

Restore from an Archive File
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To restore from an archive file, run :binary:`~bin.restore` with the new
``--archive`` option and the archive filename.

.. code-block:: sh

   mongorestore --archive=test.20150715.archive 

.. _mongorestore-example-archive-file-db:

Restore a Database from an Archive File
````````````````````````````````````````

.. versionadded:: 3.2

To restore from an archive file, run :binary:`~bin.restore` with the new
``--archive`` option and the archive filename. For example, the
following operation restores the ``test`` database from the file
``test.20150715.archive``.

.. code-block:: sh

   mongorestore --archive=test.20150715.archive  --nsInclude "test.*"


.. _mongorestore-example-gzip:

Restore from Compressed Data
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. versionadded:: 3.2
   With the ``--gzip`` option, :binary:`~bin.mongorestore` can restore from
   compressed files or data stream created by :binary:`~bin.mongodump`.

To restore from a dump directory that contains compressed files, run
:binary:`~bin.mongorestore` with the :option:`--gzip <mongorestore
--gzip>`. For example, the following operation restores the ``test``
database from the compressed files located in the default ``dump``
directory:

.. code-block:: sh

   mongorestore --gzip  --nsInclude "test.*" dump/

To restore from a compressed archive file, run
:binary:`~bin.mongorestore` with the :option:`--gzip <mongorestore
--gzip>` option and the :option:`--archive <mongorestore --archive>`
option. For example, the following operation restores the ``test``
database from the archive file ``test.20150715.gz``.

.. code-block:: sh

   mongorestore --gzip --archive=test.20150715.gz --nsInclude "test.*"

.. _mongorestore-example-archive-stdin:

Restore a Database from Standard Input
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. versionadded:: 3.2

To restore from the standard input, run :binary:`~bin.mongorestore`
with the :option:`--archive <mongorestore --archive>` option but *omit*
the filename. For example:

.. code-block:: sh

   mongodump --archive --db=test --port=27017 | mongorestore --archive --port 27018

