===============
convertToCapped
===============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. dbcommand:: convertToCapped

   The :dbcommand:`convertToCapped` command converts an existing,
   non-capped collection to a :term:`capped collection` within the same
   database.

   The command has the following syntax:

   .. versionchanged:: 3.6

   .. code-block:: javascript

      { convertToCapped: <collection>, size: <capped size>, txnNumber: <long>, lsid: { id: <UUID> } }
 
   .. list-table::
      :header-rows: 1
      :widths: 20 20 60

      * - Field
        - Type
        - Description

      * - ``convertToCapped``
        - String
        - The non-capped collection to convert.

      * - ``size``
        - Number
        - The maximum size in bytes for the capped collection.

      * - ``txnNumber``

        - 64-bit integer/long

        - Optional.

          .. include:: /includes/extracts/sessions-option-txnId.rst

          .. versionadded:: 3.6

      * - ``lsid``
        - Document
        - Optional.

          .. include:: /includes/extracts/sessions-option-sessionId.rst

          .. versionadded:: 3.6

Behavior
--------

During the conversion process, the :dbcommand:`convertToCapped`
command exhibits the following behavior:

- MongoDB traverses the documents in the original collection in
  :term:`natural order` and loads the documents into a new
  capped collection.

- If the ``capped size`` specified for the capped collection is
  smaller than the size of the original uncapped collection, then
  MongoDB will overwrite documents in the capped collection based
  on insertion order, or *first in, first out* order.

- Internally, to convert the collection, MongoDB uses the following
  procedure

  - :dbcommand:`cloneCollectionAsCapped` command creates the capped
    collection and imports the data.

  - MongoDB drops the original collection.

  - :dbcommand:`renameCollection` renames the new capped collection
    to the name of the original collection.

.. note::

   MongoDB does not support the :dbcommand:`convertToCapped`
   command in a sharded cluster.

.. warning::

   .. include:: /includes/fact-convertToCapped-indexes.rst

Example
-------

Convert a Collection
~~~~~~~~~~~~~~~~~~~~

The following example uses a :method:`db.collection.save()` operation to create
an ``events`` collection, and :method:`db.collection.stats()` to obtain
information about the collection:

.. code-block:: javascript

   db.events.save( { click: 'button-1', time: new Date() } )
   db.events.stats()

MongoDB will return the following:

.. code-block:: javascript

   {
           "ns" : "test.events",
           ...
           "capped" : false,
           ...
   }

To convert the ``events`` collection into a capped collection and view the
updated collection information, run the following commands:

.. code-block:: javascript

   db.runCommand( { convertToCapped: 'events', size: 8192 } )
   db.events.stats()

MongoDB will return the following:

.. code-block:: javascript

   {
        "ns" : "test.events",
        ...
        "capped" : true,
        "max" : NumberLong("9223372036854775807"),
        "maxSize" : 8192,
        ...
   }

.. include:: /includes/fact-convertToCapped-indexes.rst

.. seealso:: :dbcommand:`create`
