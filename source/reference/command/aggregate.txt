=========
aggregate
=========

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. dbcommand:: aggregate

   Performs aggregation operation using the :doc:`aggregation pipeline
   </reference/operator/aggregation-pipeline>`. The pipeline allows
   users to process data from a collection with a sequence of
   stage-based manipulations.

   .. TODO will undergo a thorough rewrite during the agg doc rewrite

   The command has following syntax:

   .. versionchanged:: 3.4

   .. code-block:: javascript

      {
        aggregate: "<collection>",
        pipeline: [ <stage>, <...> ],
        explain: <boolean>,
        allowDiskUse: <boolean>,
        cursor: <document>,
        bypassDocumentValidation: <boolean>,
        readConcern: <document>,
        collation: <document>
      }

   The :dbcommand:`aggregate` command takes the following fields as
   arguments:

   .. include:: /includes/apiargs/dbcommand-aggregate-field.rst

.. versionchanged:: 3.4

   .. include:: /includes/deprecation-aggregate-wo-cursor.rst

.. versionchanged:: 2.6

   :doc:`aggregation pipeline </reference/operator/aggregation-pipeline>`
   introduces the :pipeline:`$out` operator to allow
   :dbcommand:`aggregate` command to store results to a collection.

For more information about the aggregation pipeline
:doc:`/core/aggregation-pipeline`, :doc:`/reference/aggregation`, and
:doc:`/core/aggregation-pipeline-limits`.

Example
-------

.. versionchanged:: 3.4

   .. include:: /includes/deprecation-aggregate-wo-cursor.rst

   Rather than run the :dbcommand:`aggregate` command directly, most
   users should use the :method:`db.collection.aggregate()` helper
   provided in the :program:`mongo` shell or the equivalent helper in
   their driver. In 2.6 and later, the
   :method:`db.collection.aggregate()` helper always returns a cursor.

   Except for the first example which demonstrates the command syntax,
   the examples in this page use the
   :method:`db.collection.aggregate()` helper.

Aggregate Data with Multi-Stage Pipeline
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

A collection ``articles`` contains documents such as the following:

.. code-block:: javascript

   {
      _id: ObjectId("52769ea0f3dc6ead47c9a1b2"),
      author: "abc123",
      title: "zzz",
      tags: [ "programming", "database", "mongodb" ]
   }

The following example performs an :dbcommand:`aggregate` operation on
the ``articles`` collection to calculate the count of each distinct
element in the ``tags`` array that appears in the collection.

.. code-block:: javascript

   db.runCommand( {
      aggregate: "articles", 
      pipeline: [
         { $project: { tags: 1 } },
         { $unwind: "$tags" },
         { $group: { _id: "$tags", count: { $sum : 1 } } }
      ],
      cursor: { }
   } )

In the :program:`mongo` shell, this operation can use the
:method:`db.collection.aggregate()` helper as in the following:

.. code-block:: javascript

   db.articles.aggregate( [
      { $project: { tags: 1 } },
      { $unwind: "$tags" },
      { $group: { _id: "$tags", count: { $sum : 1 } } }
   ] )
   
Return Information on the Aggregation Operation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following aggregation operation sets the optional field ``explain``
to ``true`` to return information about the aggregation operation.

.. code-block:: javascript

   db.orders.aggregate([
         { $match: { status: "A" } },
         { $group: { _id: "$cust_id", total: { $sum: "$amount" } } },
         { $sort: { total: -1 } }
      ],
      { explain: true }
   )

.. note:: The ``explain`` output is subject to change between releases.

.. seealso:: :method:`db.collection.aggregate()` method

Aggregate Data using External Sort
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Aggregation pipeline stages have :ref:`maximum memory use limit
<agg-memory-restrictions>`. To handle large datasets, set
``allowDiskUse`` option to ``true`` to enable writing data to
temporary files, as in the following example:

.. code-block:: javascript

   db.stocks.aggregate( [
         { $project : { cusip: 1, date: 1, price: 1, _id: 0 } },
         { $sort : { cusip : 1, date: 1 } }
      ],
      { allowDiskUse: true }
   )

.. seealso:: :method:`db.collection.aggregate()`

Aggregate Data Specifying Batch Size
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To specify an *initial* batch size, specify the ``batchSize`` in the
``cursor`` field, as in the following example:

.. code-block:: javascript

   db.orders.aggregate( [
         { $match: { status: "A" } },
         { $group: { _id: "$cust_id", total: { $sum: "$amount" } } },
         { $sort: { total: -1 } },
         { $limit: 2 }
      ],
      { cursor: { batchSize: 0 } }
   )
      
The ``{batchSize: 0 }`` document specifies the size of the *initial*
batch size only. Specify subsequent batch sizes to :ref:`OP_GET_MORE
<wire-op-get-more>` operations as with other MongoDB cursors. A
``batchSize`` of ``0`` means an empty first batch and is useful if you
want to quickly get back a cursor or failure message, without doing
significant server-side work.

Specify a Collation
~~~~~~~~~~~~~~~~~~~

.. include:: /includes/extracts/collation-versionadded.rst

A collection ``myColl`` has the following documents:

.. code-block:: javascript

   { _id: 1, category: "caf√©", status: "A" }
   { _id: 2, category: "cafe", status: "a" }
   { _id: 3, category: "cafE", status: "a" }

The following aggregation operation includes the :ref:`collation`
option:

.. code-block:: javascript

   db.myColl.aggregate(
      [ { $match: { status: "A" } }, { $group: { _id: "$category", count: { $sum: 1 } } } ],
      { collation: { locale: "fr", strength: 1 } }
   );

For descriptions on the collation fields, see
:ref:`collation-document-fields`.

Override Default Read Concern
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To override the default read concern level of :readconcern:`"local"`,
use the ``readConcern`` option. The :dbcommand:`getMore` command uses
the ``readConcern`` level specified in the originating
:dbcommand:`aggregate` command.s

The following operation on a replica set specifies a :doc:`read concern
</reference/read-concern>` of :readconcern:`"majority"` to read the
most recent copy of the data confirmed as having been written to a
majority of the nodes.

.. important::

   - .. include:: /includes/fact-enable-majority-readConcern.rst

   - .. include:: /includes/fact-aggregate-readConcern.rst

   - .. include:: /includes/fact-readConcern-most-recent-data-in-node.rst

.. code-block:: javascript

   db.restaurants.aggregate(
      [ { $match: { rating: { $lt: 5 } } } ],
      { readConcern: { level: "majority" } }
   )

.. include:: /includes/usage-read-concern-majority.rst


.. seealso:: :method:`db.collection.aggregate()`
