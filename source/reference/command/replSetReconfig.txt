===============
replSetReconfig
===============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. dbcommand:: replSetReconfig

   The :dbcommand:`replSetReconfig` administrative command modifies the
   configuration of an existing replica set. You can use this command to
   add and remove members, and to alter the options set on existing
   members. You must run this command on the ``admin``
   database of the :term:`primary` replica set member.

   The command has the following syntax:

   .. code-block:: javascript

      db.adminCommand({ 
        replSetReconfig: <new_config_document>, 
        force: <boolean>,
        maxTimeMS: <int>
      })

   The command takes the following optional field:

   .. list-table::
      :header-rows: 1
      :widths: 20 80

      * - Field
        - Description

      * - .. _replSetReconfig-cmd-force:
          
          :ref:`force <replSetReconfig-cmd-force>`

        - Defaults to ``false``. Specify ``true`` to force the
          available replica set members to accept the new configuration.

          Force reconfiguration can result in unexpected or
          undesired behavior, including :ref:`rollback
          <replica-set-rollbacks>` of :writeconcern:`"majority"`
          committed writes.

      * - .. _replSetReconfig-cmd-maxTimeMS:

          :ref:`maxTimeMS <replSetReconfig-cmd-maxTimeMS>`

        - Optional. Specifies a cumulative time limit in milliseconds
          for processing the :dbcommand:`replSetReconfig`. By default,
          :dbcommand:`replSetReconfig` waits indefinitely for the
          replica configuration to propagate to a majority of replica
          set members. Setting ``maxTimeMS`` may result 
          in the operation failing *before* it can apply the new 
          configuration. See :ref:`replSetReconfig-safe-reconfig` 
          for more information.

          .. versionadded:: 4.4

   You may also run :dbcommand:`replSetReconfig` with the shell's
   :method:`rs.reconfig()` method.

.. slave-ok, admin-only

Behavior
--------

MongoDB 4.4 adds the :rsconf:`term` field to the replica set
configuration document. The :rsconf:`term` field is set by the
:term:`primary` replica set member. The primary ignores the
:rsconf:`term` field if set explicitly in the
:dbcommand:`replSetReconfig` operation.

.. _replSetReconfig-safe-reconfig:

Safe Replica Set Reconfiguration
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Starting in MongoDB 4.4, :dbcommand:`replSetReconfig` waits until a
majority of replica set members install the new replica configuration
before returning success. Replica set members propagate their replica
configuration via :ref:`heartbeats <replica-set-heartbeats>`. Whenever a
member learns of a configuration with a higher :rsconf:`version` and
:rsconf:`term`, it accepts and installs the new configuration. The
reconfiguration process has two distinct 'waiting' phases:

\1) Wait for the current configuration to be *committed* before installing the new configuration.
  The "current" configuration refers to the replica configuration in use
  by the primary at the time :dbcommand:`replSetReconfig` is issued. 
  
  The current configuration is *committed* when:

  - A majority of replica set members have installed the current 
    configuration, *and*

  - All writes which were majority committed in the previous 
    configuration have also replicated to a majority in the 
    current configuration.
    
  The current configuration has typically already been installed on a
  majority of replica set members and does not require additional
  waiting. The operation *may* wait a significant amount of time for a
  majority of replica members to commit specific oplog entries.
  :rsconf:`Delayed <members[n].slaveDelay>` members *or* members that
  are :method:`lagging behind <rs.printSlaveReplicationInfo()>`
  the primary can increase the time spent in this phase.
     
  If the operation was issued with a 
  :ref:`maxTimeMS <replSetReconfig-cmd-maxTimeMS>` limit *and* 
  the operation exceeds the limit while waiting, 
  return an error and discard the new configuration. The 
  limit is *cumulative* and does not reset after proceeding to 
  the next phase.

\2) Wait for a majority of members in the new configuration to install the new configuration.
  The "new" configuration refers to the replica configuration 
  specified to :dbcommand:`replSetReconfig`.

  The primary installs and begins using the new replica
  configuration before propagating the configuration to the
  remaining replica set members. The operation only waits for 
  a majority of members to install the new configuration, and does 
  not require waiting for the new configuration to be *committed*.
       
  If the operation was issued with a :ref:`maxTimeMS
  <replSetReconfig-cmd-maxTimeMS>` limit *and* the operation
  exceeds the limit while waiting, return an error *but* continue
  using and propagating the new configuration.

Issuing a :ref:`force <replSetReconfig-cmd-force>` reconfiguration
immediately installs the new configuration regardless of the commitment
status of the previous configuration. Force reconfiguration can cause 
unexpected behavior, such as the rollback of :writeconcern:`"majority"`
committed write operations.

To check the commitment status of the current replica configuration,
issue :dbcommand:`replSetGetConfig` with the 
:ref:`commitmentStatus <replSetGetConfig-commitmentStatus>` parameter 
on the replica set :term:`primary`. (*New in 4.4*)

Access Control
~~~~~~~~~~~~~~

To run the command on deployments that enforce :doc:`access
control</core/authorization>`, the user must have
:authaction:`replSetConfigure` privilege action on the cluster
resource. The :authrole:`clusterManager` built-in role, available in
the ``admin`` database, provides the required privileges for this
command.

Locking Behavior
~~~~~~~~~~~~~~~~

:dbcommand:`replSetReconfig` obtains a special mutually
exclusive lock to prevent more than one
:dbcommand:`replSetReconfig` operation from occurring at the same
time.

Mixed Version Replica Set
~~~~~~~~~~~~~~~~~~~~~~~~~

.. warning:: 
   .. include:: /includes/warning-mixed-version-rs-config.rst

Availability
~~~~~~~~~~~~

A majority of the set's members must be operational for the changes to 
propagate properly.

:dbcommand:`replSetReconfig` can trigger the current 
primary to step down in some situations. Primary step-down triggers 
an :ref:`election <replica-set-elections>` to select a new 
:term:`primary`:

- Starting in MongoDB 4.4, when the new primary steps up, it 
  increments the :rsconf:`term` field to distinguish configuration 
  changes made on the new primary from changes made on the previous 
  primary.

- Starting in MongoDB 4.2, when the primary steps down, it no longer
  closes all client connections; however, writes that were in progress
  are killed. For details, see :ref:`replSetStepDown-behavior`.

- In MongoDB 4.0 and earlier, when the primary steps down, it closes
  all client connections.

.. include:: /includes/fact-election-latency.rst

During the election process, the cluster cannot
accept write operations until it elects the new primary.

.. include:: /includes/fact-retryable-writes-failover-election.rst

To further reduce potential impact to a production cluster,
reconfigure only during scheduled maintenance periods.

``{ force: true }``
~~~~~~~~~~~~~~~~~~~

.. warning::

   Forcing the :dbcommand:`replSetReconfig` command can lead to a
   :term:`rollback` situation. Use with caution.

Drop Outgoing Connections After Removing a Member
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Using :dbcommand:`replSetReconfig` to remove a replica set member does
not automatically drop open outgoing connections from other replica
set members to the removed member.

By default, replica set members wait for 5 minutes before dropping
connections to the removed member. In sharded replica sets, you can
modify this timeout using the
:parameter:`ShardingTaskExecutorPoolHostTimeoutMS` server parameter.

.. versionadded:: 4.2

   To immediately drop all outgoing connections from the replica set to
   the removed member, run the :dbcommand:`dropConnections`
   administrative command on each remaining member on the replica set:

.. code-block:: javascript

   db.adminCommand( 
     {
       "dropConnections" : 1,
       "hostAndPort" : [
         "<hostname>:<port>"
       ] 
     } 
   )

Replace ``<hostname>`` and ``<port>`` with those of the removed 
member.

Member Priority and Votes
~~~~~~~~~~~~~~~~~~~~~~~~~

.. versionchanged:: 3.2

- .. include:: /includes/fact-rs-nonzero-priority-vote-restriction.rst
   
- .. include:: /includes/fact-rs-non-voting-priority-restriction.rst

Additional Information
----------------------

:ref:`replSetGetConfig-output`,
:doc:`/reference/replica-configuration`, :method:`rs.reconfig()`, and
:method:`rs.conf()`.
