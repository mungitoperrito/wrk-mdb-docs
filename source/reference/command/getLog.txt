======
getLog
======

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. dbcommand:: getLog

   :dbcommand:`getLog` is an administrative command that returns the most
   recent 1024 logged :binary:`~bin.mongod` events. :dbcommand:`getLog` *does not*
   read log data from the :binary:`~bin.mongod` log file. It instead reads data
   from a RAM cache of logged :binary:`~bin.mongod` events. To run
   :dbcommand:`getLog`, use the :method:`db.runCommand( { command } )
   <db.runCommand()>` method on the ``admin`` database.

Syntax
------

The :dbcommand:`getLog` command has the following syntax:

.. code-block:: javascript

   db.adminCommand( { getLog: <value> } )

Command Fields
~~~~~~~~~~~~~~

.. container::

   The possible values for :dbcommand:`getLog` are:

   .. list-table::
      :header-rows: 1
      :widths: 20 80
   
      * - Value
        - Description

      * - ``*``

        - Returns a list of the available values to the
          :dbcommand:`getLog` command.

      * - ``global`` 
   
        - Returns the combined output of all recent log entries.

      * - ``rs`` 
   
        - Returns recent log entries related to replica set activity if
          the :binary:`~bin.mongod` is part of a :term:`replica set`.

      * - ``startupWarnings`` 
   
        - Returns log entries that *may* contain errors or warnings
          from MongoDB's log from when the current process started. If
          :binary:`~bin.mongod` started without warnings, this filter
          may return an empty array.

Output
~~~~~~

.. container::

   If specified ``*``, then the command returns a document with the names
   of the other acceptable values.

   Otherwise, the command returns document that includes the following fields:

   - ``log`` field that contains an array of log events, and

   - ``totalLinesWritten`` field that contains the number of log events.

Behavior
--------

Line Truncation
~~~~~~~~~~~~~~~

.. container::

   Starting in MongoDB 4.2, :dbcommand:`getLog` truncates any event
   that contains more than 1024 characters. In earlier versions,
   :dbcommand:`getLog` truncates after 512 characters.

Examples
--------

Retrieve Available Log Filters
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following operation returns the available log filters for passing to
:dbcommand:`getLog`

.. code-block:: javascript

   db.adminCommand( { getLog: "*" } )

The operation returns the following document:

.. code-block:: sh

   { "names" : [ "global", "rs", "startupWarnings" ], "ok" : 1 }

Retrieve Recent Events from Log
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The following operation retrieves the most recent ``global`` events for the
:binary:`~bin.mongod`

.. code-block:: javascript

   db.adminCommand( { getLog : "global" } )

The operation returns a document similar to the following:

.. tabs::

   tabs:

      - id: 4.2-log-format
        name: MongoDB 4.2
        content: |

           .. code-block:: javascript
           
              {
                 "totalLinesWritten" : <num>,
                 "log" : [
                    "2020-03-15T19:31:05.644-0400 I  CONTROL  [main] Automatically disabling TLS 1.0, to force-enable TLS 1.0 specify --sslDisabledProtocols 'none'",
                    "2020-03-15T19:31:05.715-0400 I  CONTROL  [initandlisten] MongoDB starting : pid=15902 port=27017 dbpath=/var/lib/mongodb 64-bit host=myreplset1.example.net",
                    "2020-03-15T19:31:06.578-0400 I  CONTROL  [initandlisten] db version v4.2.3",
                    "2020-03-15T19:31:06.578-0400 I  CONTROL  [initandlisten] git version: 6874650b362138df74be53d366bbefc321ea32d4",
                    ...
                    "2020-03-15T20:14:11.800-0400 I  REPL     [replexec-38] Scheduling remote command request for vote request: RemoteCommand 4658 -- target:myreplset1.example.net:27017 db:admin cmd:{ replSetRequestVotes: 1, setName: \"shardA\", dryRun: true, term: 6, candidateIndex: 1, configVersion: 1, lastCommittedOp: { ts: Timestamp(1584317639, 1), t: 6 } }",
                    "2020-03-15T20:14:11.801-0400 I  REPL     [replexec-38] Scheduling remote command request for vote request: RemoteCommand 4659 -- target:myreplset3.example.net:27017 db:admin cmd:{ replSetRequestVotes: 1, setName: \"shardA\", dryRun: true, term: 6, candidateIndex: 1, configVersion: 1, lastCommittedOp: { ts: Timestamp(1584317639, 1), t: 6 } }",
                    "2020-03-15T20:14:11.802-0400 I  REPL     [replication-0] Restarting oplog query due to error: NetworkInterfaceExceededTimeLimit: error in fetcher batch callback :: caused by :: Request 4654 timed out, deadline was 2020-03-15T20:14:09.543-0400, op was RemoteCommand 4654 -- target:[myreplset1.example.net:27017] db:local expDate:2020-03-15T20:14:09.543-0400 cmd:{ getMore: 2378871356916183748, collection: \"oplog.rs\", batchSize: 13981010, maxTimeMS: 5000, term: 6, lastKnownCommittedOpTime: { ts: Timestamp(1584317639, 1), t: 6 } }. Last fetched optime: { ts: Timestamp(1584317639, 1), t: 6 }. Restarts remaining: 1",
                    "2020-03-15T20:14:11.802-0400 I  CONNPOOL [Replication] Connecting to myreplset3.example.net:27017",
                    "2020-03-15T20:14:11.804-0400 I  REPL     [replication-0] Scheduled new oplog query Fetcher source: myreplset1.example.net:27017 database: local query: { find: \"oplog.rs\", filter: { ts: { $gte: Timestamp(1584317639, 1) } }, tailable: true, oplogReplay: true, awaitData: true, maxTimeMS: 2000, batchSize: 13981010, term: 6, readConcern: { afterClusterTime: Timestamp(0, 1) } } query metadata: { $replData: 1, $oplogQueryData: 1, $readPreference: { mode: \"secondaryPreferred\" } } active: 1 findNetworkTimeout: 7000ms getMoreNetworkTimeout: 10000ms shutting down?: 0 first: 1 firstCommandScheduler: RemoteCommandRetryScheduler request: RemoteCommand 4662 -- target:myreplset1.example.net:27017 db:local cmd:{ find: \"oplog.rs\", filter: { ts: { $gte: Timestamp(1584317639, 1) } }, tailable: true, oplogReplay: true, awaitData: true, maxTimeMS: 2000, batchSize: 13981010, term: 6, readConcern: { afterClusterTime: Timestamp(0, 1) } } active: 1 callbackHandle.valid: 1 callbackHandle.cancelled: 0 attempt: 1 retryPolicy: {type: \"No",
                    "2020-03-15T20:14:11.805-0400 I  ELECTION [replexec-41] VoteRequester(term 6 dry run) received a yes vote from myreplset1.example.net:27017; response message: { term: 6, voteGranted: true, reason: \"\", ok: 1.0, $clusterTime: { clusterTime: Timestamp(1584317639, 1), signature: { hash: BinData(0, 0000000000000000000000000000000000000000), keyId: 0 } }, operationTime: Timestamp(1584317639, 1) }",
                    ...
                 ],
                 "ok" : 1,
                 "$clusterTime" : {
                    "clusterTime" : Timestamp(1584318241, 1),
                    "signature" : {
                       "hash" : BinData(0,"5t4v8ZtiInmxBwGLxdPoOAe2TPg="),
                       "keyId" : NumberLong("6804581450864656386")
                    }
                 },
                 "operationTime" : Timestamp(1584318241, 1)
              }

