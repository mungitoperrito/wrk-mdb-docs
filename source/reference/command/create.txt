======
create
======

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Definition
----------

.. dbcommand:: create

   Explicitly creates a collection or views. :dbcommand:`create` has
   the following form:

   .. versionchanged:: 3.4
      Added options ``viewOn`` and ``pipeline`` to support creation of
      views. See also :method:`db.createView()`.

   .. code-block:: javascript

      {
        create: <collection or view name>,
        capped: <true|false>,
        autoIndexId: <true|false>,
        size: <max_size>,
        max: <max_documents>,
        flags: <0|1|2|3>,
        storageEngine: <document>,
        validator: <document>,
        validationLevel: <string>,
        validationAction: <string>,
        indexOptionDefaults: <document>,
        viewOn: <source>, 
        pipeline: <pipeline> 
      }

   :dbcommand:`create` has the following fields:

   .. include:: /includes/apiargs/dbcommand-create-field.rst

   The :method:`db.createCollection()` method wraps the
   :dbcommand:`create` command.

Considerations
--------------

The :dbcommand:`create` command obtains a write lock on the
affected database and will block other operations until it has
completed. The write lock for this operation is typically short
lived. However, allocations for large capped collections may take
longer.

Examples
--------

Create a Capped Collection
~~~~~~~~~~~~~~~~~~~~~~~~~~

To create a :term:`capped collection` limited to 64 kilobytes, issue
the command in the following form:

.. code-block:: javascript

   db.runCommand( { create: "collection", capped: true, size: 64 * 1024 } )

Create a View
~~~~~~~~~~~~~

.. versionadded:: 3.4

To create a :doc:`view </core/views>` using the :dbcommand:`create`
command, use the following syntax:

.. code-block:: javascript

   db.runCommand( { create: <view>, viewOn: <source>, pipeline: <pipeline> } )

For example, given a collection ``survey`` with the following documents:

.. code-block:: javascript

   { _id: 1, empNumber: "abc123", feedback: { management: 3, environment: 3 }, department: "A" }
   { _id: 2, empNumber: "xyz987", feedback: { management: 2, environment: 3 }, department: "B" }
   { _id: 3, empNumber: "ijk555", feedback: { management: 3, environment: 4 }, department: "A" }

The following operation creates a ``managementRatings`` view with the
``_id``, ``feedback.management``, and ``department`` fields:

.. code-block:: javascript

   db.runCommand ( {
      create: "managementFeedback",
      viewOn: "survey",
      pipeline: [ { $project: { "management": "$feedback.management", department: 1 } } ]
   } )

.. seealso:: :method:`db.createView()`

Specify Storage Engine Options
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. versionadded:: 3.0

You can specify collection-specific storage engine configuration
options when you create a collection with
:method:`db.createCollection()`. Consider the following operation:

.. code-block:: javascript

   db.runCommand( {
       create: "users",
       storageEngine: { wiredTiger: { configString: "<option>=<setting>" } }
   } )

This operation creates a new collection named ``users`` with a
specific configuration string that MongoDB will pass to the
``wiredTiger`` storage engine. See the `WiredTiger documentation of
collection level options <http://source.wiredtiger.com/2.4.1/struct_w_t___s_e_s_s_i_o_n.html#a358ca4141d59c345f401c58501276bbb>`_
for specific ``wiredTiger`` options.
