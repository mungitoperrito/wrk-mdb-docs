# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2016
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-12-08 12:02-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/reference/operator/aggregation/sort.txt:3
# 44a683366ffc4bc38a35841a7e8ace56
msgid "$sort (aggregation)"
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:0
# 3e83f1ddecc14041995af479939abcc5
msgid "On this page"
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:14
# f76733b77f5b43d790fd1d1ee8be372d
msgid "Definition"
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:18
# 4439c43a0f964f03b475277fb5fc9890
msgid "Sorts all input documents and returns them to the pipeline in sorted order."
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:21
# a36a4b772c2f4528b9479d28809b2e9b
msgid "The :pipeline:`$sort` stage has the following prototype form:"
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:27
# 6cfe839ec19c4d7daad871cb57adaf0c
msgid ":pipeline:`$sort` takes a document that specifies the field(s) to sort by and the respective sort order. ``<sort order>`` can have one of the following values:"
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:31
# a0b45df5f7d3489faea7296d5fca3797
msgid "``1`` to specify ascending order."
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:33
# ad783aa89f414572a29b3683a6a22163
msgid "``-1`` to specify descending order."
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:35
# c7504a9880984e6bb419d416818ea505
msgid "``{ $meta: \"textScore\" }`` to sort by the computed ``textScore`` metadata in descending order. See :ref:`sort-pipeline-metadata` for an example."
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:40
# 7c9bb04b7a544ec38e1e7a5c7355b3e0
msgid "Examples"
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:45
# 6fcd3371724f4591bd42b586987a7670
msgid "Ascending/Descending Sort"
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:47
# 7cda0f023ef9483b98619b826b2a08ae
msgid "For the field or fields to sort by, set the sort order to ``1`` or ``-1`` to specify an ascending or descending sort respectively, as in the following example:"
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:58
# 37de32b4007440ef84435a96dd007f0b
msgid "This operation sorts the documents in the ``users`` collection, in descending order according by the ``age`` field and then in ascending order according to the value in the ``posts`` field."
msgstr ""

#: ../source/includes/fact-sort-order.rst:1
# 73cf41ba4dd74d018b0cfa5989f745d8
msgid "When comparing values of different :ref:`BSON types <bson-types>`, MongoDB uses the following comparison order, from lowest to highest:"
msgstr ""

#: ../source/includes/fact-sort-order.rst:4
# b1993feb0f2b4b59b609dfbc00f2827e
msgid "MinKey (internal type)"
msgstr ""

#: ../source/includes/fact-sort-order.rst:5
# d7cd02c5c409483484bae024d016ab06
msgid "Null"
msgstr ""

#: ../source/includes/fact-sort-order.rst:6
# 52fd3a379acf4ef099782e5ab726ec99
msgid "Numbers (ints, longs, doubles, decimals)"
msgstr ""

#: ../source/includes/fact-sort-order.rst:7
# 69a8ce1ac1a142bcb9b9666317322a31
msgid "Symbol, String"
msgstr ""

#: ../source/includes/fact-sort-order.rst:8
# 9e3d4790fbf948ef97fff5cbce5df5a6
msgid "Object"
msgstr ""

#: ../source/includes/fact-sort-order.rst:9
# d82a2b786075485980e0765fd69ca027
msgid "Array"
msgstr ""

#: ../source/includes/fact-sort-order.rst:10
# aa8967f33c034c6e940949d9f5e4d7a6
msgid "BinData"
msgstr ""

#: ../source/includes/fact-sort-order.rst:11
# eb8ca35923b34d0cac5c0b751067a1c0
msgid "ObjectId"
msgstr ""

#: ../source/includes/fact-sort-order.rst:12
# b1b4e7d6c00e4e1993e2477eac41d37b
msgid "Boolean"
msgstr ""

#: ../source/includes/fact-sort-order.rst:13
# 841a24b756834654a55683e474d29d6a
msgid "Date"
msgstr ""

#: ../source/includes/fact-sort-order.rst:14
# f5e68cdcfbac44e58433873b667d4e61
msgid "Timestamp"
msgstr ""

#: ../source/includes/fact-sort-order.rst:15
# 7835c965ab2542f79316513a44270a72
msgid "Regular Expression"
msgstr ""

#: ../source/includes/fact-sort-order.rst:16
# e268aa2290164736b4a4d235fbf51d5f
msgid "MaxKey (internal type)"
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:64
# 1a1acf72a9c84950b859a4ee39e42a90
msgid "For details on the comparison/sort order for specific types, see :ref:`bson-types-comparison-order`."
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:70
# fe23b2507da44a408e60008e34059f79
msgid "Metadata Sort"
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:72
# 4886e155e84c48f2b1b723f23ffbc988
msgid "Specify in the ``{ <sort-key> }`` document, a new field name for the computed metadata and specify the :expression:`$meta` expression as its value, as in the following example:"
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:85
# d06c6e3c4696450bb6ac8b0d14bfe032
msgid "This operation uses the :query:`$text` operator to match the documents, and then sorts first by the ``\"textScore\"`` metadata and then by descending order of the ``posts`` field. The specified metadata determines the sort order. For example, the ``\"textScore\"`` metadata sorts in descending order. See :expression:`$meta` for more information on metadata."
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:95
# 942c8f46d87f47d5b141d7a412799512
msgid "``$sort`` Operator and Memory"
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:100
# c4f21172abae4b3ea88c84f3ca93d584
msgid "``$sort`` + ``$limit`` Memory Optimization"
msgstr ""

#: ../source/includes/fact-agg-sort-limit.rst:1
# 12a62fec0ec14a12ab13a33c87c2ed78
msgid "When a :pipeline:`$sort` immediately precedes a :pipeline:`$limit` in the pipeline, the :pipeline:`$sort` operation only maintains the top ``n`` results as it progresses, where ``n`` is the specified limit, and MongoDB only needs to store ``n`` items in memory. This optimization still applies when ``allowDiskUse`` is ``true`` and the ``n`` items exceed the :ref:`aggregation memory limit <agg-memory-restrictions>`."
msgstr ""

#: ../source/includes/fact-agg-sort-limit.rst:8
# 974b5a5acc564f31bf7b20bf71568cb0
msgid "Before MongoDB 2.4, :pipeline:`$sort` would sort all the results in memory, and then limit the results to n results."
msgstr ""

#: ../source/includes/fact-optimizations-subject-to-change.rst:1
# beef9ff107d549c6ab60be20439c0bd0
msgid "Optimizations are subject to change between releases."
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:109
# 3c3978c9558349cf8a19b77a38eb44f0
msgid "``$sort`` and Memory Restrictions"
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:111
# bd6acc2d1544484abc1e50ca819f1a42
msgid "The :pipeline:`$sort` stage has a limit of 100 megabytes of RAM. By default, if the stage exceeds this limit, :pipeline:`$sort` will produce an error. To allow for the handling of large datasets, set the ``allowDiskUse`` option to ``true`` to enable :pipeline:`$sort` operations to write to temporary files. See the ``allowDiskUse`` option in :method:`db.collection.aggregate()` method and the :dbcommand:`aggregate` command for details."
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:119
# c8a77acdd12b4dc0b6e2d5e7aa079f24
msgid "The memory limit for :pipeline:`$sort` changed from 10 percent of RAM to 100 megabytes of RAM."
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:124
# ada47d64085242109322748ecb6a6a14
msgid "``$sort`` Operator and Performance"
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:126
# 8a471b6bcc124fe388f58bb6591ab893
msgid ":pipeline:`$sort` operator can take advantage of an index when placed at the **beginning** of the pipeline or placed **before** the :pipeline:`$project`, :pipeline:`$unwind`, and :pipeline:`$group` aggregation operators. If :pipeline:`$project`, :pipeline:`$unwind`, or :pipeline:`$group` occur prior to the :pipeline:`$sort` operation, :pipeline:`$sort` cannot use any indexes."
msgstr ""

#: ../source/reference/operator/aggregation/sort.txt:138
# d0703ac179284ff8bca7594bf0df69de
msgid ":doc:`/tutorial/aggregation-zip-code-data-set`, :doc:`/tutorial/aggregation-with-user-preference-data`"
msgstr ""

