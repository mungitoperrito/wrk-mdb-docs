# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2016
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-12-08 12:02-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/reference/operator/query/regex.txt:3
# 4d2be82d82ab4ffcb37fdeb7426cfcf2
msgid "$regex"
msgstr ""

#: ../source/reference/operator/query/regex.txt:0
# 34c9b57fd5984fb6b8c831ccd3bd7cb3
msgid "On this page"
msgstr ""

#: ../source/reference/operator/query/regex.txt:14
# 51cb967fa7bb4be8a32923de64ee8416
msgid "Definition"
msgstr ""

#: ../source/reference/operator/query/regex.txt:18
# 21142989ec624d55a136efe9fb3cc3a2
msgid "Provides regular expression capabilities for pattern matching *strings* in queries. MongoDB uses Perl compatible regular expressions (i.e. \"PCRE\" ) version 8.39 with UTF-8 support."
msgstr ""

#: ../source/reference/operator/query/regex.txt:22
# fda225c652c54f5eaa135d87630e89c5
msgid "To use :query:`$regex`, use one of the following syntax:"
msgstr ""

#: ../source/reference/operator/query/regex.txt:30
# d71be0cdf18d48b099b32a191e8d5795
msgid "In MongoDB, you can also use regular expression objects (i.e. ``/pattern/``) to specify regular expressions:"
msgstr ""

#: ../source/reference/operator/query/regex.txt:37
# 6c6cfbd54340455886a9c9fcd51063be
msgid "For restrictions on particular syntax use, see :ref:`syntax-restrictions`."
msgstr ""

#: ../source/reference/operator/query/regex.txt:42
# 5f46f9d1e00946858d2d68cf5640bb4f
msgid "The following ``<options>`` are available for use with regular expression."
msgstr ""

#: ../source/reference/operator/query/regex.txt:49
# 2f416c6485fe4003b6b8f90ad3b54789
msgid "Option"
msgstr ""

#: ../source/reference/operator/query/regex.txt:50
# 659f4492e2bd457ea236a78e63a4f595
msgid "Description"
msgstr ""

#: ../source/reference/operator/query/regex.txt:51
# 6dfbdbd9769a4e4eab5b42d980b24ba7
msgid "Syntax Restrictions"
msgstr ""

#: ../source/reference/operator/query/regex.txt:53
# db1421fc736e4880b83996ddf306c0f6
msgid "``i``"
msgstr ""

#: ../source/reference/operator/query/regex.txt:54
# 3fded0a68cc74a3aba5ac031d53698e8
msgid "Case insensitivity to match upper and lower cases. For an example, see :ref:`regex-case-insensitive`."
msgstr ""

#: ../source/reference/operator/query/regex.txt:58
# dbb3db519d7a4d5bb12334256cc049da
msgid "``m``"
msgstr ""

#: ../source/reference/operator/query/regex.txt:60
# 8946dd6ca8c94854beae9b57e24ac5d7
msgid "For patterns that include anchors (i.e. ``^`` for the start, ``$`` for the end), match at the beginning or end of each line for strings with multiline values. Without this option, these anchors match at beginning or end of the string. For an example, see :ref:`regex-multiline-match`."
msgstr ""

#: ../source/reference/operator/query/regex.txt:66
# 8b86ef79e7dc4706ae60d993f12ca356
msgid "If the pattern contains no anchors or if the string value has no newline characters (e.g. ``\\n``), the ``m`` option has no effect."
msgstr ""

#: ../source/reference/operator/query/regex.txt:72
# ffca0e7db79149368da8ea89644c51cc
msgid "``x``"
msgstr ""

#: ../source/reference/operator/query/regex.txt:74
# 054e20943c7345db9287cf8d52ffbfa2
msgid "\"Extended\" capability to ignore all white space characters in the :query:`$regex` pattern unless escaped or included in a character class."
msgstr ""

#: ../source/reference/operator/query/regex.txt:78
# 5a8430c635114b87b0ccb4f3ffaaa866
msgid "Additionally, it ignores characters in-between and including an un-escaped hash/pound (``#``) character and the next new line, so that you may include comments in complicated patterns. This only applies to data characters; white space characters may never appear within special character sequences in a pattern."
msgstr ""

#: ../source/reference/operator/query/regex.txt:85
# a0d4ff48b713421e8fc50675a581e4da
msgid "The ``x`` option does not affect the handling of the VT character (i.e. code 11)."
msgstr ""

#: ../source/reference/operator/query/regex.txt:88
#: ../source/reference/operator/query/regex.txt:96
# 82a7cbbdc8f147b3bdb2678bec839a0d
# c1dd36eafc2c4403a514dc266a093f81
msgid "Requires ``$regex`` with ``$options`` syntax"
msgstr ""

#: ../source/reference/operator/query/regex.txt:90
# 10e4d2f57cc445f28d273d1a6d97a10f
msgid "``s``"
msgstr ""

#: ../source/reference/operator/query/regex.txt:92
# b0671496216945bc892a42e420e35248
msgid "Allows the dot character (i.e. ``.``) to match all characters *including* newline characters. For an example, see :ref:`regex-dot-new-line`."
msgstr ""

#: ../source/reference/operator/query/regex.txt:99
# 3ca4f634a996428bbdc46c3b379eca29
msgid "Behavior"
msgstr ""

#: ../source/reference/operator/query/regex.txt:104
# bba5ae5d48224514b941958e477a7da2
msgid "$regex vs. /pattern/ Syntax"
msgstr ""

#: ../source/reference/operator/query/regex.txt:107
# 20e67b82ffa64ff78c9aea1b36b5ba16
msgid "``$in`` Expressions"
msgstr ""

#: ../source/reference/operator/query/regex.txt:109
# dd95af1c748f4dbf8a035e3f678379fa
msgid "To include a regular expression in an ``$in`` query expression, you can only use JavaScript regular expression objects (i.e. ``/pattern/`` ). For example:"
msgstr ""

#: ../source/reference/operator/query/regex.txt:117
# 9b0d26dd0ecb42f7980741b06ef2377c
msgid "You *cannot* use :query:`$regex` operator expressions inside an :query:`$in`."
msgstr ""

#: ../source/reference/operator/query/regex.txt:121
# 7e75df65ff2e4b33bf8d5d1a17b8538d
msgid "Implicit ``AND`` Conditions for the Field"
msgstr ""

#: ../source/reference/operator/query/regex.txt:123
# 853475a9e1654d55bf904831500c9a45
msgid "To include a regular expression in a comma-separated list of query conditions for the field, use the :query:`$regex` operator. For example:"
msgstr ""

#: ../source/reference/operator/query/regex.txt:133
# b8a8a37ac2f84fa2bca1e51698e3205d
msgid "``x`` and ``s`` Options"
msgstr ""

#: ../source/reference/operator/query/regex.txt:135
# 984eac8a7499429797d848f5191c9c15
msgid "To use either the ``x`` option or ``s`` options, you must use the :query:`$regex` operator expression *with* the :query:`$options` operator. For example, to specify the ``i`` and the ``s`` options, you must use :query:`$options` for both:"
msgstr ""

#: ../source/reference/operator/query/regex.txt:146
# faea4285178f4b7ab4736eaa4061260d
msgid "PCRE vs JavaScript"
msgstr ""

#: ../source/reference/operator/query/regex.txt:148
# 08339c4c0b594c9bb50e3238a4ac2cb0
msgid "To use PCRE supported features in the regex pattern that are unsupported in JavaScript, you must use the :query:`$regex` operator expression with the pattern as a string. For example, to use ``(?i)`` in the pattern to turn case-insensitivity on for the remaining pattern and ``(?-i)`` to turn case-sensitivity on for the remaining pattern, you must use the :query:`$regex` operator with the pattern as a string:"
msgstr ""

#: ../source/reference/operator/query/regex.txt:162
# ca6a43d31f56447ba642056cbb108743
msgid "Index Use"
msgstr ""

#: ../source/reference/operator/query/regex.txt:166
# 9ca01cf9b2f24de2b0e7a4ed8204affd
msgid "For case sensitive regular expression queries, if an index exists for the field, then MongoDB matches the regular expression against the values in the index, which can be faster than a collection scan. Further optimization can occur if the regular expression is a \"prefix expression\", which means that all potential matches start with the same string. This allows MongoDB to construct a \"range\" from that prefix and only match against those values from the index that fall within that range."
msgstr ""

#: ../source/reference/operator/query/regex.txt:175
# 6c9d938fe61f40c5b0555bbc7efc60fb
msgid "A regular expression is a \"prefix expression\" if it starts with a caret (``^``) or a left anchor (``\\A``), followed by a string of simple symbols. For example, the regex ``/^abc.*/`` will be optimized by matching only against the values from the index that start with ``abc``."
msgstr ""

#: ../source/reference/operator/query/regex.txt:180
# 3eb24ec1ba0f4420960c6c3fab99b5bc
msgid "Additionally, while ``/^a/``, ``/^a.*/``, and ``/^a.*$/`` match equivalent strings, they have different performance characteristics. All of these expressions use an index if an appropriate index exists; however, ``/^a.*/``, and ``/^a.*$/`` are slower. ``/^a/`` can stop scanning after matching the prefix."
msgstr ""

#: ../source/reference/operator/query/regex.txt:186
# ada67a620588407d93d0d1a9693d3a88
msgid "For case insensitive regular expression queries, these queries generally cannot use indexes effectively."
msgstr ""

#: ../source/reference/operator/query/regex.txt:190
# 849db4ebf13940e282183e6a897a55a1
msgid "Examples"
msgstr ""

#: ../source/reference/operator/query/regex.txt:192
# f013db0e935a407193347f754fe98530
msgid "The following examples use a collection ``products`` with the following documents:"
msgstr ""

#: ../source/reference/operator/query/regex.txt:205
# 41b72ee3095e45ebafdeaf04575f76df
msgid "Perform Case-Insensitive Regular Expression Match"
msgstr ""

#: ../source/reference/operator/query/regex.txt:207
# 47df83441b3b47bda95ad38203eb1270
msgid "The following example uses the ``i`` option perform a *case-insensitive* match for documents with ``sku`` value that starts with ``ABC``."
msgstr ""

#: ../source/reference/operator/query/regex.txt:215
#: ../source/reference/operator/query/regex.txt:234
#: ../source/reference/operator/query/regex.txt:274
# e1ccf755f82943e780e775d975f51daf
# ed817021b62e4516b2c89d42034a64ec
# 99f5b220644e4bbcb292bafa7332dd1d
msgid "The query matches the following documents:"
msgstr ""

#: ../source/reference/operator/query/regex.txt:225
# 1073af57fb4b4771b52b0b70083de4ed
msgid "Multiline Match for Lines Starting with Specified Pattern"
msgstr ""

#: ../source/reference/operator/query/regex.txt:227
# e3153f482e2348ccac8e8dd0f1feebb8
msgid "The following example uses the ``m`` option to match lines starting with the letter ``S`` for multiline strings:"
msgstr ""

#: ../source/reference/operator/query/regex.txt:241
# 2bbe7e5f662447c59ef3748b67beaa1d
msgid "Without the ``m`` option, the query would match just the following document:"
msgstr ""

#: ../source/reference/operator/query/regex.txt:247
# 1d98d1c0ff294cbcb97e7d2d55df55c8
msgid "If the :query:`$regex` pattern does not contain an anchor, the pattern matches against the string as a whole, as in the following example:"
msgstr ""

#: ../source/reference/operator/query/regex.txt:254
# 5a89ede0e0bd432ba14b512994d56f6f
msgid "Then, the :query:`$regex` would match both documents:"
msgstr ""

#: ../source/reference/operator/query/regex.txt:264
# 6a8bf6ea608a430481b601c05bf21926
msgid "Use the ``.`` Dot Character to Match New Line"
msgstr ""

#: ../source/reference/operator/query/regex.txt:266
# 0176fcef129b4aff812df4fcbeedcf04
msgid "The following example uses the ``s`` option to allow the  dot character (i.e. ``.``) to match all characters *including* new line as well as the ``i`` option to perform a case-insensitive match:"
msgstr ""

#: ../source/reference/operator/query/regex.txt:281
# 3e261ab3e45f495f81a0a03d5fdc7545
msgid "*Without* the ``s`` option, the query would have matched only the following document:"
msgstr ""

#: ../source/reference/operator/query/regex.txt:290
# 2301439cd0b74fa79f5104bd81ba8427
msgid "Ignore White Spaces in Pattern"
msgstr ""

#: ../source/reference/operator/query/regex.txt:292
# d6f2cb9279184dbfab4dd3568085c7ea
msgid "The following example uses the ``x`` option ignore white spaces and the comments, denoted by the ``#`` and ending with the ``\\n`` in the matching pattern:"
msgstr ""

#: ../source/reference/operator/query/regex.txt:301
# 777e49fbee3148b381393857abe2ff8f
msgid "The query matches the following document:"
msgstr ""

