# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2016
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-12-08 12:02-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/replication.txt:3
# 3b617c38da0e4d2fa6b0bcf609233028
msgid "Replication"
msgstr ""

#: ../source/replication.txt:0
# b4ff2fb5360446358d1192ee6bda55d6
msgid "On this page"
msgstr ""

#: ../source/replication.txt:13
# dc38207eb40d440ca1a257bfca0d878c
msgid "A *replica set* in MongoDB is a group of :program:`mongod` processes that maintain the same data set. Replica sets provide redundancy and high availability, and are the basis for all production deployments. This section introduces replication in MongoDB as well as the components and architecture of replica sets. The section also provides tutorials for common tasks related to replica sets."
msgstr ""

#: ../source/replication.txt:21
# 067eec07b0f74a529b2cf05ca209e319
msgid "Redundancy and Data Availability"
msgstr ""

#: ../source/replication.txt:23
# 8e26c8582f6041a7975071aedf01e160
msgid "Replication provides redundancy and increases data availability. With multiple copies of data on different database servers, replication provides a level of fault tolerance against the loss of a single database server."
msgstr ""

#: ../source/replication.txt:28
# de1f301cec014ee698afa3f90b497a16
msgid "In some cases, replication can provide increased read capacity as clients can send read operations to different servers. Maintaining copies of data in different data centers can increase data locality and availability for distributed applications. You can also maintain additional copies for dedicated purposes, such as disaster recovery, reporting, or backup."
msgstr ""

#: ../source/replication.txt:36
# fe567b42400b414abb7fc87259fcb400
msgid "Replication in MongoDB"
msgstr ""

#: ../source/replication.txt:38
# 14b95ee753384260bfdf664a45753dd8
msgid "A replica set is a group of :program:`mongod` instances that maintain the same data set. A replica set contains several data bearing nodes and optionally one arbiter node. Of the data bearing nodes, one and only one member is deemed the primary node, while the other nodes are deemed secondary nodes."
msgstr ""

#: ../source/replication.txt:44
# 2a23bb7ecb354da7a177e4dc10174aab
msgid "The :doc:`primary node </core/replica-set-primary>` receives all write operations. A replica set can have only one primary capable of confirming writes with :writeconcern:`{ w: \"majority\" } <\"majority\">` write concern; although in some circumstances, another mongod instance may transiently believe itself to also be primary. [#edge-cases-2-primaries]_ The primary records all changes to its data sets in its operation log, i.e. :doc:`oplog </core/replica-set-oplog>`. For more information on primary node operation, see :doc:`/core/replica-set-primary`."
msgstr ""

#: ../source/replication.txt:56
# f187722bb71f48edb247d280e79e0802
msgid "The :doc:`secondaries </core/replica-set-secondary>` replicate the primary's oplog and apply the operations to their data sets such that the secondaries' data sets reflect the primary's data set. If the primary is unavailable, an eligible secondary will hold an election to elect itself the new primary. For more information on secondary members, see :doc:`/core/replica-set-secondary`."
msgstr ""

#: ../source/replication.txt:65
# f1504c61d76e4be2b83e0d090c64669c
msgid "You may add an extra :program:`mongod` instance to a replica set as an :doc:`arbiter </core/replica-set-arbiter>`. Arbiters do not maintain a data set. The purpose of an arbiter is to maintain a quorum in a replica set by responding to heartbeat and election requests by other replica set members. Because they do not store a data set, arbiters can be a good way to provide replica set quorum functionality with a cheaper resource cost than a fully functional replica set member with a data set. If your replica set has an even number of members, add an arbiter to obtain a majority of votes in an election for primary. Arbiters do not require dedicated hardware. For more information on arbiters, see :doc:`/core/replica-set-arbiter`."
msgstr ""

#: ../source/replication.txt:79
# 0968777371844de4a798b2939722f57a
msgid "An :doc:`arbiter </core/replica-set-arbiter>` will always be an arbiter whereas a :doc:`primary </core/replica-set-primary>` may step down and become a :doc:`secondary </core/replica-set-secondary>` and a :doc:`secondary </core/replica-set-secondary>` may become the primary during an election."
msgstr ""

#: ../source/replication.txt:88
# df8e7e511c55495aad625b76211a2895
msgid "Asynchronous Replication"
msgstr ""

#: ../source/replication.txt:90
# 63283bac74ea46959504f86b8af1ff0d
msgid "Secondaries apply operations from the primary asynchronously. By applying operations after the primary, sets can continue to function despite the failure of one or more members. For more information on replication mechanics, see :ref:`replica-set-oplog` and :ref:`replica-set-sync`."
msgstr ""

#: ../source/replication.txt:99
# e01bffbbc6284cc69d3311a3aa3ff17c
msgid "Automatic Failover"
msgstr ""

#: ../source/replication.txt:101
# 02728e00e55f436aa783b5aa4c39cfaa
msgid "When a primary does not communicate with the other members of the set for more than 10 seconds, an eligible secondary will hold an election to elect itself the new primary. The first secondary to hold an election and receive a majority of the members' votes becomes primary."
msgstr ""

#: ../source/includes/fact-replica-set-protocolVersion1.rst:3
# 4304b1c490894dc6a1e673b4644641b2
msgid "MongoDB introduces a version 1 of the replication protocol (:rsconf:`protocolVersion: 1 <protocolVersion>`) to reduce replica set failover time and accelerates the detection of multiple simultaneous primaries. New replica sets will, by default, use :rsconf:`protocolVersion: 1 <protocolVersion>`. Previous versions of MongoDB use version 0 of the protocol."
msgstr ""

#: ../source/replication.txt:110
# 0e55e08f1182488282a8dbc756ba1fbb
msgid "Although the timing varies, the failover process generally completes within a minute. For instance, it may take 10-30 seconds for the members of a :term:`replica set` to declare a :term:`primary` inaccessible (see :rsconf:`~settings.electionTimeoutMillis`). One of the remaining secondaries holds an :term:`election` to elect itself as a new primary. The election itself may take another 10-30 seconds."
msgstr ""

#: ../source/replication.txt:119
# 0c30aba9b88649d6a266fbc28bb1a39a
msgid "Starting in MongoDB 3.2, with the :ref:`replication election enhancements <3.2-rel-notes-rs-enhancements>`, MongoDB reduces replica set failover time. See :ref:`replication election enhancements <3.2-rel-notes-rs-enhancements>` for details."
msgstr ""

#: ../source/replication.txt:124
# 26458922e6994984944811018b3384e8
msgid "See :ref:`replica-set-elections` and :ref:`replica-set-rollbacks` for more information."
msgstr ""

#: ../source/replication.txt:128
# 699b08d5de0c4082b2952603c84993f8
msgid "Read Operations"
msgstr ""

#: ../source/replication.txt:130
# 0327a8e9b77743d3b5b8c40114263246
msgid "By default, clients read from the primary [#edge-cases-2-primaries]_; however, clients can specify a :doc:`read preference </core/read-preference>` to send read operations to secondaries. :ref:`Asynchronous replication <asynchronous-replication>` to secondaries means that reads from secondaries may return data that does not reflect the state of the data on the primary. For information on reading from replica sets, see :doc:`/core/read-preference`."
msgstr ""

#: ../source/includes/extracts/concurrent-operations-read-uncommitted.rst:1
# 21659562f35e41d1ac9c2db6a24e6167
msgid "In MongoDB, clients can see the results of writes before the writes are :term:`durable`:"
msgstr ""

#: ../source/includes/list-visibility-of-data.rst:1
# 110ac3ab1a864a379805d62c50f4ae6f
msgid "Regardless of :doc:`write concern </reference/write-concern>`, other clients using :readconcern:`\"local\"` (i.e. the default) readConcern can see the result of a write operation before the write operation is acknowledged to the issuing client."
msgstr ""

#: ../source/includes/list-visibility-of-data.rst:6
# 3abb9853e7db48e1918b52bff3dd2119
msgid "Clients using :readconcern:`\"local\"` (i.e. the default) readConcern can read data which may be subsequently :doc:`rolled back </core/replica-set-rollbacks>`."
msgstr ""

#: ../source/replication.txt:140
# b99e08dfa2174f559109fdf721a30042
msgid "For more information on read isolations, consistency and recency for MongoDB, see :doc:`/core/read-isolation-consistency-recency`."
msgstr ""

#: ../source/replication.txt:144
# d9d8f249139649fbb065a8960a27805b
msgid "Additional Features"
msgstr ""

#: ../source/replication.txt:146
# e410f42e918b4082854f2a0af3753c0a
msgid "Replica sets provide a number of options to support application needs. For example, you may deploy a replica set with :doc:`members in multiple data centers </core/replica-set-architecture-geographically-distributed>`, or control the outcome of elections by adjusting the :rsconf:`members[n].priority` of some members. Replica sets also support dedicated members for reporting, disaster recovery, or backup functions."
msgstr ""

#: ../source/replication.txt:155
# 3d361b15801f4f4ebfb8ec211a8e8e23
msgid "See :ref:`replica-set-secondary-only-members`, :ref:`replica-set-hidden-members` and :ref:`replica-set-delayed-members` for more information."
msgstr ""

#: ../source/includes/footnote-two-primaries-edge-cases.rst:1
# e0fa88b80c284b48b3eb95675a634693
msgid "In :ref:`some circumstances <edge-cases>`, two nodes in a replica set may *transiently* believe that they are the primary, but at most, one of them will be able to complete writes with :writeconcern:`{ w: \"majority\" } <\"majority\">` write concern. The node that can complete :writeconcern:`{ w: \"majority\" } <\"majority\">` writes is the current primary, and the other node is a former primary that has not yet recognized its demotion, typically due to a :term:`network partition`. When this occurs, clients that connect to the former primary may observe stale data despite having requested read preference :readmode:`primary`, and new writes to the former primary will eventually roll back."
msgstr ""

