# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2016
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-12-08 12:02-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/index-text.txt:5
# 6edf860863c54c24b063188efd64bdf4
msgid "Text Indexes"
msgstr ""

#: ../source/core/index-text.txt:0
# fb782b3e67b046f198b3e4339d73f632
msgid "On this page"
msgstr ""

#: ../source/core/index-text.txt:17
# 4cfd2040427740ffa768346bd71fdebd
msgid "Starting in MongoDB 3.2, MongoDB introduces a version 3 of the ``text`` index. Key features of the new version of the index are:"
msgstr ""

#: ../source/core/index-text.txt:20
# 2aea7861c34d45b0ad54323b780c3d90
msgid "Improved :ref:`case insensitivity <text-index-case-insensitivity>`"
msgstr ""

#: ../source/core/index-text.txt:22
# 9f3dd92a8fee4cae991e336f3f25e281
msgid ":ref:`Diacritic insensitivity <text-index-diacritic-insensitivity>`"
msgstr ""

#: ../source/core/index-text.txt:24
# 55fdd7dbb29d4e77a8256ea85c5d815c
msgid "Additional :ref:`delimiters for tokenization <text-index-tokenization-delimiters>`"
msgstr ""

#: ../source/core/index-text.txt:27
# c78696c86d214a659c71be895fe8fbaa
msgid "Starting in MongoDB 3.2, version 3 is the default version for new ``text`` indexes."
msgstr ""

#: ../source/core/index-text.txt:31
# 95c1651155904c2699e316b761178627
msgid "Overview"
msgstr ""

#: ../source/includes/fact-text-index.rst:1
# 2b5c53c3178d414d88c3d38bab7b8463
msgid "MongoDB provides :ref:`text indexes <index-feature-text>` to support text search queries on string content. ``text`` indexes can include any field whose value is a string or an array of string elements."
msgstr ""

#: ../source/core/index-text.txt:38
# b78f16bc392141cbbf59f4ff0b1eae38
msgid "Create Text Index"
msgstr ""

#: ../source/includes/fact-text-index-limit-one.rst:1
#: ../source/includes/fact-text-index-limit-one.rst:1
# a2fc491d632d437996111a86f8db8dad
# 03699bd338934447a251a013b41a9cc1
msgid "A collection can have at most **one** ``text`` index."
msgstr ""

#: ../source/core/index-text.txt:44
# 33982d516e614d24b0c69332f96c10ab
msgid "To create a ``text`` index, use the :method:`db.collection.createIndex()` method. To index a field that contains a string or an array of string elements, include the field and specify the string literal ``\"text\"`` in the index document, as in the following example:"
msgstr ""

#: ../source/core/index-text.txt:54
# cd91fb28e8c54ebb8e984badb813839c
msgid "You can index multiple fields for the ``text`` index. The following example creates a ``text`` index on the fields ``subject`` and ``comments``:"
msgstr ""

#: ../source/core/index-text.txt:67
# 62668b50ab85463a9735f1398190ad26
msgid "A :doc:`compound index </core/index-compound>` can include ``text`` index keys in combination with ascending/descending index keys. For more information, see :ref:`text-index-compound`."
msgstr ""

#: ../source/core/index-text.txt:71
# c3b1b887bc2041578c6573e30f9350ed
msgid "In order to drop a ``text`` index, use the index name. See :ref:`drop-text-index` for more information."
msgstr ""

#: ../source/core/index-text.txt:75
# 038757c02bdc4332a6720b76685e2252
msgid "Specify Weights"
msgstr ""

#: ../source/includes/fact-text-index-weight.rst:1
# 8cf635023a0c488692a40d2f281b29e6
msgid "For a ``text`` index, the *weight* of an indexed field denotes the significance of the field relative to the other indexed fields in terms of the text search score."
msgstr ""

#: ../source/includes/fact-text-index-weight.rst:5
# 06e5f553b98e431da35f1147c03508b0
msgid "For each indexed field in the document, MongoDB multiplies the number of matches by the weight and sums the results. Using this sum, MongoDB then calculates the score for the document. See :projection:`$meta` operator for details on returning and sorting by text scores."
msgstr ""

#: ../source/includes/fact-text-index-weight.rst:10
# 60377270040e4c1f84d8d6675074584f
msgid "The default weight is 1 for the indexed fields. To adjust the weights for the indexed fields, include the ``weights`` option in the :method:`db.collection.createIndex()` method."
msgstr ""

#: ../source/core/index-text.txt:79
# e28e57bcdf594af5a8115fb5ffe79d4b
msgid "For more information using weights to control the results of a text search, see :doc:`/tutorial/control-results-of-text-search`."
msgstr ""

#: ../source/core/index-text.txt:85
# e57f9c2f7b9e4a7eb6fce4f05c5cd9e8
msgid "Wildcard Text Indexes"
msgstr ""

#: ../source/core/index-text.txt:87
# 10c98ac754be43a997a2152db7d7fbfc
msgid "When creating a ``text`` index on multiple fields, you can also use the wildcard specifier (``$**``). With a wildcard text index, MongoDB indexes every field that contains string data for each document in the collection. The following example creates a text index using the wildcard specifier:"
msgstr ""

#: ../source/core/index-text.txt:97
# a496a8c5ccd846fcace2b6702cfb0301
msgid "This index allows for text search on all fields with string content. Such an index can be useful with highly unstructured data if it is unclear which fields to include in the text index or for ad-hoc querying."
msgstr ""

#: ../source/core/index-text.txt:102
# c0e2ad319ff64a7da0bda08acd1c3137
msgid "Wildcard text indexes are ``text`` indexes on multiple fields. As such, you can assign weights to specific fields during index creation to control the ranking of the results. For more information using weights to control the results of a text search, see :doc:`/tutorial/control-results-of-text-search`."
msgstr ""

#: ../source/core/index-text.txt:108
# 098e943353b847f8ad7c79ac3d8692a8
msgid "Wildcard text indexes, as with all text indexes, can be part of a compound indexes. For example, the following creates a compound index on the field ``a`` as well as the wildcard specifier:"
msgstr ""

#: ../source/core/index-text.txt:116
# 73a7207428054287b437eb064087e7ae
msgid "As with all :ref:`compound text indexes <text-index-compound>`, since the ``a`` precedes the text index key, in order to perform a :query:`$text` search with this index, the query predicate must include an equality match conditions ``a``. For information on compound text indexes, see :ref:`Compound Text Indexes <text-index-compound>`."
msgstr ""

#: ../source/core/index-text.txt:125
# 5c27622adf6c41f28c478579190b58d9
msgid "Case Insensitivity"
msgstr ""

#: ../source/core/index-text.txt:129
# cf923e2a4d754bc698e62003ed2367a0
msgid "The version 3 ``text`` index supports the common ``C``, simple ``S``, and for Turkish languages, the special ``T`` case foldings as specified in `Unicode 8.0 Character Database Case Folding <http://www.unicode.org/Public/8.0.0/ucd/CaseFolding.txt>`_."
msgstr ""

#: ../source/core/index-text.txt:136
# 40b782c9daf7416e943fe01b0784b649
msgid "The case foldings expands the case insensitivity of the ``text`` index to include characters with diacritics, such as ``é`` and ``É``, and characters from non-Latin alphabets, such as \"И\" and \"и\" in the Cyrillic alphabet."
msgstr ""

#: ../source/core/index-text.txt:148
# 59646d96e03649988eae80567ce3ea37
msgid "Version 3 of the ``text`` index is also :ref:`diacritic insensitive <text-index-diacritic-insensitivity>`. As such, the index also does not distinguish between ``é``, ``É``, ``e``, and ``E``."
msgstr ""

#: ../source/core/index-text.txt:152
# 6e9567ca35e74ddf8f2d0af1878dc103
msgid "Previous versions of the ``text`` index are case insensitive for ``[A-z]`` only; i.e. case insensitive for non-diacritics Latin characters only . For all other characters, earlier versions of the text index treat them as distinct."
msgstr ""

#: ../source/core/index-text.txt:160
# 71241df2890946059272e760d52a6bb9
msgid "Diacritic Insensitivity"
msgstr ""

#: ../source/core/index-text.txt:164
# 1ab0b97cf12a4e21a8971deeea01d362
msgid "With version 3, ``text`` index is diacritic insensitive. That is, the index does not distinguish between characters that contain diacritical marks and their non-marked counterpart, such as ``é``, ``ê``, and ``e``. More specifically, the ``text`` index strips the characters categorized as diacritics in `Unicode 8.0 Character Database Prop List <http://www.unicode.org/Public/8.0.0/ucd/PropList.txt>`_."
msgstr ""

#: ../source/core/index-text.txt:171
# 9a8ec43c516f45108d296efb1e3f4c8c
msgid "Version 3 of the ``text`` index is also :ref:`case insensitive <text-index-case-insensitivity>` to characters with diacritics. As such, the index also does not distinguish between ``é``, ``É``, ``e``, and ``E``."
msgstr ""

#: ../source/core/index-text.txt:176
# 36ae964404dc47979cb97301844cf025
msgid "Previous versions of the ``text`` index treat characters with diacritics as distinct."
msgstr ""

#: ../source/core/index-text.txt:182
# 0b3a2486b6a840388390cf5915c64c43
msgid "Tokenization Delimiters"
msgstr ""

#: ../source/core/index-text.txt:186
# 3fa60360fd58471fb4f55e52bf60fc52
msgid "For tokenization, version 3 ``text`` index uses the delimiters categorized under ``Dash``, ``Hyphen``, ``Pattern_Syntax``, ``Quotation_Mark``, ``Terminal_Punctuation``, and ``White_Space`` in `Unicode 8.0 Character Database Prop List <http://www.unicode.org/Public/8.0.0/ucd/PropList.txt>`_."
msgstr ""

#: ../source/core/index-text.txt:192
# d63e1eeeb92148b7a949005bc255b0be
msgid "For example, if given a string ``\"Il a dit qu'il «était le meilleur joueur du monde»\"``, the ``text`` index treats ``«``, ``»``, and spaces as delimiters."
msgstr ""

#: ../source/core/index-text.txt:196
# 732059b54c2642a0bc0ef0466aa71523
msgid "Previous versions of the index treat ``«`` as part of the term ``\"«était\"`` and ``»`` as part of the term ``\"monde»\"``."
msgstr ""

#: ../source/core/index-text.txt:200
# 5d706a89f2854108a8d112161db5d673
msgid "Index Entries"
msgstr ""

#: ../source/core/index-text.txt:202
# 3014131a7b5b4d0d87946a3690de2060
msgid "``text`` index tokenizes and stems the terms in the indexed fields for the index entries. ``text`` index stores one index entry for each unique stemmed term in each indexed field for each document in the collection. The index uses simple :ref:`language-specific <text-index-supported-languages>` suffix stemming."
msgstr ""

#: ../source/core/index-text.txt:211
# 4143a90b241e46f19c197290bb7fe1e2
msgid "Supported Languages and Stop Words"
msgstr ""

#: ../source/core/index-text.txt:213
# 212dd18f7b5b417189c0287461db383e
msgid "MongoDB supports text search for various languages. ``text`` indexes drop language-specific stop words (e.g. in English, ``the``, ``an``, ``a``, ``and``, etc.) and use simple language-specific suffix stemming. For a list of the supported languages, see :ref:`text-search-languages`."
msgstr ""

#: ../source/includes/fact-text-search-language-none.rst:3
# 4d892ba1f476478fba3158c339babcf3
msgid "If you specify a language value of ``\"none\"``, then the |text-obj| uses simple tokenization with no list of stop words and no stemming."
msgstr ""

#: ../source/core/index-text.txt:222
# 8161eeef0e1743fd802823aae44fa387
msgid "To specify a language for the ``text`` index, see :doc:`/tutorial/specify-language-for-text-index`."
msgstr ""

#: ../source/core/index-text.txt:226
# df7807f2daf3420c86473a3a2d6f601b
msgid "``sparse`` Property"
msgstr ""

#: ../source/core/index-text.txt:228
# 0db3adf2d97b4f28bb02266dc32ec9f4
msgid "``text`` indexes are :doc:`sparse </core/index-sparse>` by default and ignore the :doc:`sparse: true </core/index-sparse>` option. If a document lacks a ``text`` index field (or the field is ``null`` or an empty array), MongoDB does not add an entry for the document to the ``text`` index. For inserts, MongoDB inserts the document but does not add to the ``text`` index."
msgstr ""

#: ../source/core/index-text.txt:235
# f056fd557ee141e6b6ced317ea82bedd
msgid "For a compound index that includes a ``text`` index key along with keys of other types, only the ``text`` index field determines whether the index references a document. The other keys do not determine whether the index references the documents or not."
msgstr ""

#: ../source/core/index-text.txt:241
# 8d52ca84859840e3b43111622a127564
msgid "Restrictions"
msgstr ""

#: ../source/core/index-text.txt:244
# ef977ac6fcd5478a80d49ca388f8fb3a
msgid "One Text Index Per Collection"
msgstr ""

#: ../source/core/index-text.txt:249
# 5a212198ef1e4cd7970bcde21169b118
msgid "Text Search and Hints"
msgstr ""

#: ../source/includes/fact-hint-text-query-restriction.rst:3
# 3772d8fb24e5400ea9ab126d1158591b
msgid "You cannot use :method:`~cursor.hint()` if the query includes a :query:`$text` query expression."
msgstr ""

#: ../source/core/index-text.txt:256
# 88da30ad626147368de46cca306bbd8e
msgid "Text Index and Sort"
msgstr ""

#: ../source/core/index-text.txt:258
# 7afad0da2d044f169b73636c3ba1c79b
msgid "Sort operations cannot obtain sort order from a ``text`` index, even from a :ref:`compound text index <text-index-compound>`; i.e. sort operations cannot use the ordering in the text index."
msgstr ""

#: ../source/core/index-text.txt:265
# 94822fa91e2f489e8150bbc54588ddb9
msgid "Compound Index"
msgstr ""

#: ../source/core/index-text.txt:267
# dc3e6ddfa60b4c1ca8a2d36f67e5b8ba
msgid "A :doc:`compound index </core/index-compound>` can include a ``text`` index key in combination with ascending/descending index keys. However, these compound indexes have the following restrictions:"
msgstr ""

#: ../source/includes/fact-compound-index-with-text-restrictions.rst:1
# 631938468c3a49579563329fa4c69c62
msgid "A compound ``text`` index cannot include any other special index types, such as :ref:`multi-key <index-type-multi-key>` or :ref:`geospatial <index-feature-geospatial>` index fields."
msgstr ""

#: ../source/includes/fact-compound-index-with-text-restrictions.rst:5
# f2c9660513e8450f8c7d831754cb2352
msgid "If the compound ``text`` index includes keys **preceding** the ``text`` index key, to perform a :query:`$text` search, the query predicate must include **equality match conditions** on the preceding keys."
msgstr ""

#: ../source/core/index-text.txt:273
# c8120d96e09e40868030f77c3e68ffac
msgid "See also :ref:`text-index-and-sort` for additional limitations."
msgstr ""

#: ../source/core/index-text.txt:275
# 67a468b34c4443ab856dd1488040267f
msgid "For an example of a compound text index, see :doc:`/tutorial/limit-number-of-items-scanned-for-text-search`."
msgstr ""

#: ../source/core/index-text.txt:281
# 8212120e994548a3ad760128943fdf9c
msgid "Drop a Text Index"
msgstr ""

#: ../source/core/index-text.txt:283
# cd0e8b944afd4d5aa8f6b12dab28d0ec
msgid "To drop a ``text`` index, pass the *name* of the index to the :method:`db.collection.dropIndex()` method. To get the name of the index, run the :method:`db.collection.getIndexes()` method."
msgstr ""

#: ../source/core/index-text.txt:287
# b0b4e71cbc0b4d9cae85a78a72da43c8
msgid "For information on the default naming scheme for ``text`` indexes as well as overriding the default name, see :doc:`/tutorial/avoid-text-index-name-limit`."
msgstr ""

#: ../source/core/index-text.txt:292
# f960dfbc48c640139b415dd8d11b320d
msgid "Storage Requirements and Performance Costs"
msgstr ""

#: ../source/core/index-text.txt:294
# cc797ea6ade54317ba7530ea0cc34e14
msgid "``text`` indexes have the following storage requirements and performance costs:"
msgstr ""

#: ../source/core/index-text.txt:297
# 1c93d3c4e10b4f5e90dbce2892fa391f
msgid "``text`` indexes can be large. They contain one index entry for each unique post-stemmed word in each indexed field for each document inserted."
msgstr ""

#: ../source/core/index-text.txt:301
# 24a6309c24f14b40a97810a9e811f4f6
msgid "Building a ``text`` index is very similar to building a large multi-key index and will take longer than building a simple ordered (scalar) index on the same data."
msgstr ""

#: ../source/core/index-text.txt:305
# f2ca4a3c11fa48e693a9480f9275a24f
msgid "When building a large ``text`` index on an existing collection, ensure that you have a sufficiently high limit on open file descriptors. See the :doc:`recommended settings </reference/ulimit>`."
msgstr ""

#: ../source/core/index-text.txt:309
# 134db32d6a6042519108e5273e5935c0
msgid "``text`` indexes will impact insertion throughput because MongoDB must add an index entry for each unique post-stemmed word in each indexed field of each new source document."
msgstr ""

#: ../source/core/index-text.txt:313
# 103f886b8e334a2baa325bc4246022d6
msgid "Additionally, ``text`` indexes do not store phrases or information about the proximity of words in the documents. As a result, phrase queries will run much more effectively when the entire collection fits in RAM."
msgstr ""

#: ../source/core/index-text.txt:319
# 6fcbcf61d28540a99f89af62befe0d0b
msgid "Text Search Support"
msgstr ""

#: ../source/core/index-text.txt:321
# 83a785f6b5e8484b9231f4a90991296c
msgid "The ``text`` index supports :query:`$text` query operations. For examples of text search, see the :query:`$text reference page <$text>`. For examples of :query:`$text` operations in aggregation pipelines, see :doc:`/tutorial/text-search-in-aggregation`."
msgstr ""

