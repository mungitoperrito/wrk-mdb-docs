# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2016
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-12-08 12:02-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/2d.txt:3
# 45c05338ca404160a6d423140b105b52
msgid "``2d`` Indexes"
msgstr ""

#: ../source/core/2d.txt:0
# 46ffe45435a14f10aa842c13f4c42558
msgid "On this page"
msgstr ""

#: ../source/core/2d.txt:13
# bafa8e4330144e3d954634d702567ee1
msgid "Use a ``2d`` index for data stored as points on a two-dimensional plane. The ``2d`` index is intended for legacy coordinate pairs used in MongoDB 2.2 and earlier."
msgstr ""

#: ../source/core/2d.txt:17
# 8f6431e1b9aa49fca647fa94a42c08f7
msgid "Use a ``2d`` index if:"
msgstr ""

#: ../source/core/2d.txt:19
# 533f9cfa29b146b38fd6c6516d4e169b
msgid "your database has legacy location data from MongoDB 2.2 or earlier, *and*"
msgstr ""

#: ../source/core/2d.txt:21
# 5bb5e3fb55d5492f950925efcd18d492
msgid "you do not intend to store any location data as :term:`GeoJSON` objects."
msgstr ""

#: ../source/core/2d.txt:23
# cfd816e91b6947f88d456990b0390a4e
msgid "See the :doc:`/reference/operator/query-geospatial` for the query operators that support geospatial queries."
msgstr ""

#: ../source/core/2d.txt:27
# 84030a8a825a4bf089f0e03776124670
msgid "Considerations"
msgstr ""

#: ../source/includes/fact-limitation-one-geo-index-per-collection.rst:1
# 1cb0dc631e8e40ba94a2f872b84065a5
msgid "The :dbcommand:`geoNear` command and the :pipeline:`$geoNear` pipeline stage require that a collection have *at most* only one |first-geo-index| and/or only one |second-geo-index| whereas :ref:`geospatial query operators <geospatial-query-selectors>` (e.g. :query:`$near` and :query:`$geoWithin`) permit collections to have multiple geospatial indexes."
msgstr ""

#: ../source/includes/fact-limitation-one-geo-index-per-collection.rst:8
# 2f6842909d42493598a5233f550d4c9b
msgid "The geospatial index restriction for the :dbcommand:`geoNear` command and the :pipeline:`$geoNear` pipeline stage exists because neither the :dbcommand:`geoNear` command nor the :pipeline:`$geoNear` pipeline stage syntax includes the location field. As such, index selection among multiple ``2d`` indexes or ``2dsphere`` indexes is ambiguous."
msgstr ""

#: ../source/includes/fact-limitation-one-geo-index-per-collection.rst:14
# bae5d620a8204aa680c805a3d0b8713f
msgid "No such restriction applies for :ref:`geospatial query operators <geospatial-query-selectors>` since these operators take a location field, eliminating the ambiguity."
msgstr ""

#: ../source/core/2d.txt:33
# 2c35c3d4e34a46a0afa9137a823fbec7
msgid "Do not use a ``2d`` index if your location data includes GeoJSON objects. To index on both legacy coordinate pairs *and* GeoJSON objects, use a :doc:`2dsphere </core/2dsphere>` index."
msgstr ""

#: ../source/core/2d.txt:37
# c47ed4d22f844de886ce05c2e4e7f9e5
msgid "You cannot use a ``2d`` index as a shard key when sharding a collection. However, you can create and maintain a geospatial index on a sharded collection by using a different field as the shard key."
msgstr ""

#: ../source/core/2d.txt:42
# 13967827da114b6a9ce5841d02054dcc
msgid "Behavior"
msgstr ""

#: ../source/core/2d.txt:44
# 14171c9093fa490eb0cf6123462916d2
msgid "The ``2d`` index supports calculations on a flat, Euclidean plane. The ``2d`` index also supports *distance-only* calculations on a sphere, but for *geometric* calculations (e.g. :query:`$geoWithin`) on a sphere, store data as GeoJSON objects and use the ``2dsphere`` index type."
msgstr ""

#: ../source/core/2d.txt:50
# 47f4d21ba0a242d4840babce68305bea
msgid "A ``2d`` index can reference two fields. The first must be the location field. A ``2d`` compound index constructs queries that select first on the location field, and then filters those results by the additional criteria. A compound ``2d`` index can cover queries."
msgstr ""

#: ../source/core/2d.txt:58
# 3f931751c73641ddbf3fac56e25fe2bd
msgid "Points on a 2D Plane"
msgstr ""

#: ../source/core/2d.txt:68
# 04325f068c244f7ba2cede7ee57bcb29
msgid "To store location data as legacy coordinate pairs, use an array or an embedded document. When possible, use the array format:"
msgstr ""

#: ../source/core/2d.txt:75
# 22eb8de2678a447ebb79bbeae6d253c2
msgid "Consider the embedded document form:"
msgstr ""

#: ../source/core/2d.txt:81
# 44adeedd3334418495db2afc50701f4d
msgid "Arrays are preferred as certain languages do not guarantee associative map ordering."
msgstr ""

#: ../source/core/2d.txt:84
# 6f929cee68a146618389862c71c7c966
msgid "For all points, if you use longitude and latitude, store coordinates in **longitude, latitude** order."
msgstr ""

#: ../source/core/2d.txt:88
# 343595d901e340c29b237c5fe76a84b2
msgid "``sparse`` Property"
msgstr ""

#: ../source/core/2d.txt:90
# 4bf6fdb49add4f28b109ab58f8722c65
msgid "``2d`` indexes are :doc:`sparse </core/index-sparse>` by default and ignores the :doc:`sparse: true </core/index-sparse>` option. If a document lacks a ``2d`` index field (or the field is ``null`` or an empty array), MongoDB does not add an entry for the document to the ``2d`` index. For inserts, MongoDB inserts the document but does not add to the ``2d`` index."
msgstr ""

#: ../source/core/2d.txt:97
# 089fda4d9f2043ee9a2877f4c3a0442e
msgid "For a compound index that includes a ``2d`` index key along with keys of other types, only the ``2d`` index field determines whether the index references a document."
msgstr ""

