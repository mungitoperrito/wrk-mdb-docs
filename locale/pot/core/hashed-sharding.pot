# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2016
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-12-08 12:02-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/hashed-sharding.txt:6
# e083c492f1cb414981c454deba7dc3cd
msgid "Hashed Sharding"
msgstr ""

#: ../source/core/hashed-sharding.txt:12
# e9be698068444cb096691254e9553e8c
msgid "Hashed sharding uses a :ref:`hashed index <index-hashed-index>` of a single field as the :term:`shard key` to partition data across your sharded cluster."
msgstr ""

#: ../source/core/hashed-sharding.txt:18
# 2d1467db95584c359168edcd0452d568
msgid "Hashed sharding provides more even data distribution across the sharded cluster at the cost of reducing :ref:`sharding-query-isolation`. Post-hash, documents with \"close\" shard key values are unlikely to be on the same chunk or shard - the :program:`mongos` is more likely to perform :ref:`sharding-mongos-broadcast` to fulfill a given ranged query. :program:`mongos` can target queries with equality matches to a single shard."
msgstr ""

#: ../source/core/hashed-sharding.txt:25
# 61b6c114d4e74479b56c885c94440873
msgid "If you shard an empty collection using a hashed shard key, MongoDB automatically creates two empty chunks per shard, to cover the entire range of the hashed shard key value across the cluster. You can control how many chunks MongoDB creates with the ``numInitialChunks`` parameter to :dbcommand:`shardCollection` or by manually creating chunks on the empty collection using the :dbcommand:`split` command."
msgstr ""

#: ../source/includes/tip-applications-do-not-need-to-compute-hashes.rst:0
# 0d767818fcd24ef18e0c767f29f6e585
msgid "Tip"
msgstr ""

#: ../source/includes/tip-applications-do-not-need-to-compute-hashes.rst:3
# e6a4e85e31e047aa8ce58b771bc22e7b
msgid "MongoDB automatically computes the hashes when resolving queries using hashed indexes.  Applications do **not** need to compute hashes."
msgstr ""

#: ../source/core/hashed-sharding.txt:37
# 8ace8798c3fa4f96b631bce171a7a418
msgid "Hashed Sharding Shard Key"
msgstr ""

#: ../source/core/hashed-sharding.txt:39
# 037253ba86c3460e9f2a835ea9c384b7
msgid "The field you choose as your hashed shard key should have a good :ref:`cardinality<shard-key-range>`, or large number of different values. Hashed keys are ideal for shard keys with fields that change :ref:`monotonically<shard-key-monotonic>` like :term:`ObjectId` values or timestamps. A good example of this is the default ``_id`` field, assuming it only contains :term:`ObjectID` values."
msgstr ""

#: ../source/core/hashed-sharding.txt:46
# b0a9834adcb4498fb754c3e382ee107f
msgid "To shard a collection using a hashed shard key, see :doc:`/tutorial/deploy-sharded-cluster-hashed-sharding`."
msgstr ""

#: ../source/core/hashed-sharding.txt:50
# 37180fe486ba4c06b44517be85539752
msgid "Hashed vs Ranged Sharding"
msgstr ""

#: ../source/core/hashed-sharding.txt:52
# 0eb7e2b0e28b4c6ead9609be3cb3aafd
msgid "Given a collection using a monotonically increasing value ``X`` as the shard key, using ranged sharding results in a distribution of incoming inserts similar to the following:"
msgstr ""

#: ../source/core/hashed-sharding.txt:58
# 815a419fd3504c49a1b37dfad26a929f
msgid "Since the value of ``X`` is always increasing, the chunk with an upper bound of :bsontype:`maxKey<data_maxkey>` receives the majority incoming writes. This restricts insert operations to the single shard containing this chunk, which reduces or removes the advantage of distributed writes in a sharded cluster."
msgstr ""

#: ../source/core/hashed-sharding.txt:63
# 49ea2f09e333491190becf786c3bd470
msgid "By using a hashed index on ``X``, the distribution of inserts is similar to the following:"
msgstr ""

#: ../source/core/hashed-sharding.txt:68
# 2d60437b80eb404d9d0e15a500cae66b
msgid "Since the data is now distributed more evenly, inserts are efficiently distributed throughout the cluster."
msgstr ""

#: ../source/core/hashed-sharding.txt:72
# 947e0d6272644f52aea5b3d79be3a256
msgid "Shard the Collection"
msgstr ""

#: ../source/core/hashed-sharding.txt:74
# 205bb40ac8c94dc0bfeedd8b1261543f
msgid "Use the :method:`sh.shardCollection()` method, specifying the full namespace of the collection and the target :doc:`hashed index</core/index-hashed>` to use as the :term:`shard key`."
msgstr ""

#: ../source/core/hashed-sharding.txt:84
# eb676b8938d0453e83184ab58534028a
msgid "Specify the Initial Number of Chunks"
msgstr ""

#: ../source/core/hashed-sharding.txt:86
# 3a40f6c800f94c3d9030148ebb39664c
msgid "If you shard an empty collection using a hashed shard key, MongoDB automatically creates and migrates empty chunks so that each shard has two chunks. To control how many chunks MongoDB creates when sharding the collection, use :dbcommand:`shardCollection` with the ``numInitialChunks`` parameter."
msgstr ""

#: ../source/includes/warning-hashed-index-floating-point.rst:3
# 3998cff4968247a19ad97f9c57d68108
msgid "MongoDB ``hashed`` indexes truncate floating point numbers to 64-bit integers before hashing. For example, a ``hashed`` index would store the same value for a field that held a value of ``2.3``, ``2.2``, and ``2.9``. To prevent collisions, do not use a ``hashed`` index for floating point numbers that cannot be reliably converted to 64-bit integers (and then back to floating point). MongoDB ``hashed`` indexes do not support floating point values larger than 2\\ :sup:`53`."
msgstr ""

