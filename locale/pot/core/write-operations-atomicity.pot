# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2016
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-12-08 12:02-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/write-operations-atomicity.txt:3
# 737861ced5e2494393c358044c016bcf
msgid "Atomicity and Transactions"
msgstr ""

#: ../source/core/write-operations-atomicity.txt:0
# a1b6d63e8a96467795927083137bb12a
msgid "On this page"
msgstr ""

#: ../source/core/write-operations-atomicity.txt:13
# 70c25e4c8ae642b29bab17ce9dd1ac9b
msgid "In MongoDB, a write operation is atomic on the level of a single document, even if the operation modifies multiple embedded documents *within* a single document."
msgstr ""

#: ../source/includes/extracts/concurrent-operations-multi-document-writes.rst:1
# 0a3f3d7582fa424e883b4d1dc17d2d90
msgid "When a single write operation modifies multiple documents, the modification of each document is atomic, but the operation as a whole is not atomic and other operations may interleave. However, you can *isolate* a single write operation that affects multiple documents using the :update:`$isolated` operator."
msgstr ""

#: ../source/core/write-operations-atomicity.txt:22
# ae7e26505f9d4438b14c370702e458f3
msgid "``$isolated`` Operator"
msgstr ""

#: ../source/includes/extracts/concurrent-operations-isolate-operator.rst:1
# 81befb987efa426db9b815a02d7d144c
msgid "Using the :update:`$isolated` operator, a write operation that affects multiple documents can prevent other processes from interleaving once the write operation modifies the first document. This ensures that no client sees the changes until the write operation completes or errors out."
msgstr ""

#: ../source/includes/extracts/concurrent-operations-isolate-operator.rst:7
# 2925d4ddd40444459e980045fd68d8c9
msgid ":update:`$isolated` does **not** work with :term:`sharded clusters <sharded cluster>`."
msgstr ""

#: ../source/includes/extracts/concurrent-operations-isolate-operator.rst:10
# 812751ec1c6d406bbdf47831b1c45376
msgid "An isolated write operation does not provide \"all-or-nothing\" atomicity. That is, an error during the write operation does not roll back all its changes that preceded the error."
msgstr ""

#: ../source/includes/extracts/concurrent-operations-isolate-operator.rst:16
# 54dfd694fca241658df263793250b0ce
msgid ":update:`$isolated` operator causes write operations to acquire an exclusive lock on the collection, *even for document-level locking storage engines* such as WiredTiger. That is, :update:`$isolated` operator will make WiredTiger single-threaded for the duration of the operation."
msgstr ""

#: ../source/core/write-operations-atomicity.txt:26
# b6fdbc2311c24b1b9d01dba046a59f9f
msgid "The :update:`$isolated` operator does **not** work on sharded clusters."
msgstr ""

#: ../source/core/write-operations-atomicity.txt:28
# 8c92ad0552494048947c4447f464d142
msgid "For an example of an update operation that uses the :update:`$isolated` operator, see :update:`$isolated`. For an example of a remove operation that uses the :update:`$isolated` operator, see :ref:`isolate-remove-operations`."
msgstr ""

#: ../source/core/write-operations-atomicity.txt:34
# 6ca8900b49ae4a569d5681639982803e
msgid "Transaction-Like Semantics"
msgstr ""

#: ../source/core/write-operations-atomicity.txt:36
# 6b69c96af6844d70a3b4f2be84ca58b1
msgid "Since a single document can contain multiple embedded documents, single-document atomicity is sufficient for many practical use cases. For cases where a sequence of write operations must operate as if in a single transaction, you can implement a :doc:`two-phase commit </tutorial/perform-two-phase-commits>` in your application."
msgstr ""

#: ../source/core/write-operations-atomicity.txt:42
# 575a6f71db52417c93c175756fd0517a
msgid "However, two-phase commits can only offer transaction-*like* semantics. Using two-phase commit ensures data consistency, but it is possible for applications to return intermediate data during the two-phase commit or rollback."
msgstr ""

#: ../source/core/write-operations-atomicity.txt:47
# 70a05a87b54a4c67b5b2a29741820bd3
msgid "For more information on two-phase commit and rollback, see :doc:`/tutorial/perform-two-phase-commits`."
msgstr ""

#: ../source/core/write-operations-atomicity.txt:53
# ca7562e0d79d4855863429e96f48eb4a
msgid "Concurrency Control"
msgstr ""

#: ../source/core/write-operations-atomicity.txt:55
# 0632e6e0509d48d3958707ec6c5ccefb
msgid "Concurrency control allows multiple applications to run concurrently without causing data inconsistency or conflicts."
msgstr ""

#: ../source/core/write-operations-atomicity.txt:58
# bdf2d829691249e982b0652ffa0f267a
msgid "One approach is to create a :ref:`unique index <index-type-unique>` on a field that can only have unique values. This prevents insertions or updates from creating duplicate data. Create a unique index on multiple fields to force uniqueness on that combination of field values. For examples of use cases, see :ref:`update() and Unique Index <update-with-unique-indexes>` and :ref:`findAndModify() and Unique Index <upsert-and-unique-index>`."
msgstr ""

#: ../source/core/write-operations-atomicity.txt:66
# 3bf89bbbd265473c90d96f8b1dff23af
msgid "Another approach is to specify the expected current value of a field in the query predicate for the write operations. The two-phase commit pattern provides a variation where the query predicate includes the :ref:`application identifier <2-phase-commits-concurrency>` as well as the expected state of the data in the write operation."
msgstr ""

#: ../source/core/write-operations-atomicity.txt:72
# ec82eef8126d4d54afa270eec99aa5f2
msgid ":doc:`/core/read-isolation-consistency-recency`"
msgstr ""

