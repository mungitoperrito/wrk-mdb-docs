# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2016
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-12-08 12:02-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/core/replica-set-sync.txt:5
# b7ae70efb9804e4fa02a1548ddefdc7d
msgid "Replica Set Data Synchronization"
msgstr ""

#: ../source/core/replica-set-sync.txt:0
# ab9980bbea8b44998979c5097fa6639b
msgid "On this page"
msgstr ""

#: ../source/core/replica-set-sync.txt:15
# ef7c26c4eb2f41ccbcbaad0cb7f64523
msgid "In order to maintain up-to-date copies of the shared data set, secondary members of a replica set :term:`sync` or replicate data from other members. MongoDB uses two forms of data synchronization: :ref:`initial sync <replica-set-initial-sync>` to populate new members with the full data set, and replication to apply ongoing changes to the entire data set."
msgstr ""

#: ../source/core/replica-set-sync.txt:25
# 33043e0592b74ea787cff387e12a9258
msgid "Initial Sync"
msgstr ""

#: ../source/core/replica-set-sync.txt:27
# bdcf5f03d492498d9d8d401f7c52d3c4
msgid "Initial sync copies all the data from one member of the replica set to another member."
msgstr ""

#: ../source/core/replica-set-sync.txt:31
# d407148e4466402ca422598a4d94dab7
msgid "Process"
msgstr ""

#: ../source/core/replica-set-sync.txt:33
# 368d6a1f549141adac067d4aad6c1786
msgid "When you perform an initial sync, MongoDB:"
msgstr ""

#: ../source/core/replica-set-sync.txt:35
# 69f5c97540ac4e22bd291621f49abd5b
msgid "Clones all databases except the :ref:`local <replica-set-local-database>` database. To clone, the :program:`mongod` scans every collection in each source database and inserts all data into its own copies of these collections."
msgstr ""

#: ../source/core/replica-set-sync.txt:40
# 462ef19635bf401c8d4b6120342a1f7d
msgid "Initial sync builds all collection indexes as the documents are copied for each collection. In earlier versions of MongoDB, only the ``_id`` indexes are built during this stage."
msgstr ""

#: ../source/core/replica-set-sync.txt:45
# d2bc82fc6a5f459b9ce548df657feac0
msgid "Initial sync pulls newly added oplog records during the data copy. Ensure that the target member has enough disk space in the ``local`` database to temporarily store these oplog records for the duration of this data copy stage."
msgstr ""

#: ../source/core/replica-set-sync.txt:51
# b00e1aac3b8949fd91dab96c42c1598a
msgid "Applies all changes to the data set. Using the oplog from the source, the :program:`mongod` updates its data set to reflect the current state of the replica set."
msgstr ""

#: ../source/core/replica-set-sync.txt:55
# 3d8c3583b65d4ee192b0b5666fe03a37
msgid "When the initial sync finishes, the member transitions from :replstate:`STARTUP2` to :replstate:`SECONDARY`."
msgstr ""

#: ../source/core/replica-set-sync.txt:58
# bcfc682fb33142f3a4f17635c5ec6091
msgid "To perform an initial sync, see :doc:`/tutorial/resync-replica-set-member`."
msgstr ""

#: ../source/core/replica-set-sync.txt:64
# a4923fffa8b7476f8613f8f718ef2b86
msgid "Fault Tolerance"
msgstr ""

#: ../source/core/replica-set-sync.txt:66
# 88705ac217d540ee803b2f327e2f6ca4
msgid "To recover from transient network or operation failures, initial sync has built-in retry logic."
msgstr ""

#: ../source/core/replica-set-sync.txt:71
# d8747aca969e4ffd903f4e65fe2792bd
msgid "MongoDB 3.4 improves the retry logic to be more resilient to intermittent failures on the network."
msgstr ""

#: ../source/core/replica-set-sync.txt:77
# 21c73940c05147bc93b19183a2d4e40f
msgid "Replication"
msgstr ""

#: ../source/core/replica-set-sync.txt:79
# 7d62dde4ec07452c803c3eb36d570433
msgid "Secondary members replicate data continuously after the initial sync. Secondary members copy the :doc:`oplog </core/replica-set-oplog>` from their *sync from* source and apply these operations in an asynchronous process."
msgstr ""

#: ../source/core/replica-set-sync.txt:84
# 77cb655d40994fbaa4817ecad70c1013
msgid "Secondaries may automatically change their *sync from* source as needed based on changes in the ping time and state of other members' replication."
msgstr ""

#: ../source/includes/fact-voting-node-sync-incompatibility.rst:1
# 2f36787a6424444592fb359ce28839e3
msgid "MongoDB 3.2 replica set members with :rsconf:`1 vote <members[n].votes>` cannot sync from members with  :rsconf:`0 votes <members[n].votes>`."
msgstr ""

#: ../source/core/replica-set-sync.txt:92
# 8ac6ebdba95c4054a52980dc90ccc704
msgid "Secondaries avoid syncing from :ref:`delayed members <replica-set-delayed-members>` and :ref:`hidden members <replica-set-hidden-members>`."
msgstr ""

#: ../source/core/replica-set-sync.txt:96
# 1981807ac9a6465c841cb5dfaaf336f2
msgid "If a secondary member has :rsconf:`members[n].buildIndexes` set to ``true``, it can only sync from other members where :rsconf:`~members[n].buildIndexes` is ``true``. Members where :rsconf:`~members[n].buildIndexes` is ``false`` can sync from any other member, barring other sync restrictions. :rsconf:`~members[n].buildIndexes` is ``true`` by default."
msgstr ""

#: ../source/core/replica-set-sync.txt:105
# 05446ed92cda413b8ac6a17084dc0a11
msgid "Multithreaded Replication"
msgstr ""

#: ../source/core/replica-set-sync.txt:107
# febda9600d7e434abc37c2bc3f6d38f2
msgid "MongoDB applies write operations in batches using multiple threads to improve concurrency. MongoDB groups batches by namespace (:ref:`MMAPv1 <storage-mmapv1>`) or by document id (:ref:`WiredTiger <storage-wiredtiger>`) and simultaneously applies each group of operations using a different thread. MongoDB always applies write operations to a given document in their original write order."
msgstr ""

#: ../source/core/replica-set-sync.txt:114
# 93e1bbeb0c64459d8bb183da8e717033
msgid "While applying a batch, MongoDB blocks all read operations. As a result, secondary read queries can never return data that reflect a state that never existed on the primary."
msgstr ""

#: ../source/core/replica-set-sync.txt:119
# d20bb54447dc47bf85461102ddd80c7d
msgid "Pre-Fetching Indexes to Improve Replication Throughput"
msgstr ""

#: ../source/core/replica-set-sync.txt:122
# 9b5dc6fe39964724833d75190231c341
msgid "Applies to MMAPv1 only."
msgstr ""

#: ../source/core/replica-set-sync.txt:124
# 854b5dca6d894f7d93c4ee40780afe82
msgid "With the :ref:`MMAPv1 <storage-mmapv1>` storage engine, MongoDB fetches memory pages that hold affected data and indexes to help improve the performance of applying oplog entries. This *pre-fetch* stage minimizes the amount of time MongoDB holds write locks while applying oplog entries. By default, secondaries will pre-fetch all :ref:`indexes`."
msgstr ""

#: ../source/core/replica-set-sync.txt:130
# af57fab470b94054a5d9c0be016ff4be
msgid "Optionally, you can disable all pre-fetching or only pre-fetch the index on the ``_id`` field. See the :setting:`~replication.secondaryIndexPrefetch` setting for more information."
msgstr ""

