# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2016
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-12-08 12:02-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/faq/concurrency.txt:3
# 4d5fe5a8937b41a39d061175ebd91dd9
msgid "FAQ: Concurrency"
msgstr ""

#: ../source/faq/concurrency.txt:0
# 8d007f83efc244d183d20d5e331631bd
msgid "On this page"
msgstr ""

#: ../source/faq/concurrency.txt:15
# 4419f19e4fb448ae9dfd9f464344b13c
msgid "MongoDB allows multiple clients to read and write the same data. In order to ensure consistency, it uses locking and other :term:`concurrency control` measures to prevent multiple clients from modifying the same piece of data simultaneously. Together, these mechanisms guarantee that all writes to a single document occur either in full or not at all and that clients never see an inconsistent view of the data."
msgstr ""

#: ../source/faq/concurrency.txt:27
# dd4f3bc3ed2e4238b583836f59c77cff
msgid "What type of locking does MongoDB use?"
msgstr ""

#: ../source/includes/extracts/lock-general.rst:1
# dc19b00e50204fe9b3afa70b54d9619a
msgid "MongoDB uses multi-granularity locking [#mgl-ref]_ that allows operations to lock at the global, database or collection level, and allows for individual storage engines to implement their own concurrency control below the collection level (e.g., at the document-level in WiredTiger)."
msgstr ""

#: ../source/includes/extracts/lock-general.rst:7
# 791d6a6431e548f88577abf60d496b15
msgid "MongoDB uses reader-writer locks that allow concurrent readers shared access to a resource, such as a database or collection, but in MMAPv1, give exclusive access to a single write operation."
msgstr ""

#: ../source/faq/concurrency.txt:31
# cd6a711c6e4b4a24aaafa90af023b49b
msgid "In addition to a shared (S) locking mode for reads and an exclusive (X) locking mode for write operations, intent shared (IS) and intent exclusive (IX) modes indicate an intent to read or write a resource using a finer granularity lock.  When locking at a certain granularity all higher levels are locked using an :term:`intent lock`."
msgstr ""

#: ../source/faq/concurrency.txt:37
# 1d151f03200c4a2f84e870249dc3f8fe
msgid "For example, when locking a collection for writing (using mode X), both the corresponding database lock and the global lock must be locked in intent exclusive (IX) mode. A single database can simultaneously be locked in IS and IX mode, but an exclusive (X) lock cannot coexist with any other modes, and a shared (S) lock can only coexists with intent shared (IS) locks."
msgstr ""

#: ../source/faq/concurrency.txt:46
# 810cbd1ac67049d4b93ec6928f529cf4
msgid "Locks are fair, with reads and writes being queued in order. However, to optimize throughput, when one request is granted, all other compatible requests will be granted at the same time, potentially releasing them before a conflicting request.  For example, consider a case in which an X lock was just released, and in which the conflict queue contains the following items:"
msgstr ""

#: ../source/faq/concurrency.txt:53
# f69eaad76292424db5aa2f3227fbd3a0
msgid "IS |rarr| IS |rarr| X |rarr| X |rarr| S |rarr| IS"
msgstr ""

#: ../source/faq/concurrency.txt:55
# 72d55d237c194d4e81e2a62cedec4645
msgid "In strict first-in, first-out (FIFO) ordering, only the first two IS modes would be granted. Instead MongoDB will actually grant all IS and S modes, and once they all drain, it will grant X, even if new IS or S requests have been queued in the meantime. As a grant will always move all other requests ahead in the queue, no starvation of any request is possible."
msgstr ""

#: ../source/faq/concurrency.txt:62
# 95f3cb3fa86e44c595420d4586cd558f
msgid "See the Wikipedia page on `Multiple granularity locking <http://en.wikipedia.org/wiki/Multiple_granularity_locking>`_ for more information."
msgstr ""

#: ../source/faq/concurrency.txt:68
# a9f2204f612b4ceaa11c7598f8063ed4
msgid "How granular are locks in MongoDB?"
msgstr ""

#: ../source/faq/concurrency.txt:73
# 67cd90b5989340f88a8e127192081739
msgid "For WiredTiger"
msgstr ""

#: ../source/faq/concurrency.txt:75
# 609c89df800e4d3bb3f9a33e06bb27a4
msgid "Beginning with version 3.0, MongoDB ships with the :ref:`WiredTiger <storage-wiredtiger>` storage engine."
msgstr ""

#: ../source/includes/fact-wiredtiger-locks.rst:1
# 3c39c6f56e174f30a6cc42693f0bf7d1
msgid "For most read and write operations, WiredTiger uses optimistic concurrency control. WiredTiger uses only intent locks at the global, database and collection levels. When the storage engine detects conflicts between two operations, one will incur a write conflict causing MongoDB to transparently retry that operation."
msgstr ""

#: ../source/includes/fact-wiredtiger-locks.rst:7
# 0ee7a27116224368bea174f4ce3a0d56
msgid "Some global operations, typically short lived operations involving multiple databases, still require a global \"instance-wide\" lock. Some other operations, such as dropping a collection, still require an exclusive database lock."
msgstr ""

#: ../source/faq/concurrency.txt:81
# ab76705adbc2421ea8fe4b6887197bd0
msgid "For MMAPv1"
msgstr ""

#: ../source/faq/concurrency.txt:83
# d23c5081feb14b0a83e3aa463c64d14b
msgid "The MMAPv1 storage engine uses collection-level locking as of the 3.0 release series, an improvement on earlier versions in which the database lock was the finest-grain lock. Third-party storage engines may either use collection-level locking or implement their own finer-grained concurrency control."
msgstr ""

#: ../source/faq/concurrency.txt:89
# a80e3a68bc444f3fb95bcda26b684987
msgid "For example, if you have six collections in a database using the MMAPv1 storage engine and an operation takes a collection-level write lock, the other five collections are still available for read and write operations. An exclusive database lock makes all six collections unavailable for the duration of the operation holding the lock."
msgstr ""

#: ../source/faq/concurrency.txt:96
# 6e2da8a1a6bc4eaba960949ba5307ee4
msgid "How do I see the status of locks on my :program:`mongod` instances?"
msgstr ""

#: ../source/faq/concurrency.txt:98
# 2b6a87e1689f4e62ae2c86fe1ef36aab
msgid "For reporting on lock utilization information on locks, use any of the following methods:"
msgstr ""

#: ../source/faq/concurrency.txt:101
#: ../source/faq/concurrency.txt:195
# db91fa6d474848cda865b3a8a9386c9c
# e058b61981d245c284863b40a2a111d9
msgid ":method:`db.serverStatus()`,"
msgstr ""

#: ../source/faq/concurrency.txt:102
# f92b41271ebf416dac7e21755207db9f
msgid ":method:`db.currentOp()`,"
msgstr ""

#: ../source/faq/concurrency.txt:103
# dcab9b3efbb94515966cb12d9acef33e
msgid ":doc:`mongotop </reference/program/mongotop>`,"
msgstr ""

#: ../source/faq/concurrency.txt:104
# d96f1de6048442be8a3182771409b8e8
msgid ":doc:`mongostat </reference/program/mongostat>`, and/or"
msgstr ""

#: ../source/faq/concurrency.txt:105
# 668467cf00844fef8e0a6434e1f8acfb
msgid "the |mms-home| or :products:`Ops Manager, an on-premise solution available in MongoDB Enterprise Advanced </mongodb-enterprise-advanced?jmp=docs>`"
msgstr ""

#: ../source/faq/concurrency.txt:110
# 24c1ea050f214f1a87ef68e814b52e9f
msgid "Specifically, the :serverstatus:`locks` document in the :doc:`output of serverStatus </reference/command/serverStatus>`, or the :data:`~currentOp.locks` field in the :doc:`current operation reporting </reference/method/db.currentOp>` provides insight into the type of locks and amount of lock contention in your :program:`mongod` instance."
msgstr ""

#: ../source/faq/concurrency.txt:116
# 2dee73b9763b40458d014ee7a7dc7a3a
msgid "To terminate an operation, use :method:`db.killOp()`."
msgstr ""

#: ../source/faq/concurrency.txt:123
# 2f9dc9dbd29847bb81736bbae6de28b2
msgid "Does a read or write operation ever yield the lock?"
msgstr ""

#: ../source/faq/concurrency.txt:125
# 5c004c99bf854cf2b87a7c8b8c365cbe
msgid "In some situations, read and write operations can yield their locks."
msgstr ""

#: ../source/faq/concurrency.txt:127
# 7372557c137946eca30b74ccb19c964e
msgid "Long running read and write operations, such as queries, updates, and deletes, yield under many conditions.  MongoDB operations can also yield locks between individual document modifications in write operations that affect multiple documents like :method:`~db.collection.update()` with the ``multi`` parameter."
msgstr ""

#: ../source/faq/concurrency.txt:133
# 06f6de788d354217886793546c58f1e4
msgid "MongoDB's :ref:`MMAPv1 <storage-mmapv1>` storage engine uses heuristics based on its access pattern to predict whether data is likely in physical memory before performing a read. If MongoDB *predicts* that the data is not in physical memory, an operation will yield its lock while MongoDB loads the data into memory. Once data is available in memory, the operation will reacquire the lock to complete the operation."
msgstr ""

#: ../source/faq/concurrency.txt:141
# c080f57bd5f54360a7077607f8418c30
msgid "For storage engines supporting document level :term:`concurrency control`, such as :doc:`WiredTiger </core/wiredtiger>`, yielding is not necessary when accessing storage as the :term:`intent locks <intent lock>`, held at the global, database and collection level, do not block other readers and writers."
msgstr ""

#: ../source/faq/concurrency.txt:147
# ea253e738e714cf49295714d9c33655b
msgid "MongoDB does not yield locks when scanning an index even if it predicts that the index is not in memory."
msgstr ""

#: ../source/faq/concurrency.txt:154
# e698e3b9af2e46808ca381a090103864
msgid "Which operations lock the database?"
msgstr ""

#: ../source/faq/concurrency.txt:156
# 5a1a400c122848f2bf1aa72a6ca72b1f
msgid "The following table lists common database operations and the types of locks they use."
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:4
# 872ddeb1ef9640489ed3476041bcbcb1
msgid "Operation"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:6
# 61846df391ef488cbb3147b334a69b68
msgid "Lock Type"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:8
# 5a1ea5ec896a49b087d5a57e92a0baa5
msgid "Issue a query"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:10
#: ../source/includes/table/lock-behavior-per-operation.rst:14
#: ../source/includes/table/lock-behavior-per-operation.rst:66
# 7cf980ff932742d9a05450d24c49d45a
# 51dd55213ba2407b8114ec04a179d482
# 3ce68876f33a479d860fe7714d61200e
msgid "Read lock"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:12
# 102a6726b13a43d3a5a986f5b8799424
msgid "Get more data from a :term:`cursor`"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:16
# 74c631ab004d434f9c08a4f1649327a8
msgid "Insert data"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:18
#: ../source/includes/table/lock-behavior-per-operation.rst:22
#: ../source/includes/table/lock-behavior-per-operation.rst:26
# ab8ec132054540899099f8bef91d2787
# 351219e3903a4d94ad7119a3e32c1121
# 4c80734d858a42a988fca8fdf7448dad
msgid "Write lock"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:20
# 41f78fc6cd7249859f5fb321c6db4e35
msgid "Remove data"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:24
# 1850551a95a04db0ac2e61e944125676
msgid "Update data"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:28
# be65a1a964af4af49a2f47f17eaf7281
msgid ":term:`Map-reduce <map-reduce>`"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:30
# 9834cd14db514210a7db7290e32d5ae9
msgid "Read lock and write lock, unless operations are specified as non-atomic. Portions of map-reduce jobs can run concurrently."
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:34
# c7757042159c4e8ea2d80b7646b75239
msgid "Create an index"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:36
# f5400c1fa53c4dffbd5ea8e28df15c70
msgid "Building an index in the foreground, which is the default, locks the database for extended periods of time."
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:40
# b8d40fd0ba094581881183c8af882b14
msgid ":method:`db.eval()`"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:45
# a926a6cdc07348fdb6a0cd772399d20c
msgid "Write lock. The :method:`db.eval()` method takes a global write lock while evaluating the JavaScript function. To avoid taking this global write lock, you can use the :dbcommand:`eval` command with ``nolock: true``."
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:51
# 49b941faaee34ac19e15f6f556aa108a
msgid ":dbcommand:`eval`"
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:56
# bff8df6b8d9d4ffe8c783b548df9c58e
msgid "Write lock. By default, :dbcommand:`eval` command takes a global write lock while evaluating the JavaScript function. If used with ``nolock: true``, the :dbcommand:`eval` command does *not* take a global write lock while evaluating the JavaScript function. However, the logic within the JavaScript function may take write locks for write operations."
msgstr ""

#: ../source/includes/table/lock-behavior-per-operation.rst:64
# 28c28c0f3bda4809882967435759f722
msgid ":method:`~db.collection.aggregate()`"
msgstr ""

#: ../source/faq/concurrency.txt:165
# cfa003022e8645c6936289e6abed7969
msgid "Which administrative commands lock the database?"
msgstr ""

#: ../source/faq/concurrency.txt:167
# 60a081b06a804914b38825e1cf6b0bb8
msgid "Certain administrative commands can exclusively lock the database for extended periods of time. In some deployments, for large databases, you may consider taking the :program:`mongod` instance offline so that clients are not affected. For example, if a :program:`mongod` is part of a :term:`replica set`, take the :program:`mongod` offline and let other members of the set service load while maintenance is in progress."
msgstr ""

#: ../source/faq/concurrency.txt:174
# d3369f5905c24a78aa73c89b31bdb123
msgid "The following administrative operations require an exclusive (i.e. write) lock on the database for extended periods:"
msgstr ""

#: ../source/faq/concurrency.txt:177
# 822a64f1997e4a1282cdd2f077208d27
msgid ":method:`db.collection.createIndex()`, when issued *without* setting ``background`` to ``true``,"
msgstr ""

#: ../source/faq/concurrency.txt:179
# 7a0d0d37d06348ca8c0d460cd568f610
msgid ":dbcommand:`reIndex`,"
msgstr ""

#: ../source/faq/concurrency.txt:180
# 650849995dd7479c9d7e548abb1a4035
msgid ":dbcommand:`compact`,"
msgstr ""

#: ../source/faq/concurrency.txt:181
# fc7531f4ee05489fb744a67a63b079a6
msgid ":method:`db.repairDatabase()`,"
msgstr ""

#: ../source/faq/concurrency.txt:182
# c386d95cfc8f4174bc0e8f4aeff3029a
msgid ":method:`db.createCollection()`, when creating a very large (i.e. many gigabytes) capped collection,"
msgstr ""

#: ../source/faq/concurrency.txt:184
# d7be8eb1f2864760ac53f04aba3f5da9
msgid ":method:`db.collection.validate()`, and"
msgstr ""

#: ../source/faq/concurrency.txt:185
# 771226e39106408e8cd7b6ff4d4dc6b7
msgid ":method:`db.copyDatabase()`. This operation may lock all databases. See :ref:`faq-concurrency-lock-multiple-dbs`."
msgstr ""

#: ../source/faq/concurrency.txt:188
# 0dcac480c53647a6aaacea2b012bf36e
msgid "The following administrative commands lock the database but only hold the lock for a very short time:"
msgstr ""

#: ../source/faq/concurrency.txt:191
# f467918e8f4b4c2da103486d6a664d7c
msgid ":method:`db.collection.dropIndex()`,"
msgstr ""

#: ../source/faq/concurrency.txt:192
# 482330436d8f48c4915b5374bac33668
msgid ":method:`db.getLastError()`,"
msgstr ""

#: ../source/faq/concurrency.txt:193
# 22ad6647296d4c8b966ecbb5ad25720a
msgid ":method:`db.isMaster()`,"
msgstr ""

#: ../source/faq/concurrency.txt:194
# a4986973166d45018d451d8ea441e92d
msgid ":method:`rs.status()` (i.e. :dbcommand:`replSetGetStatus`),"
msgstr ""

#: ../source/faq/concurrency.txt:196
# 637f0d9c3e0f45df9349a6662f9575e4
msgid ":method:`db.auth()`, and"
msgstr ""

#: ../source/faq/concurrency.txt:197
# f90c72e1f86e469da9e43fc5cf3e4f39
msgid ":method:`db.addUser()`."
msgstr ""

#: ../source/faq/concurrency.txt:202
# 5a0546952d2344b1b7a88c0a1cc31d66
msgid "Does a MongoDB operation ever lock more than one database?"
msgstr ""

#: ../source/faq/concurrency.txt:204
# 57b09746e12544a19ef32bcb176056a5
msgid "The following MongoDB operations lock multiple databases:"
msgstr ""

#: ../source/faq/concurrency.txt:206
# 8541c9dba9344d6b9aebb2b027fd8b0e
msgid ":method:`db.copyDatabase()` must lock the entire :program:`mongod` instance at once."
msgstr ""

#: ../source/faq/concurrency.txt:209
# 8bce61176d464250844e435a51df8972
msgid ":method:`db.repairDatabase()` obtains a global write lock and will block other operations until it finishes."
msgstr ""

#: ../source/faq/concurrency.txt:212
# 9d222250b3d945c381f6631e4b60aeaa
msgid ":term:`Journaling <journal>`, which is an internal operation, locks all databases for short intervals. All databases share a single journal."
msgstr ""

#: ../source/faq/concurrency.txt:216
# 26c2322d8b734416bc8dce19588bd8e0
msgid ":doc:`User authentication </core/authentication>` requires a read lock on the ``admin`` database for deployments using :ref:`2.6 user credentials <admin-system-users-collection>`. For deployments using the 2.4 schema for user credentials, authentication locks the ``admin`` database as well as the database the user is accessing."
msgstr ""

#: ../source/faq/concurrency.txt:222
# d3715bd84324495c945946cc8d60b219
msgid "All writes to a replica set's :term:`primary` lock both the database receiving the writes and then the ``local`` database for a short time. The lock for the ``local`` database allows the :program:`mongod` to write to the primary's :term:`oplog` and accounts for a small portion of the total time of the operation."
msgstr ""

#: ../source/faq/concurrency.txt:229
# 6de41652b6b949faa590cc120e9e7603
msgid "How does sharding affect concurrency?"
msgstr ""

#: ../source/faq/concurrency.txt:231
# 8619308e9d034cc38debb4674739316b
msgid ":term:`Sharding <sharding>` improves concurrency by distributing collections over multiple :program:`mongod` instances, allowing shard servers (i.e. :program:`mongos` processes) to perform any number of operations concurrently to the various downstream :program:`mongod` instances."
msgstr ""

#: ../source/includes/extracts/lock-sharding.rst:1
# 2b6bcaee0a6a4e798cddbd6f8803eb5a
msgid "In a sharded cluster, locks apply to each individual shard, not to the whole cluster; i.e. each :program:`mongod` instance is independent of the others in the shard cluster and uses its own :ref:`locks <faq-concurrency-locking>`. The operations on one :program:`mongod` instance do not block the operations on any others."
msgstr ""

#: ../source/faq/concurrency.txt:242
# 5374b80aff784b7881671d9a2308f075
msgid "How does concurrency affect a replica set primary?"
msgstr ""

#: ../source/faq/concurrency.txt:244
# 71ae1022c088437592a9e9c5fe9419df
msgid "With replica sets, when MongoDB writes to a collection on the :term:`primary`, MongoDB also writes to the primary's :term:`oplog`, which is a special collection in the ``local`` database. Therefore, MongoDB must lock both the collection's database and the ``local`` database. The :program:`mongod` must lock both databases at the same time to keep the database consistent and ensure that write operations, even with replication, are \"all-or-nothing\" operations."
msgstr ""

#: ../source/includes/extracts/lock-replica-set-primary.rst:1
# 50bcad094aa147c88b3a3e14c2bc022d
msgid "When writing to a :term:`replica set`, the lock's scope applies to the :term:`primary`."
msgstr ""

#: ../source/faq/concurrency.txt:255
# 7da7f7307fde4cc296819c183eb01fc6
msgid "How does concurrency affect secondaries?"
msgstr ""

#: ../source/faq/concurrency.txt:257
# 8d5862659ce2427cb20b6be6ef092952
msgid "In :term:`replication`, MongoDB does not apply writes serially to :term:`secondaries <secondary>`. Secondaries collect oplog entries in batches and then apply those batches in parallel. Secondaries do not allow reads while applying the write operations, and apply write operations in the order that they appear in the oplog."
msgstr ""

#: ../source/faq/concurrency.txt:264
# 0c301f2da64f4efea1ca511a15dc4c8d
msgid "Does MongoDB support transactions?"
msgstr ""

#: ../source/faq/concurrency.txt:266
# 0a86b8cd428a45be927a0b85020a1892
msgid "MongoDB does not support multi-document transactions."
msgstr ""

#: ../source/faq/concurrency.txt:268
# acb12ca991e048b9bd0c69d3ade20de8
msgid "However, MongoDB does provide atomic operations on a single document. Often these document-level atomic operations are sufficient to solve problems that would require ACID transactions in a relational database."
msgstr ""

#: ../source/faq/concurrency.txt:273
# 382c6fab7b54425c9afbc038a650e345
msgid "For example, in MongoDB, you can embed related data in nested arrays or nested documents within a single document and update the entire document in a single atomic operation. Relational databases might represent the same kind of data with multiple tables and rows, which would require transaction support to update the data atomically."
msgstr ""

#: ../source/faq/concurrency.txt:279
#: ../source/faq/concurrency.txt:308
# c3825e7750694907aae2f3a665b9c295
# 6344651e11184a7b817b3c28e73b831d
msgid ":doc:`/core/write-operations-atomicity`"
msgstr ""

#: ../source/faq/concurrency.txt:282
# dee780e044584f978b3dc6feea3601ed
msgid "What isolation guarantees does MongoDB provide?"
msgstr ""

#: ../source/faq/concurrency.txt:284
# 095d6874fc524ab799a64ee551d94680
msgid "MongoDB provides the following guarantees in the presence of concurrent read and write operations. These guarantees hold on systems configured with either the MMAPv1 or WiredTiger storage engines."
msgstr ""

#: ../source/includes/extracts/concurrent-operations-single-document-write.rst:1
# 34146b3e3bbc46779ac1301b90f8c146
msgid "Write operations are atomic with respect to a single document; i.e. if a write is updating multiple fields in the document, a reader will never see the document with only some of the fields updated."
msgstr ""

#: ../source/includes/extracts/concurrent-operations-single-document-write.rst:5
# 28d37eed9b274b768632adb7cd2d0d8b
msgid "With a standalone :program:`mongod` instance, a set of read and write operations to a single document is serializable. With a replica set, a set of read and write operations to a single document is serializable *only* in the absence of a rollback."
msgstr ""

#: ../source/faq/concurrency.txt:290
# 258071f2bca04cd898c71b8c92f48255
msgid "Correctness with respect to query predicates, e.g. :method:`db.collection.find()` will only return documents that match and :method:`db.collection.update()` will only write to matching documents."
msgstr ""

#: ../source/faq/concurrency.txt:294
# 4e38b32d0b1243da9a07521111e3021c
msgid "Correctness with respect to sort. For read operations that request a sort order (e.g. :method:`db.collection.find()` or :method:`db.collection.aggregate()`), the sort order will not be violated due to concurrent writes."
msgstr ""

#: ../source/faq/concurrency.txt:299
# afe991d38dd447c893c334a8d4d616d2
msgid "Although MongoDB provides these strong guarantees for single-document operations, read and write operations may access an arbitrary number of documents during execution.  Multi-document operations do *not* occur transactionally and are not isolated from concurrent writes. This means that the following behaviors are expected under the normal operation of the system, for both the MMAPv1 and WiredTiger storage engines:"
msgstr ""

#: ../source/includes/extracts/concurrent-operations-multi-document-writes-no-isolation.rst:2
# fc3859676ed44412bde030f9d4d1bc0a
msgid "Non-point-in-time read operations. Suppose a read operation begins at time *t*\\ :sub:`1` and starts reading documents. A write operation then commits an update to one of the documents at some later time *t*\\ :sub:`2`. The reader may see the updated version of the document, and therefore does not see a point-in-time snapshot of the data."
msgstr ""

#: ../source/includes/extracts/concurrent-operations-multi-document-writes-no-isolation.rst:9
# 928cf9115f7748c9929b95d43c75c3af
msgid "Non-serializable operations. Suppose a read operation reads a document *d*\\ :sub:`1` at time *t*\\ :sub:`1` and a write operation updates *d*\\ :sub:`1` at some later time *t*\\ :sub:`3`. This introduces a read-write dependency such that, if the operations were to be serialized, the read operation must precede the write operation. But also suppose that the write operation updates document *d*\\ :sub:`2` at time *t*\\ :sub:`2` and the read operation subsequently reads *d*\\ :sub:`2` at some later time *t*\\ :sub:`4`. This introduces a write-read dependency which would instead require the read operation to come *after* the write operation in a serializable schedule. There is a dependency cycle which makes serializability impossible."
msgstr ""

#: ../source/includes/extracts/concurrent-operations-multi-document-writes-no-isolation.rst:22
# 80c3005ed2c84d4da7a5ffd6bfb98bfd
msgid "Reads may miss matching documents that are updated during the course of the read operation."
msgstr ""

#: ../source/faq/concurrency.txt:311
# d3a1446639f34a17afd103b2c666b89e
msgid "Can reads see changes that have not been committed to disk?"
msgstr ""

#: ../source/faq/concurrency.txt:315
# 7e4b66872678416190d5fdcaa1c9d9ed
msgid "MongoDB 3.2 introduces :ref:`3.2-rel-notes-readConcern` option. Clients using :readconcern:`majority` ``readConcern`` cannot see the results of writes before they are made :term:`durable`."
msgstr ""

#: ../source/faq/concurrency.txt:319
# 92fadc2545f041809db4f3701f94f801
msgid "Readers, using :readconcern:`\"local\"` ``readConcern`` can see the results of writes before they are made :term:`durable`, regardless of write concern level or journaling configuration. As a result, applications may observe the following behaviors:"
msgstr ""

#: ../source/faq/concurrency.txt:324
# 4cb5ef218a0b40f497ca0611f316e77e
msgid "MongoDB will allow a concurrent reader to see the result of the write operation before the write is acknowledged to the client application. For details on when writes are acknowledged for different write concern levels, see :doc:`/reference/write-concern`."
msgstr ""

#: ../source/faq/concurrency.txt:329
# fff5333616ac42a48391a6c9d51e0ee3
msgid "Reads can see data which may subsequently be rolled back in cases such as replica set failover or power loss. It does *not* mean that read operations can see documents in a partially written or otherwise inconsistent state."
msgstr ""

#: ../source/faq/concurrency.txt:333
# acf8964905b044fc9393201db62c554b
msgid "Other systems refer to these semantics as *read uncommitted*."
msgstr ""

