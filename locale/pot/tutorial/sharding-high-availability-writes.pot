# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2016
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-12-08 12:02-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/tutorial/sharding-high-availability-writes.txt:3
# eaca39b67ed44a7e82006fcaf9afb5bf
msgid "Distributed Local Writes for Insert Only Workloads"
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:0
# 28ad4ddb899948c5bbc5456241d39b98
msgid "On this page"
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:13
# d509a6c565c1446eac646a5b98570fe4
msgid "MongoDB Tag Aware Sharding allows administrators to control data distribution in a sharded cluster by defining ranges of the :term:`shard key` and tagging them to one or more shards."
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:17
# 4e21df8f955649de8cc75727cf7b0e4e
msgid "This tutorial uses :ref:`zone-sharding` along with a multi-datacenter sharded cluster deployment and application-side logic to support distributed local writes, as well as high write availability in the event of a replica set election or datacenter failure."
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:24
# 7eb8b25211b14eef82a73b8e5ff4c064
msgid "The concepts discussed in this tutorial require a specific deployment architecture, as well as application-level logic."
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:27
# a43199bbb63140398d7af58724f2bfba
msgid "These concepts require familiarity with MongoDB :term:`sharded clusters <sharded cluster>`, :term:`replica sets <replica set>`, and the general behavior of :ref:`zones <zone-sharding>`."
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:31
# 23c6a6b14a7149cf84ca0b842fb39e77
msgid "This tutorial assumes an insert-only or insert-intensive workload. The concepts and strategies discussed in this tutorial are not well suited for use cases that require fast reads or updates."
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:36
# 79ed1403be594149a77b62838c05ed1f
msgid "Scenario"
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:38
# 88f8df1a7e5e4a47b630252545083c67
msgid "Consider an insert-intensive application, where reads are infrequent and low priority compared to writes. The application writes documents to a sharded collection, and requires near-constant uptime from the database to support its SLAs or SLOs."
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:43
# 9a2fcb75434545f1b6d09675cf267642
msgid "The following represents a partial view of the format of documents the application writes to the database:"
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:71
# db594a286c3643f08e0b55f65dac8363
msgid "Shard Key"
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:73
# 4cdbc74f320d4056a596ae93594c471c
msgid "The collection uses the ``{ datacenter : 1, userid : 1 }`` compound index as the :term:`shard key`."
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:78
# 14c98e4f71dc426f8d695a8c584aa21f
msgid "The ``datacenter`` field in each document allows for creating a tag range on each distinct datacenter value. Without the ``datacenter`` field, it would not be possible to associate a document with a specific datacenter."
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:82
# 17a88068586e4da580131c607118f522
msgid "The ``userid`` field provides a high :ref:`cardinality <shard-key-cardinality>` and low :ref:`frequency <shard-key-frequency>` component to the shard key relative to ``datacenter``."
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:86
# de1a1274b3854c9fae98bae8598f7999
msgid "See :ref:`Choosing a Shard Key <sharding-shard-key-requirements>` for more general instructions on selecting a shard key."
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:90
# 0f4553b8b7ec455cbfe99350654ac111
msgid "Architecture"
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:92
# 33226e24eca84f419c9c983261cd79eb
msgid "The deployment consists of two datacenters, ``alfa`` and ``bravo``. There are two shards, ``shard0000`` and ``shard0001``. Each shard is a :term:`replica set` with three members. ``shard0000`` has two members on ``alfa`` and one :ref:`priority 0 member <replica-set-secondary-only-members>` on ``bravo``. ``shard0001`` has two members on ``bravo`` and one :ref:`priority 0 member <replica-set-secondary-only-members>` on ``alfa``."
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:104
# e66b5ad997754e75a3bce103b8fd98d3
msgid "Tags"
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:106
# abb2f13ddb8e4885891c511edb347ab7
msgid "This application requires one tag per datacenter. Each shard has one tag assigned to it based on the datacenter containing the majority of its replica set members. There are two tag ranges, one for each datacenter."
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:117
# 5be3092cffca43ad8af3ee15e785b068
msgid "``alfa`` Datacenter"
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:111
# b6d6545c5cc54522b1b58208c5c88379
msgid "Tag shards with a majority of members on this datacenter as ``alfa``."
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:113
#: ../source/tutorial/sharding-high-availability-writes.txt:122
# 3f25e19712bb44de8d21e0a1e5544fcb
# e386b9df56a74a5a8cde4436bd1bf562
msgid "Create a tag range with:"
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:115
# aca9f5582f744eaeb2fc25b23d5bdd87
msgid "a lower bound of ``{ \"datacenter\" : \"alfa\", \"userid\" : MinKey }``,"
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:116
# 344426eead6c4431ba627a8237c1ca0a
msgid "an upper bound of ``{ \"datacenter\" : \"alfa\", \"userid\" : MaxKey }``, and"
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:117
# 480f20f23e08455e85fec2cd7ea19650
msgid "the tag ``alfa``"
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:126
# c64e02661cbf48bd80bb59e87a4e8f1c
msgid "``bravo`` Datacenter"
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:120
# 93b90aed9a5b4789ae5ea0787587b2bf
msgid "Tag shards with a majority of members on this datacenter as ``bravo``."
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:124
# 6458dde94214453b86b57c9d610c7689
msgid "a lower bound of ``{ \"datacenter\" : \"bravo\", \"userid\" : MinKey }``,"
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:125
# 24940ea1eeb345239588f49fc2bebb8d
msgid "an upper bound of ``{ \"datacenter\" : \"bravo\", \"userid\" : MaxKey }``, and"
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:126
# e0477785221c46ad869d2b469e9fd30b
msgid "the tag ``bravo``"
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:130
# 3aa4212108d1487793aa46fcb5163f21
msgid "The :bsontype:`MinKey` and :bsontype:`MaxKey` values are reserved special values for comparisons"
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:133
# bdb3423bf2374c3f84cf2925006d3307
msgid "Based on the configured tags and tag ranges, :program:`mongos` routes documents with ``datacenter : alfa`` to the ``alfa`` datacenter, and documents with ``datacenter : bravo`` to the ``bravo`` datacenter."
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:139
# f74e40e491b24b57ad8bee77ce7c9100
msgid "Write Operations"
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:141
# 875b6fddb2f14c0b8ec10d797519bee3
msgid "If an inserted or updated document matches a configured tag range, it can only be written to a shard with the related tag."
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:144
# d8a51c7ca026457d850da390a18bdb99
msgid "MongoDB can write documents that do not match a configured tag range to any shard in the cluster."
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:149
# 860b61dd7f34440482d37f61ec4ac57c
msgid "The behavior described above requires the cluster to be in a steady state with no chunks violating a configured tag range. See the following section on the :ref:`balancer <sharding-high-availability-writes-balancing>` for more information."
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:157
# 0d2c1a32ed1f4b189941860959747879
msgid "Balancer"
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:159
# 11243d95d9344d2390bfd27fae65ee23
msgid "The :ref:`balancer <sharding-balancing>` :ref:`migrates <sharding-chunk-migration>` the tagged chunks to the appropriate shard. Until the migration, shards may contain chunks that violate configured tag ranges and tags. Once balancing completes, shards should only contain chunks whose ranges do not violate its assigned tags and tag ranges."
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:165
# 99b4fdfe1fe34826a985a36a9a4ac3a3
msgid "Adding or removing tags or tag ranges can result in chunk migrations. Depending on the size of your data set and the number of chunks a tag range affects, these migrations may impact cluster performance. Consider running your :ref:`balancer <sharding-balancing>` during specific scheduled windows. See :ref:`sharding-schedule-balancing-window` for a tutorial on how to set a scheduling window."
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:176
# df5bf6abf2954186b1347c80bcb1fcc1
msgid "Application Behavior"
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:178
# ede46368284c4c5981ce9a57f5fff19f
msgid "By default, the application writes to the nearest datacenter. If the local datacenter is down, or if writes to that datacenter are not acknowledged within a set time period, the application switches to the other available datacenter by changing the value of the ``datacenter`` field before attempting to write the document to the database."
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:184
# b320a133383248b89d687de8ea3ec60f
msgid "The application supports write timeouts. The application uses :ref:`write-concern` to set a :ref:`timeout <wc-wtimeout>` for each write operation."
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:188
# 82dab13ffb5f419ca7a488efaba0d25b
msgid "If the application encounters a write or timeout error, it modifies the ``datacenter`` field in each document and performs the write. This routes the document to the other datacenter. If both datacenters are down, then writes cannot succeed. See :ref:`sharding-high-availability-write-failure`."
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:193
# 240d7bee3cb649f7b6cf0271c2e1d4c3
msgid "The application periodically checks connectivity to any data centers marked as \"down\". If connectivity is restored, the application can continue performing normal write operations."
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:197
# 9c71646d41574ac481f6b91642b963ce
msgid "Given the switching logic, as well as any load balancers or similar mechanisms in place to handle client traffic between datacenters, the application cannot predict which of the two datacenters a given document was written to. To ensure that no documents are missed as a part of read operations, the application *must* perform :ref:`broadcast queries <sharding-mongos-broadcast>` by *not* including the ``datacenter`` field as a part of any query."
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:205
# 3fb7c5b2c2c443bd921d224a8f05b997
msgid "The application performs reads using a :ref:`read preference <read-preference>` of :readmode:`nearest` to reduce latency."
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:208
# f25e557b8db3446db0e30a70341f2081
msgid "It is possible for a write operation to succeed despite a reported timeout error. The application responds to the error by attempting to re-write the document to the other datacenter - this can result in a document being duplicated across both datacenters. The application resolves duplicates as a part of the :ref:`read <sharding-high-availability-writes-read-resolution>` logic."
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:216
# 0850da5316e7450885d9c115323cc45a
msgid "Switching Logic"
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:218
# 63ea56eb0e0d45138fe90516d27b8314
msgid "The application has logic to switch datacenters if one or more writes fail, or if writes are not :ref:`acknowledged <write-concern>` within a set time period. The application modifies the ``datacenter`` field based on the target datacenter's :ref:`tag <sharding-high-availability-tags>` to direct the document towards that datacenter."
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:224
# 309ee6b9130c466796249a493f1331b8
msgid "For example, an application attempting to write to the ``alfa`` datacenter might follow this general procedure:"
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:227
# f85550ce9aab446a84dd33a0cb74b25e
msgid "Attempt to write document, specifying ``datacenter : alfa``."
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:228
# 0ec7960ef156443581cbdde3cd99d32e
msgid "On write timeout or error, log ``alfa`` as momentarily down."
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:229
# 951dc890a12a462ea0c5196ef6584ff4
msgid "Attempt to write same document, modifying ``datacenter : bravo``."
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:230
# 610a5919c5b0467d8c1f0d3d26d644e0
msgid "On write timeout or error, log ``bravo`` as momentarily down."
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:231
# c923c80ca93d4ab18b4aae20f2492e69
msgid "If both ``alfa`` and ``bravo`` are down, log and report errors."
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:233
# 40a3502d3ecd42eaad673c8cbb685a58
msgid "See :ref:`sharding-high-availability-write-failure`."
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:236
# 5ddae6f2dba947f2a99730c3e6fc9601
msgid "Procedure"
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:241
# 6200b9ce1f0c4bc189b69b409580e584
msgid "Configure Shard Tags"
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:243
# b832669618434f96a0b1a9c2da8bee45
msgid "You must be connected to a :program:`mongos` associated with the target :term:`sharded cluster` in order to proceed. You cannot create tags by connecting directly to a :term:`shard` replica set member."
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:252
# 7c951ccdea3a464cb1cb70b4d98099ae
msgid "Resolve Write Failure"
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:254
# 1709ecc77ed34bcdbacb886e3af0ff4c
msgid "When the application's default datacenter is down or inaccessible, the application changes the ``datacenter`` field to the other datacenter."
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:258
# db89bc103b544e8bb8a2c046034a9ba0
msgid "For example, the application attempts to write the following document to the ``alfa`` datacenter by default:"
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:271
# c8db73beb96a4e37b3a01382ed7cda9b
msgid "If the application receives an error on attempted write, or if the write acknowledgement takes too long, the application logs the datacenter as unavailable and alters the ``datacenter`` field to point to the ``bravo`` datacenter."
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:286
# bdeba737ea684185b20adbd577264902
msgid "The application periodically checks the ``alfa`` datacenter for connectivity. If the datacenter is reachable again, the application can resume normal writes."
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:292
# f28b325dd82b4ac2bac4f00f62bafd21
msgid "It is possible that the original write to ``datacenter : alfa`` succeeded, especially if the error was related to a :ref:`timeout <wc-wtimeout>`. If so, the document with ``message_id : 329620`` may now be duplicated across both datacenters. Applications must resolve duplicates as a part of :ref:`read operations <sharding-high-availability-writes-read-resolution>`."
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:302
# 0ca42c4e8a144e9bb9fb9ff4a71eef5c
msgid "Resolve Duplicate Documents on Reads"
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:304
# 7a96690f0c894636ac73ebe4364d9ccf
msgid "The application's switching logic allows for potential document duplication. When performing reads, the application resolves any duplicate documents on the application layer."
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:308
# 86eb4362c7ad4d3ab4e2caa79fa5d52f
msgid "The following query searches for documents where the ``userid`` is ``123``. Note that while ``userid`` is part of the shard key, the query does not include the ``datacenter`` field, and therefore does not perform a :ref:`targeted read operation <sharding-mongos-targeted>`."
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:317
# d5d9cea4e5f74dcfb3dda90fb612d5c2
msgid "The results show that the document with ``message_id`` of ``329620`` has been inserted into MongoDB twice, probably as a result of a delayed write acknowledgement."
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:338
# e3ecca3f07ae4a5d9dce46fd24fca331
msgid "The application can either ignore the duplicates, taking one of the two documents, or it can attempt to trim the duplicates until only a single document remains."
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:342
# c1e8247f87f842dfbe938bce29bc8b84
msgid "One method for trimming duplicates is to use the :method:`ObjectId.getTimestamp()` method to extract the timestamp from the ``_id`` field. The application can then keep either the first document inserted, or the last document inserted. This assumes the ``_id`` field uses the MongoDB :method:`ObjectId`."
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:348
# 032107266acd446aac3883854fe10be7
msgid "For example, using :method:`~ObjectId.getTimestamp()` on the document with ``ObjectId(\"56f08c447fe58b2e96f595fa\")`` returns:"
msgstr ""

#: ../source/tutorial/sharding-high-availability-writes.txt:355
# 520d4b2aef714036a5767ac21368d871
msgid "Using :method:`~ObjectId.getTimestamp()` on the document with ``ObjectId(\"56f08c457fe58b2e96f595fb\")`` returns:"
msgstr ""

