# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2016
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-12-08 12:02-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/tutorial/aggregation-zip-code-data-set.txt:3
# 15d3279ff06a45648a9578486df31ff6
msgid "Aggregation with the Zip Code Data Set"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:0
# b0d751822d1f4b39b025c7ee1c476e7e
msgid "On this page"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:13
# c1fe3eb0f681434a85726fe4bae58517
msgid "The examples in this document use the ``zipcodes`` collection. This collection is available at: `media.mongodb.org/zips.json <http://media.mongodb.org/zips.json>`_. Use :program:`mongoimport` to load this data set into your :program:`mongod` instance."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:19
# 04b5d1a3ab98486f97a9504c77ae8202
msgid "Data Model"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:21
# b55050ca06cc4183910bd5de0fefa397
msgid "Each document in the ``zipcodes`` collection has the following form:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:36
# de72a40eac084f38ba53c3f25c1a0b85
msgid "The ``_id`` field holds the zip code as a string."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:38
# 16e77e5e0c174bbf82517bf80da35091
msgid "The ``city`` field holds the city name. A city can have more than one zip code associated with it as different sections of the city can each have a different zip code."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:42
# b76db6e53352460b9ee430b3cfa8c6a9
msgid "The ``state`` field holds the two letter state abbreviation."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:44
# e58c71dde30f4482bc49951726e2fb61
msgid "The ``pop`` field holds the population."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:46
# d98655fa37814a7182b604bb11808cfc
msgid "The ``loc`` field holds the location as a latitude longitude pair."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:49
# 344114d446f944e896ea58396eff38ab
msgid "``aggregate()`` Method"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:51
# b3bc160aee75423ebf974e674707f077
msgid "All of the following examples use the :method:`aggregate() <db.collection.aggregate()>` helper in the :program:`mongo` shell."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:54
# 427a9852714744feae9c10224f441bc7
msgid "The :method:`aggregate() <db.collection.aggregate()>` method uses the :ref:`aggregation pipeline <aggregation-pipeline>` to processes documents into aggregated results. An :ref:`aggregation pipeline <aggregation-pipeline>` consists of :ref:`stages <aggregation-pipeline-operator-reference>` with each stage processing the documents as they pass along the pipeline. Documents pass through the stages in sequence."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:62
# 03582f2c135c4ffb9df0ea6984ef7306
msgid "The :method:`aggregate() <db.collection.aggregate()>` method in the :program:`mongo` shell provides a wrapper around the :dbcommand:`aggregate` database command. See the documentation for your :doc:`driver </applications/drivers>` for a more idiomatic interface for data aggregation operations."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:71
# 0a53853e7650438d8882341c7cfc44d0
msgid "Return States with Populations above 10 Million"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:73
# 398eae1c54d44174823d6b7611a911b8
msgid "The following aggregation operation returns all states with total population greater than 10 million:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:83
# ddc9c0582e3141e9b9726d20b7579cdb
msgid "In this example, the :ref:`aggregation pipeline <aggregation-pipeline>` consists of the :pipeline:`$group` stage followed by the :pipeline:`$match` stage:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:87
# 6165ec7593744db7a6b901747fa8e381
msgid "The :pipeline:`$group` stage groups the documents of the ``zipcode`` collection by the ``state`` field, calculates the ``totalPop`` field for each state, and outputs a document for each unique state."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:91
# c81314a4000f40e5959ee5bf92d9a3b6
msgid "The new per-state documents have two fields: the ``_id`` field and the ``totalPop`` field. The ``_id`` field contains the value of the ``state``; i.e. the group by field. The ``totalPop`` field is a calculated field that contains the total population of each state. To calculate the value, :pipeline:`$group` uses the :group:`$sum` operator to add the population field (``pop``) for each state."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:98
# e9243ac195cf4200b5f5c3d53f260956
msgid "After the :pipeline:`$group` stage, the documents in the pipeline resemble the following:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:108
# 0379fd4b9ed4494299b4c6ab866fe604
msgid "The :pipeline:`$match` stage filters these grouped documents to output only those documents whose ``totalPop`` value is greater than or equal to 10 million. The :pipeline:`$match` stage does not alter the matching documents but outputs the matching documents unmodified."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:113
# caef37c32dee4e5ebe61c0d5f34dd15d
msgid "The equivalent :term:`SQL` for this aggregation operation is:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:122
# 6bbabec970fd4260a6dba4f6b21fbff7
msgid ":pipeline:`$group`, :pipeline:`$match`, :group:`$sum`"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:125
# a5d799fef04c4841839fc368eff2f2d5
msgid "Return Average City Population by State"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:127
# 6e25693ac7bf4b5eabbb6c7f65754d35
msgid "The following aggregation operation returns the average populations for cities in each state:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:137
# d0d2103d620d487db32afb749dd1da3f
msgid "In this example, the :ref:`aggregation pipeline <aggregation-pipeline>` consists of the :pipeline:`$group` stage followed by another :pipeline:`$group` stage:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:141
# 3dfae30499c14011940634691b59dbd0
msgid "The first :pipeline:`$group` stage groups the documents by the combination of ``city`` and ``state``, uses the :group:`$sum` expression to calculate the population for each combination, and outputs a document for each ``city`` and ``state`` combination. [#multiple-zips-per-city]_"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:147
# 2723da3583a24b5681388e5bcc41ced7
msgid "After this stage in the pipeline, the documents resemble the following:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:160
# d383ad067c2c4733afdd264b2eb5ccc5
msgid "A second :pipeline:`$group` stage groups the documents in the pipeline by the ``_id.state`` field (i.e. the ``state`` field inside the ``_id`` document), uses the :group:`$avg` expression to calculate the average city population (``avgCityPop``) for each state, and outputs a document for each state."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:166
# d94e684253624446bf5b9c43b65077b8
msgid "The documents that result from this aggregation operation resembles the following:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:176
# f7e70d60a9c745b6ae4132b1efc9e634
msgid ":pipeline:`$group`, :group:`$sum`, :group:`$avg`"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:179
# 478d2241d2f14497badf2ed421605c2a
msgid "Return Largest and Smallest Cities by State"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:181
# 8661ce9933ab410abeb5355327435507
msgid "The following aggregation operation returns the smallest and largest cities by population for each state:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:216
# c92919889c82476d9a777ce147a20781
msgid "In this example, the :ref:`aggregation pipeline <aggregation-pipeline>` consists of a :pipeline:`$group` stage, a :program:`$sort` stage, another :pipeline:`$group` stage, and a :program:`$project` stage:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:220
# ce6c240981944774ad69cce26c6bf758
msgid "The first :pipeline:`$group` stage groups the documents by the combination of the ``city`` and ``state``, calculates the :group:`sum <$sum>` of the ``pop`` values for each combination, and outputs a document for each ``city`` and ``state`` combination."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:225
# d301e52b4c254eeead1a3bb5894cc819
msgid "At this stage in the pipeline, the documents resemble the following:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:237
# 3f0476238ef5471486c4cae926591bc8
msgid "The :pipeline:`$sort` stage orders the documents in the pipeline by the ``pop`` field value, from smallest to largest; i.e. by increasing order. This operation does not alter the documents."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:241
# ccc4d0d31a444b0f98af70f21a046ec7
msgid "The next :pipeline:`$group` stage groups the now-sorted documents by the ``_id.state`` field (i.e. the ``state`` field inside the ``_id`` document) and outputs a document for each state."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:245
# 95413496ae6e4892b3eb9b928b2c5c2a
msgid "The stage also calculates the following four fields for each state. Using the :group:`$last` expression, the :pipeline:`$group` operator creates the ``biggestCity`` and ``biggestPop`` fields that store the city with the largest population and that population. Using the :group:`$first` expression, the :pipeline:`$group` operator creates the ``smallestCity`` and ``smallestPop`` fields that store the city with the smallest population and that population."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:253
# adb5f81ea86c4ee48a907bf9f2496427
msgid "The documents, at this stage in the pipeline, resemble the following:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:265
# 9f7cc928129644fc8283686be72870b5
msgid "The final :pipeline:`$project` stage renames the ``_id`` field to ``state`` and moves the ``biggestCity``, ``biggestPop``, ``smallestCity``, and ``smallestPop`` into ``biggestCity`` and ``smallestCity`` embedded documents."
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:270
# 5250ad0940494d33aa4dbd5ffc4c6131
msgid "The output documents of this aggregation operation resemble the following:"
msgstr ""

#: ../source/tutorial/aggregation-zip-code-data-set.txt:286
# 37133a07a6974b67bc8bc695670ebdd2
msgid "A city can have more than one zip code associated with it as different sections of the city can each have a different zip code."
msgstr ""

