# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2016
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-12-08 12:02-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/tutorial/model-monetary-data.txt:3
# 043ab58c18204f2db4392853e96a191a
msgid "Model Monetary Data"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:0
# 783770d9937140d591acf34b51b3d173
msgid "On this page"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:14
# ff73a62e3f334035a415694af009682f
msgid "Overview"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:16
# a42f33187e1141ac89d4cac5e49fa8a1
msgid "Applications that handle monetary data often require the ability to capture fractional units of currency and need to emulate decimal rounding with exact precision when performing arithmetic. The binary-based floating-point arithmetic used by many modern systems (i.e., float, double) is unable to represent exact decimal fractions and requires some degree of approximation making it unsuitable for monetary arithmetic. This constraint is an important consideration when modeling monetary data."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:25
# 589e80a0379845948b8717d182385e66
msgid "There are several approaches to modeling monetary data in MongoDB using the numeric and non-numeric models."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:31
#: ../source/tutorial/model-monetary-data.txt:73
# 8f629b57f0ef452aac2f39cd0fdb2caf
# 696f475a05914c1aa863ed1adb9a6928
msgid "Numeric Model"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:33
# 5d6690caea5240f49a208bd08ccfcb9f
msgid "The numeric model may be appropriate if you need to query the database for exact, mathematically valid matches or need to perform server-side arithmetic, e.g., :update:`$inc`, :update:`$mul`, and :doc:`aggregation framework arithmetic </reference/operator/aggregation-arithmetic>`."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:38
# a98efb4d2c2d4421b7bdd8cb7523dd93
msgid "**The following approaches follow the numeric model:**"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:40
# 7f1691b1635e451ebafc7c6419cfa931
msgid ":ref:`numeric-decimal` which is a decimal-based floating-point format capable of providing exact precision. Available in MongoDB version 3.4 and later."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:44
# 1d3b611065e3471bb97ab77c550c698e
msgid ":ref:`numeric-scale-factor` to convert the monetary value to a 64-bit integer (``long`` BSON type) by multiplying by a power of 10 scale factor."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:51
#: ../source/tutorial/model-monetary-data.txt:306
# 6d18dc195caf40d594ddf12da28e867f
# 662959b433fb4cb1a0d70ca79b30e7c2
msgid "Non-Numeric Model"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:53
# c0501f5c06fb40c0a72adb3d24f2141c
msgid "If there is no need to perform server-side arithmetic on monetary data or if server-side approximations are sufficient, modeling monetary data using the non-numeric model may be suitable."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:57
# b9b65dba5fb04168a3a1d4edf17b03b7
msgid "**The following approach follows the non-numeric model:**"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:59
# 291d8f7a373043049aa0c98f955d99d2
msgid ":ref:`Using two fields for the monetary value <monetary-value-non-numeric>`: One field stores the exact monetary value as a non-numeric ``string`` and another field stores a binary-based floating-point (``double`` BSON type) approximation of the value."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:66
# 70d6df7750594c3aaa50a4d6c06a75cc
msgid "Arithmetic mentioned on this page refers to server-side arithmetic performed by :program:`mongod` or :program:`mongos`, and not to client-side arithmetic."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:78
# b9e3cb60ef96444b9483b6fb006583c3
msgid "Using the Decimal BSON Type"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:82
# 140ee432774344de8506d232c1f4d873
msgid "The ``decimal`` :doc:`BSON type </reference/bson-types>` uses the IEEE 754 decimal128 decimal-based floating-point numbering format. Unlike binary-based floating-point formats (i.e., the ``double`` BSON type), decimal128 does not approximate decimal values and is able to provide the exact precision required for working with monetary data."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:88
# c20319c3a3194cb08bb7034fc93a3747
msgid "From the :program:`mongo` shell ``decimal`` values are assigned and queried using the ``NumberDecimal()`` constructor.  The following example adds a document containing gas prices to a ``gasprices`` collection:"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:97
# 95b0b25cfa4e45428ecf2d89992631f0
msgid "The following query matches the document above:"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:103
# 7088d9b7a8b3470eab845e1fc27c3025
msgid "For more information on the ``decimal`` type, see :ref:`shell-type-decimal`."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:107
# 6e4c68bf9b004d4e9d7ea3c626317d7a
msgid "Converting Values to Decimal"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:109
# a21509e88f7b4db7bd1e798f354fa155
msgid "A collection's values can be transformed to the ``decimal`` type by performing a one-time transformation or by modifying application logic to perform the transformation as it accesses records."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:114
# 287d4d062b1f4e5a8db92be33c38ce40
msgid "One-Time Collection Transformation"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:116
# b6cd0a0378004c3485bbb700085556bd
msgid "A collection can be transformed by iterating over all documents in the collection, converting the monetary value to the ``decimal`` type, and writing the document back to the collection."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:120
# 2fa3c737da0c4cd082b1f4acd034782e
msgid "It is strongly advised to add the ``decimal`` value to the document as a new field and remove the old field later once the new field's values have been verified."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:124
# 29e47de2fc2c4d7d8cde11c742ddccf8
msgid "Be sure to  test ``decimal`` conversions in an isolated test environment. Once datafiles are created or modified with MongoDB version 3.4 they will no longer be compatible with previous versions and there is no support for downgrading datafiles containing decimals."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:130
# 3901adaff5ba41c4ab87edabcb5c172b
msgid "**Scale Factor Transformation:**"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:132
# edfb72e8b3154478a3ff6f0a9fc4ed62
msgid "Consider the following collection which used the :ref:`Scale Factor <numeric-scale-factor>` approach and saved the monetary value as a 64-bit integer representing the number of cents:"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:144
# 89543f5248bc47d38fe1aa74ae7fabee
msgid "The ``long`` value can be converted to an appropriately formatted ``decimal`` value by multiplying ``price`` and ``NumberDecimal(\"0.01\")`` using the :expression:`$multiply` operator. The following aggregation pipeline assigns the converted value to the new ``priceDec`` field in the :pipeline:`$addFields` stage:"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:167
# e24ffe3e5417428192370e1ec638e15c
msgid "The results of the aggregation pipeline can be verified using the ``db.clothes.find()`` query:"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:178
# 498cc73d4b9a45a38167f84fbf4531a9
msgid "If you do not want to add a new field with the ``decimal`` value, the original field can be overwritten. The following :method:`~db.collection.update()` method first checks that ``price`` exists and that it is a ``long``, then transforms the ``long`` value to ``decimal`` and stores it in the ``priceDec`` field:"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:192
# 40e13ad280d34dc2b2b180f74b6563b1
msgid "The results can be verified using the ``db.clothes.find()`` query:"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:202
# a0a5df724fea40cda10161c052b03108
msgid "**Non-Numeric Transformation:**"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:204
# cc3e0f7753e94430bf37678868646385
msgid "Consider the following collection which used the :ref:`non-numeric <monetary-value-non-numeric>` model and saved the monetary value as a ``string`` with the exact representation of the value:"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:217
# 0e0f14d48e10471da1586880fa0cdcb0
msgid "The following function first checks that ``price`` exists and that it is a ``string``, then transforms the ``string`` value to a ``decimal`` value and stores it in the ``priceDec`` field:"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:228
# ea1d264f830a4250b21e6959459e2e7d
msgid "The function does not output anything to the command line. The results can be verified using the ``db.clothes.find()`` query:"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:240
# dca1e12b5b0b43bd95ee243f965a9278
msgid "Application Logic Transformation"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:242
# d2329da00a9e47adb2ef1cf2750e0ef3
msgid "It is possible to perform the transformation to the ``decimal`` type from within the application logic. In this scenario the application modified to perform the transformation as it accesses records."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:247
# 0f49cd9004184d94a25fff163a889081
msgid "The typical application logic is as follows:"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:249
# 80fb1ab2c0894b14a98aa8f0c34bebf0
msgid "Test that the new field exists and that it is of ``decimal`` type"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:251
# bc82d7ac91354983bcb0ecfe5068a4fd
msgid "If the new ``decimal`` field does not exist:"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:253
# 486db91fd2f24c7d9b8dc6cccf9562f9
msgid "Create it by properly converting old field values"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:255
# cfb1a4dc2234460d9598e1d4e37d576d
msgid "Remove the old field"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:257
# 734bb3822f6e460da786592988d45d8f
msgid "Persist the transformed record"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:262
# 03e9d81c277d4156b209c94c66ed3e3e
msgid "Using a Scale Factor"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:264
# 707f8484480548978d45158bd27d58fa
msgid "If you are using MongoDB version 3.4 or higher, using the :ref:`decimal <numeric-decimal>` type for modeling monetary data is preferable to the :ref:`Scale Factor <numeric-scale-factor>` method."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:269
# 88853cc3cc274fec82b6f100a364cbdb
msgid "To model monetary data using the scale factor approach:"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:271
# 8b6fc054b92c40d7b452b0a0a3e96e8d
msgid "Determine the maximum precision needed for the monetary value. For example, your application may require precision down to the tenth of one cent for monetary values in ``USD`` currency."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:275
# 93cb3b248b2d4fe0a7f10c60f7a28c02
msgid "Convert the monetary value into an integer by multiplying the value by a power of 10 that ensures the maximum precision needed becomes the least significant digit of the integer. For example, if the required maximum precision is the tenth of one cent, multiply the monetary value by 1000."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:281
# d2df40e9bb3149cd834156c618d5d955
msgid "Store the converted monetary value."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:283
# 05cdf8f8778f47ee9316304898c61159
msgid "For example, the following scales ``9.99 USD`` by 1000 to preserve precision up to one tenth of a cent."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:290
# 1359030bebc24ec0a66373650a30a54a
msgid "The model assumes that for a given currency value:"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:292
# 3688821691c747f6adf9f44e68fd3ecd
msgid "The scale factor is consistent for a currency; i.e. same scaling factor for a given currency."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:295
# b21ae004f5b14bd798f567c372d90f43
msgid "The scale factor is a constant and known property of the currency; i.e applications can determine the scale factor from the currency."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:298
# faddba35b2fd459ba1225fee8cef4162
msgid "When using this model, applications must be consistent in performing the appropriate scaling of the values."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:301
# e782c10e66464846abedb6fef43aa232
msgid "For use cases of this model, see :ref:`numeric-model-use-case`."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:308
# 2c5d076d624149f4b3411fc912baefb4
msgid "To model monetary data using the non-numeric model, store the value in two fields:"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:311
# f26b1c2f2fac43568fbc5998aeec360e
msgid "In one field, encode the exact monetary value as a non-numeric data type; e.g., ``BinData`` or a ``string``."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:314
# a399cee22efd47ed81debf0d1e7f6dd0
msgid "In the second field, store a double-precision floating point approximation of the exact value."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:317
# 319351d93b1c45b58837eef01b952912
msgid "The following example uses the non-numeric model to store ``9.99 USD`` for the price and ``0.25 USD`` for the fee:"
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:327
# 51c6f611d524426aa4ed2f8b8670c6d1
msgid "With some care, applications can perform range and sort queries on the field with the numeric approximation. However, the use of the approximation field for the query and sort operations requires that applications perform client-side post-processing to decode the non-numeric representation of the exact value and then filter out the returned documents based on the exact monetary value."
msgstr ""

#: ../source/tutorial/model-monetary-data.txt:334
# 9d5ca6f825a44d7bb087c7926b2c3fc6
msgid "For use cases of this model, see :ref:`non-numeric-model-use-case`."
msgstr ""

