# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2008-2016
# This file is distributed under the same license as the mongodb-manual package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-12-08 12:02-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../source/tutorial/geospatial-tutorial.txt:3
# a0ad27fa5bd6450395f2fe1ebce63bfc
msgid "Find Restaurants with Geospatial Queries"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:0
# 533a1718dbce4935b9a60487ef758f7a
msgid "On this page"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:14
# 728be75b468340f696b83b2063da0bc0
msgid "Overview"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:16
# 03044eb7a3b240348858ca68f71700eb
msgid "MongoDB's :term:`geospatial` indexing allows you to efficiently execute spatial queries on a collection that contains geospatial shapes and points. This tutorial will briefly introduce the concepts of geospatial indexes, and then demonstrate their use with :query:`$geoWithin`, :query:`$geoIntersects`, and :dbcommand:`geoNear`."
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:22
# 1b977d3c969342c28e2ead18afe0c9ea
msgid "To showcase the capabilities of geospatial features and compare different approaches, this tutorial will guide you through the process of writing queries for a simple geospatial application."
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:26
# 38d35ff25829439b95028eb524949b71
msgid "Suppose you are designing a mobile application to help users find restaurants in New York City. The application must:"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:29
# e7f542dd1694450ba7dfcedadf48f7f0
msgid "Determine the user's current neighborhood using :query:`$geoIntersects`,"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:30
# c44643c260f841e18dba7132e0a0c24d
msgid "Show the number of restaurants in that neighborhood using :query:`$geoWithin`, and"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:32
# ddabf3dd2766471b83c9efb9ed9c25ea
msgid "Find restaurants within a specified distance of the user using :query:`$nearSphere`."
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:35
# ebf30a69df46413da1b46523534331c5
msgid "This tutorial will use a ``2dsphere`` index to query for this data on spherical geometry."
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:39
# 7ed16a6b6cfd4c35bb22f8ad51c3a580
msgid "Differences Between Flat and Spherical Geometry"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:41
# a587a329ce41428e96dc42efc58a569d
msgid "Geospatial queries can use either flat or spherical geometries, depending on both the query and the type of index in use. ``2dsphere`` indexes support only spherical geometries, while ``2d`` indexes support both flat and spherical geometries."
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:46
# ccfd2fbdd2434bc491e218dd59e3fd62
msgid "However, queries using spherical geometries will be more performant and accurate with a ``2dsphere`` index, so you should always use ``2dsphere`` indexes on geographical geospatial fields."
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:50
# 19ef92214a4e4f8eb3b613f3b368a718
msgid "The following table shows what kind of geometry each geospatial operator will use:"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:57
# 39d98c06d7694e18a6da9d672c9fd7cd
msgid "Query Type"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:59
# a3c3da7accb94502a83eddfd172a64dd
msgid "Geometry Type"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:61
# 4a7914f4a0ea4d1d95bf991d1e5e492f
msgid "Notes"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:63
# d7816412845f4cb1b0cc42f79ff92ed9
msgid ":query:`$near` (:term:`GeoJSON` point, ``2dsphere`` index)"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:65
#: ../source/tutorial/geospatial-tutorial.txt:77
#: ../source/tutorial/geospatial-tutorial.txt:83
#: ../source/tutorial/geospatial-tutorial.txt:89
#: ../source/tutorial/geospatial-tutorial.txt:113
#: ../source/tutorial/geospatial-tutorial.txt:119
# 2def6f1cf17a4d3aba47547d553f3544
# ab1bbc13407645c889ff44d7dfa726f3
# 7f872898e30241d090a9f1c84158797f
# b20318efb0434ad08995fe151730a4fe
# f8af2358f2444905a8aec5c28900d252
# cd8412e06ab549a683c59dd66fd3024d
msgid "Spherical"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:69
# aa4bf60746874eb48c341ea2f0f04d6c
msgid ":query:`$near` (:term:`legacy coordinates <legacy coordinate pairs>`, ``2d`` index)"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:71
#: ../source/tutorial/geospatial-tutorial.txt:95
#: ../source/tutorial/geospatial-tutorial.txt:101
#: ../source/tutorial/geospatial-tutorial.txt:107
# b381f80f50944406b6fa39d3b0124421
# d849afaddb5c493da19611f815f774d1
# 49c7a1326aee480989f3b4e89e1904a7
# c031438723bf41ffa979748106b2c329
msgid "Flat"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:75
# ee68b98ee8f4406e81b26ed47297951b
msgid ":query:`$nearSphere` (:term:`GeoJSON` point, ``2dsphere`` index)"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:81
# a0f70d8a3a954024a84cc458cd10e674
msgid ":query:`$nearSphere` (:term:`legacy coordinates <legacy coordinate pairs>`, ``2d`` index)"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:85
# 390285fcf6e04933af9f3a1b761e9f02
msgid "Use :term:`GeoJSON` points instead."
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:87
# b4053c4f71324909b305c142f16723ee
msgid ":query:`$geoWithin` : { :query:`$geometry`: ... }"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:93
# f9cf6aa146ea4addb2d7f66ae580dfe2
msgid ":query:`$geoWithin` : { :query:`$box`: ... }"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:99
# f00aa7bebebd4fc8b96e150747313bf3
msgid ":query:`$geoWithin` : { :query:`$polygon`: ... }"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:105
# dd71b17372da49eebfeb0deab2a673d8
msgid ":query:`$geoWithin` : { :query:`$center`: ... }"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:111
# e3dd0901e88c4966b7724ad00b49c394
msgid ":query:`$geoWithin` : { :query:`$centerSphere`: ... }"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:117
# 57fe8c0daafc45bca9bf22634d49f99e
msgid ":query:`$geoIntersects`"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:123
# a6249075ce7a42f085e87b862fc01724
msgid "The :dbcommand:`geoNear` command and the :pipeline:`$geoNear` aggregation operator both operate in radians when using :term:`legacy coordinates <legacy coordinate pairs>`, and meters when using :term:`GeoJSON` points."
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:129
# 33ad6063d35640c89e4f16b427d835e6
msgid "Distortion"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:131
# 060a11544a794061911cf22d8ea58c08
msgid "Spherical geometry will appear distorted when visualized on a map due to the nature of projecting a three dimensional sphere, such as the earth, onto a flat plane."
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:135
# 421bfb05b95c44d49c656eecf2257348
msgid "For example, take the specification of the spherical square defined by the longitude latitude points ``(0,0)``, ``(80,0)``, ``(80,80)``, and ``(0,80)``. The following figure depicts the area covered by this region:"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:142
# 1193ddc504504324ab6efaa2d51d45a7
msgid "Searching for Restaurants"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:145
# 5106507fe7d44a27ac8533dd4fa6f20a
msgid "Prerequisites"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:147
# e174d83949f94dd8a4e5b23b95284a8a
msgid "Download the example datasets from `<https://raw.githubusercontent.com/mongodb/docs-assets/geospatial/neighborhoods.json>`_ and `<https://raw.githubusercontent.com/mongodb/docs-assets/geospatial/restaurants.json>`_. These contain the collections ``restaurants`` and ``neighborhoods`` respectively."
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:152
# e3a06fc18aab44a0861591cc7bb4bc58
msgid "After downloading the datasets, import them into the database:"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:159
# 443d5d53cf074fe1a1076b7c81af7196
msgid "The :dbcommand:`geoNear` command requires a geospatial index, and almost always improves performance of :query:`$geoWithin` and :query:`$geoIntersects` queries."
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:163
# 35d5b1f374a8491e982bb4f8ae96a4ca
msgid "Because this data is geographical, create a ``2dsphere`` index on each collection using the :program:`mongo` shell:"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:172
# e7bed9d7f4104102a046f4071bcc267c
msgid "Exploring the Data"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:174
# 7a24ce2469704f9a9d400d2eb727d18a
msgid "Inspect an entry in the newly-created ``restaurants`` collection from within the :program:`mongo` shell:"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:181
# 3f7261080ad14baab1cf80f2cd6dd8ac
msgid "This query returns a document like the following:"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:193
# 7b3e3dacbabc493d85ef383dc9046727
msgid "This restaurant document corresponds to the location shown in the following figure:"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:198
# fb515a59e2604dc7878d77faa546ea4b
msgid "Because the tutorial uses a ``2dsphere`` index, the geometry data in the ``location`` field must follow the doc:`GeoJSON format </reference/geojson>`."
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:201
# f67bd148f701421392b92a7510f3b2f6
msgid "Now inspect an entry in the ``neighborhoods`` collection:"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:207
# fce4b326d70848ed8cbe25bb48b86341
msgid "This query will return a document like the following:"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:224
# d9080dd7fb6c49dc8e5e987e035d1e3a
msgid "This geometry corresponds to the region depicted in the following figure:"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:229
# 85c135d86f684c56ac98a55138c65ebf
msgid "Find the Current Neighborhood"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:231
# 8ffa57768de749f68af93f0992a2ff18
msgid "Assuming the user’s mobile device can give a reasonably accurate location for the user, it is simple to find the user's current neighborhood with :query:`$geoIntersects`."
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:235
# ff83e12622ff4686b06fee0f217f4240
msgid "Suppose the user is located at -73.93414657 longitude and 40.82302903 latitude. To find the current neighborhood, you will specify a point using the special :query:`$geometry` field in :term:`GeoJSON` format:"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:243
# f22cf23b56dd46049223911851333383
msgid "This query will return the following result:"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:265
# fafbef0c598842e3896c3307c5844fda
msgid "Find all Restaurants in the Neighborhood"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:267
# 02305b0f710f4219b0a8383215e33003
msgid "You can also query to find all restaurants contained in a given neighborhood. Run the following in the :program:`mongo` shell to find the neighborhood containing the user, and then count the restaurants within that neighborhood:"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:276
# fe98696a1e1246dcb25b10b6886fec59
msgid "This query will tell you that there are 127 restaurants in the requested neighborhood, visualized in the following figure:"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:282
# a56f0b03738f4b97a712cc278043002b
msgid "Find Restaurants within a Distance"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:284
# c8da8bc8244244aebcb872b676ec4898
msgid "To find restaurants within a specified distance of a point, you can use either :query:`$geoWithin` with :query:`$centerSphere` to return results in unsorted order, or :query:`nearSphere` with :query:`$maxDistance` if you need results sorted by distance."
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:290
# 2211dd9d67f3499780ef3282b8719eff
msgid "Unsorted with ``$geoWithin``"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:292
# dbb8aa5152e04057955318ffc84d3d9b
msgid "To find restaurants within a circular region, use :query:`$geoWithin` with :query:`$centerSphere`. :query:`$centerSphere` is a MongoDB-specific syntax to denote a circular region by specifying the center and the radius in radians."
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:296
# f5a64eef37244a2daa3dcc1f7fb332c0
msgid ":query:`$geoWithin` does not return the documents in any specific order, so it may show the user the furthest documents first."
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:299
# 2b49ddd5269c42c9a133ea5825e50d49
msgid "The following will find all restaurants within five miles of the user:"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:307
# 6a3a10c375df49c9ac9ba4897052839e
msgid ":query:`$centerSphere`'s second argument accepts the radius in radians, so you must divide it by the radius of the earth in miles. See :doc:`/tutorial/calculate-distances-using-spherical-geometry-with-2d-geospatial-indexes` for more information on converting between distance units."
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:313
# 01b4c8ed789d4953b9470748eb5ceb35
msgid "Sorted with ``$nearSphere``"
msgstr ""

#: ../source/tutorial/geospatial-tutorial.txt:315
# 3a4e3590413f49feaa9ba552997b108c
msgid "You may also use :query:`$nearSphere` and specify a :query:`$maxDistance` term in meters. This will return all restaurants within five miles of the user in sorted order from nearest to farthest:"
msgstr ""

