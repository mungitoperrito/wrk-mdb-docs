#
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-12-08 12:02-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

# 8d030c14072a45f1a66cb5ad29800103
#: ../source/core/journaling.txt:5
msgid "Journaling"
msgstr ""

# 75cde65ef88e49868cce1985b2c2dd24
#: ../source/core/journaling.txt
msgid "On this page"
msgstr ""

# 3a96bfb979f64b5f9489158fa9bad9a3
#: ../source/core/journaling.txt:15
msgid ""
"To provide durability in the event of a failure, MongoDB uses *write "
"ahead logging* to on-disk :term:`journal` files."
msgstr ""

# 35731402160a4f95a23af9d7478f7cdd
#: ../source/core/journaling.txt:21
msgid "Journaling and the WiredTiger Storage Engine"
msgstr ""

# b4c1dd9c5a084518840479c0442035fe
#: ../source/core/journaling.txt:25
msgid ""
"The *log* mentioned in this section refers to the WiredTiger write-ahead "
"log (i.e. the journal) and not the MongoDB log file."
msgstr ""

# 00cb0a2b3cd04d779959f96a0d355219
#: ../source/core/journaling.txt:28
msgid ""
":doc:`WiredTiger </core/wiredtiger>` uses :ref:`checkpoints <storage-"
"wiredtiger-checkpoints>` to provide a consistent view of data on disk and"
" allow MongoDB to recover from the last checkpoint. However, if MongoDB "
"exits unexpectedly in between checkpoints, journaling is required to "
"recover information that occurred after the last checkpoint."
msgstr ""

# 2c2fb315d56548edb3bb48f883b7bb47
#: ../source/core/journaling.txt:34
msgid "With journaling, the recovery process:"
msgstr ""

# 3ed2b94b68274ae39e37ab667271b2b9
#: ../source/core/journaling.txt:36
msgid "Looks in the data files to find the identifier of the last checkpoint."
msgstr ""

# d43f31800db44d5c9bdc948d055b0d1b
#: ../source/core/journaling.txt:39
msgid ""
"Searches in the journal files for the record that matches the identifier "
"of the last checkpoint."
msgstr ""

# 0ee3d690d0914b83a618672f8db07be7
#: ../source/core/journaling.txt:42
msgid "Apply the operations in the journal files since the last checkpoint."
msgstr ""

# cda6020da13e45e7a00c044712ceda3e
# 0d8b381d28ea472eb8ed3c454996f3d8
#: ../source/core/journaling.txt:47 ../source/core/journaling.txt:121
msgid "Journaling Process"
msgstr ""

# e316ccf42f10457fb481d2d7fae4d578
#: ../source/core/journaling.txt:51
msgid ""
"With journaling, WiredTiger creates one journal record for each client "
"initiated write operation. The journal record includes any internal write"
" operations caused by the initial write. For example, an update to a "
"document in a collection may result in modifications to the indexes; "
"WiredTiger creates a single journal record that includes both the update "
"operation and its associated index modifications."
msgstr ""

# c8372eba89cc4537bee699733c2ba6fc
#: ../source/core/journaling.txt:58
msgid ""
"MongoDB configures WiredTiger to use in-memory buffering for storing the "
"journal records. Threads coordinate to allocate and copy into their "
"portion of the buffer. All journal records up to 128 kB are buffered."
msgstr ""

# 6e6dba5b9e424d05b4e94ecbdce63cf4
#: ../source/core/journaling.txt:63
msgid ""
"WiredTiger syncs the buffered journal records to disk according to the "
"following intervals or conditions:"
msgstr ""

# b120e828b4a24b48a4d80f8d3647a10b
#: ../source/includes/extracts/wt-journal-frequency.rst:1
msgid "Every 50 milliseconds."
msgstr ""

# f5dac2090194473bb5dc7a0d8f02b8bf
#: ../source/includes/extracts/wt-journal-frequency.rst:4
msgid ""
"MongoDB sets checkpoints to occur in WiredTiger on user data at an "
"interval of 60 seconds or when 2 GB of journal data has been written, "
"whichever occurs first."
msgstr ""

# 12a6366be3ea40389fbb5ba95f5f8f67
#: ../source/includes/extracts/wt-journal-frequency.rst:8
msgid ""
"If the write operation includes a write concern of :writeconcern:`j: true"
" <j>`, WiredTiger forces a sync of the WiredTiger journal files."
msgstr ""

# cd65108d0a52449c995e463d2ecb9ab6
#: ../source/includes/extracts/wt-journal-frequency.rst:11
msgid ""
"Because MongoDB uses a journal file size limit of 100 MB, WiredTiger "
"creates a new journal file approximately every 100 MB of data. When "
"WiredTiger creates a new journal file, WiredTiger syncs the previous "
"journal file."
msgstr ""

# ab79d0b17fd246f598c540fb0160e03a
#: ../source/core/journaling.txt:70
msgid ""
"In between write operations, while the journal records remain in the "
"WiredTiger buffers, updates can be lost following a hard shutdown of "
":program:`mongod`."
msgstr ""

# d2d08aa6ebc94cba965ced1744299510
#: ../source/core/journaling.txt:75
msgid ""
"The :dbcommand:`serverStatus` command returns information on the "
"WiredTiger journal statistics in the :data:`wiredTiger.log <data:: "
"serverStatus.wiredTiger.log>` field."
msgstr ""

# 93384aad52ec437ea31e995c9d2d9750
# b30afe067f27478d9ee519dd2b6bb293
#: ../source/core/journaling.txt:80 ../source/core/journaling.txt:179
msgid "Journal Files"
msgstr ""

# a2d8eda9a71b42a5b29ac4ec88aec8ef
#: ../source/core/journaling.txt:82
msgid ""
"For the journal files, MongoDB creates a subdirectory named ``journal`` "
"under the :setting:`~storage.dbPath` directory. WiredTiger journal files "
"have names with the following format ``WiredTigerLog.<sequence>`` where "
"``<sequence>`` is a zero-padded number starting from ``0000000001``."
msgstr ""

# e138ddecb765460dad1e0c0ae3678914
#: ../source/core/journaling.txt:88
msgid ""
"Journal files contain a record per each write operation. Each record has "
"a unique identifier."
msgstr ""

# ee4871b98fdb4e2f981458a1ece1cfc4
#: ../source/core/journaling.txt:91
msgid ""
"MongoDB configures WiredTiger to use snappy compression for the "
"journaling data."
msgstr ""

# 7a78112d7d5645bcbb54471b99a2f2f3
#: ../source/includes/fact-wiredtiger-log-compression-limit.rst:1
msgid ""
"Minimum log record size for WiredTiger is 128 bytes. If a log record is "
"128 bytes or smaller, WiredTiger does not compress that record."
msgstr ""

# da0148d84a674eeb9c9a49528e873058
#: ../source/core/journaling.txt:96
msgid ""
"WiredTiger journal files for MongoDB have a maximum size limit of "
"approximately 100 MB. Once the file exceeds that limit, WiredTiger "
"creates a new journal file."
msgstr ""

# ee9c4cb66fc9493e8ed9ce6aaf05cfbd
#: ../source/core/journaling.txt:100
msgid ""
"WiredTiger automatically removes old journal files to maintain only the "
"files needed to recover from last checkpoint."
msgstr ""

# b8b6f4ee2e124f7fa6823c1810f7d687
#: ../source/core/journaling.txt:103
msgid "WiredTiger will pre-allocate journal files."
msgstr ""

# ab15396a0d884b909e27df6dfcf1edde
#: ../source/core/journaling.txt:108
msgid "Journaling and the MMAPv1 Storage Engine"
msgstr ""

# a9930c0d852a42f1b2dd6e42280d1d27
#: ../source/core/journaling.txt:110
msgid ""
"With :doc:`MMAPv1 </core/mmapv1>`, when a write operation occurs, MongoDB"
" updates the in-memory view. With journaling enabled, MongoDB writes the "
"in-memory changes first to on-disk journal files. If MongoDB should "
"terminate or encounter an error before committing the changes to the data"
" files, MongoDB can use the journal files to apply the write operation to"
" the data files and maintain a consistent state."
msgstr ""

# 385e5a84157e424a9eea071e0fd87cb7
#: ../source/core/journaling.txt:123
msgid ""
"With journaling, MongoDB's storage layer has two internal views of the "
"data set: the *private view*, used to write to the journal files, and the"
" *shared view*, used to write to the data files:"
msgstr ""

# a995de5e203c44d3bf2be70589afa1f7
#: ../source/core/journaling.txt:127
msgid "MongoDB first applies write operations to the private view."
msgstr ""

# e96c9cc7f649400fbe888ff1a41a9d9c
#: ../source/core/journaling.txt:129
msgid ""
"MongoDB then applies the changes in the private view to the on-disk "
":ref:`journal files <journaling-journal-files>` in the ``journal`` "
"directory roughly every 100 milliseconds. MongoDB records the write "
"operations to the on-disk journal files in batches called *group "
"commits*. Grouping the commits help minimize the performance impact of "
"journaling since these commits must block all writers during the commit. "
"Writes to the journal are atomic, ensuring the consistency of the on-disk"
" journal files. For information on the frequency of the commit interval, "
"see :setting:`storage.journal.commitIntervalMs`."
msgstr ""

# caba0c9da2524d7c9a9cc20c00289bdc
#: ../source/core/journaling.txt:140
msgid ""
"Upon a journal commit, MongoDB applies the changes from the journal to "
"the shared view."
msgstr ""

# 24a5f1f7201048e0a3a5c087397d04bb
#: ../source/core/journaling.txt:143
msgid ""
"Finally, MongoDB applies the changes in the shared view to the data "
"files. More precisely, at default intervals of 60 seconds, MongoDB asks "
"the operating system to flush the shared view to the data files. The "
"operating system may choose to flush the shared view to disk at a higher "
"frequency than 60 seconds, particularly if the system is low on free "
"memory. To change the interval for writing to the data files, use the "
":setting:`storage.syncPeriodSecs` setting."
msgstr ""

# ff270d6dea344299bf7444a411055564
#: ../source/core/journaling.txt:151
msgid ""
"If the :program:`mongod` instance were to crash without having applied "
"the writes to the data files, the journal could replay the writes to the "
"shared view for eventual write to the data files."
msgstr ""

# f58a7b99ccdd4a2a87db624f2b075510
#: ../source/core/journaling.txt:155
msgid ""
"When MongoDB flushes write operations to the data files, MongoDB notes "
"which journal writes have been flushed. Once a journal file contains only"
" flushed writes, it is no longer needed for recovery and MongoDB can "
"recycle it for a new journal file."
msgstr ""

# d5ccc77a1b984a73b310f45f7617cbb8
#: ../source/core/journaling.txt:160
msgid ""
"Once the journal operations have been applied to the shared view and "
"flushed to disk (i.e. pages in the shared view and  private view are in "
"sync), MongoDB asks the operating system to remap the shared view to the "
"private view in order to save physical RAM. MongoDB routinely asks the "
"operating system to remap the shared view to the private view in order to"
" save physical RAM. Upon a new remapping, the operating system knows that"
" physical memory pages can be shared between the shared view and the "
"private view mappings."
msgstr ""

# 31ccb04377f24f4596deb0999d32de53
#: ../source/core/journaling.txt:171
msgid ""
"The interaction between the shared view and the on-disk data files is "
"similar to how MongoDB works *without* journaling. Without journaling, "
"MongoDB asks the operating system to flush in-memory changes to the data "
"files every 60 seconds."
msgstr ""

# 3b7f46d95fd14169ae5fe2c444cf8c3d
#: ../source/core/journaling.txt:181
msgid ""
"With journaling enabled, MongoDB creates a subdirectory named ``journal``"
" under the :setting:`~storage.dbPath` directory. The ``journal`` "
"directory contains journal files named ``j._<sequence>`` where "
"``<sequence>`` is an integer starting from ``0`` and a \"last sequence "
"number\" file ``lsn``."
msgstr ""

# 37d818e71358490e80bc394f5057e20c
#: ../source/core/journaling.txt:187
msgid ""
"Journal files contain the write ahead logs; each journal entry describes "
"the bytes the write operation changed in the data files. Journal files "
"are append-only files. When a journal file holds 1 gigabyte of data, "
"MongoDB creates a new journal file. If you use the "
":setting:`storage.smallFiles` option when starting :program:`mongod`, you"
" limit the size of each journal file to 128 megabytes."
msgstr ""

# 0812b7b0fd8c4fae9df3119fbd994ae8
#: ../source/core/journaling.txt:194
msgid ""
"The ``lsn`` file contains the last time MongoDB flushed the changes to "
"the data files."
msgstr ""

# 87754e52f6a64f3ba54d1d5f7a7662ea
#: ../source/core/journaling.txt:197
msgid ""
"Once MongoDB applies all the write operations in a particular journal "
"file to the data files, MongoDB can recycle it for a new journal file."
msgstr ""

# 86ed1c22578f49f69afe5b84e57e6264
#: ../source/core/journaling.txt:200
msgid ""
"Unless you write *many* bytes of data per second, the ``journal`` "
"directory should contain only two or three journal files."
msgstr ""

# 811b038529ed404bb70f0d6397dfa51f
#: ../source/core/journaling.txt:203
msgid ""
"A clean shutdown removes all the files in the journal directory. A dirty "
"shutdown (crash) leaves files in the journal directory; these are used to"
" automatically recover the database to a consistent state when the mongod"
" process is restarted."
msgstr ""

# 211b7632aa6b453db753175fe67c88d5
#: ../source/core/journaling.txt:209
msgid "Journal Directory"
msgstr ""

# 0d251428eb39455bb34f3f4f5c2a5b11
#: ../source/core/journaling.txt:211
msgid ""
"To speed the frequent sequential writes that occur to the current journal"
" file, you can ensure that the journal directory is on a different "
"filesystem from the database data files."
msgstr ""

# 355707cedcb14bd29acdbf57c4d0b88a
#: ../source/core/journaling.txt:217
msgid ""
"If you place the journal on a different filesystem from your data files, "
"you *cannot* use a filesystem snapshot alone to capture valid backups of "
"a :setting:`~storage.dbPath` directory. In this case, use "
":method:`~db.fsyncLock()` to ensure that database files are consistent "
"before the snapshot and :method:`~db.fsyncUnlock()` once the snapshot is "
"complete."
msgstr ""

# a87cfd1fc76246f68b2dbdda7dcf530e
#: ../source/core/journaling.txt:225
msgid "Preallocation Lag"
msgstr ""

# 69d3a6974e7a45a49700c66e4eaf2dbc
#: ../source/core/journaling.txt:227
msgid ""
"MongoDB may preallocate journal files if the :program:`mongod` process "
"determines that it is more efficient to preallocate journal files than "
"create new journal files as needed."
msgstr ""

# 87e1166c23674fb0aacaa918343062de
#: ../source/core/journaling.txt:231
msgid ""
"Depending on your filesystem, you might experience a preallocation lag "
"the first time you start a :program:`mongod` instance with journaling "
"enabled. The amount of time required to pre-allocate files might last "
"several minutes; during this time, you will not be able to connect to the"
" database. This is a one-time preallocation and does not occur with "
"future invocations."
msgstr ""

# bedcfedaf0354a8f939806be677e2231
#: ../source/core/journaling.txt:238
msgid "To avoid preallocation lag, see :ref:`journaling-avoid-preallocation-lag`."
msgstr ""

# a03ad277efb343b59759b1c640709b67
#: ../source/core/journaling.txt:243
msgid "Journaling and the In-Memory Storage Engine"
msgstr ""

# 2f0bb89b1b1b4fbf90c174828cd001de
#: ../source/core/journaling.txt:245
msgid ""
"Starting in MongoDB Enterprise version 3.2.6, the :doc:`In-Memory Storage"
" Engine </core/inmemory>` is part of general availability (GA). Because "
"its data is kept in memory, there is no separate journal. Write "
"operations with a write concern of :writeconcern:`j: true <j>` are "
"immediately acknowledged."
msgstr ""

# 273027cd52824444ac0363a6e19cd02b
#: ../source/includes/extracts/no-journaling-writeConcernMajorityJournalDefault-false.rst:2
msgid ""
"If any voting member of a replica set runs without :ref:`journaling "
"<journaling-internals>` (i.e. either runs an :ref:`in-memory storage "
"engine<storage-inmemory>` or runs with journaling disabled), you must set"
" :rsconf:`writeConcernMajorityJournalDefault` to ``false``."
msgstr ""

# f9e88894223441819aa563712fe305b8
#: ../source/includes/extracts/no-journaling-rollback.rst:1
msgid ""
"With :rsconf:`writeConcernMajorityJournalDefault` set to ``false``, "
"MongoDB will not wait for :writeconcern:`w: \"majority\" <\"majority\">` "
"writes to be durable before acknowledging the writes. As such, "
":writeconcern:`\"majority\"` write operations could possibly roll back in"
" the event of a loss of a replica set member."
msgstr ""

# 622c0322e200479aab5faaf80f19863a
#: ../source/core/journaling.txt:255
msgid ":ref:`In-Memory Storage Engine: Durability <inmemory-durability>`"
msgstr ""

#~ msgid "Journaling Mechanics"
#~ msgstr ""

#~ msgid ""
#~ msgstr ""

#~ msgid "Storage Views used in Journaling"
#~ msgstr ""

#~ msgid "How Journaling Records Write Operations"
#~ msgstr ""

#~ msgid "document insertion/updates"
#~ msgstr ""

#~ msgid "index modifications"
#~ msgstr ""

#~ msgid "metadata changes to the namespace files"
#~ msgstr ""

#~ msgid "creation and dropping of databases and their associated data files"
#~ msgstr ""

