#
msgid ""
msgstr ""
"Project-Id-Version: mongodb-manual 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2016-12-08 12:02-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.3.4\n"

# 2fcc3885bf344f7bbec7f5783f8ca514
#: ../source/tutorial/restore-replica-set-from-backup.txt:3
msgid "Restore a Replica Set from MongoDB Backups"
msgstr ""

# 63ed9271a96e4b2bb368d5e90f948f14
#: ../source/tutorial/restore-replica-set-from-backup.txt
msgid "On this page"
msgstr ""

# 364b3d2475c2485a93effcb2779385ab
#: ../source/tutorial/restore-replica-set-from-backup.txt:13
msgid ""
"This procedure outlines the process for taking MongoDB data and restoring"
" that data into a new :term:`replica set`. Use this approach for seeding "
"test deployments from production backups or as part of disaster recovery."
msgstr ""

# 4f2792c1579e4d1d80a4cd6b36726c49
#: ../source/tutorial/restore-replica-set-from-backup.txt:19
msgid ""
"You *cannot* restore a single data set to three new :program:`mongod` "
"instances and **then** create a replica set. If you copy the data set to "
"each :program:`mongod` instance and then create the replica set, MongoDB "
"will force the secondaries to perform an :term:`initial sync`. The "
"procedures in this document describe the correct and efficient ways to "
"deploy a restored replica set."
msgstr ""

# e3b574bf7ab2451088929a2d3b9d518c
#: ../source/tutorial/restore-replica-set-from-backup.txt:26
msgid ""
"You can also use :program:`mongorestore` to restore database files using "
"data created with :program:`mongodump`. See :doc:`/tutorial/backup-and-"
"restore-tools` for more information."
msgstr ""

# 584be5f7a0c346a19506968ca130c285
#: ../source/tutorial/restore-replica-set-from-backup.txt:31
msgid "Restore Database into a Single Node Replica Set"
msgstr ""

# fef5922bbe8d4cf7bd75b6f7b049ef85
#: ../source/tutorial/restore-replica-set-from-backup.txt:38
msgid "Add Members to the Replica Set"
msgstr ""

# 70c9cf0ac17748f2a108bb3556051850
#: ../source/tutorial/restore-replica-set-from-backup.txt:40
msgid ""
"MongoDB provides two options for restoring secondary members of a replica"
" set:"
msgstr ""

# 8389a318377d4e19b1ad5c9170fb1e0e
#: ../source/tutorial/restore-replica-set-from-backup.txt:43
msgid ""
":ref:`Manually copy the database files <restore-rs-copy-db-files>` to "
"each data directory."
msgstr ""

# 31db683ca096479f83170662dd7f3bc7
#: ../source/tutorial/restore-replica-set-from-backup.txt:46
msgid ""
":ref:`Allow initial sync <restore-rs-initial-sync>` to distribute data "
"automatically."
msgstr ""

# d0dcb413ce0c4a9fba295364d3bc80fd
#: ../source/tutorial/restore-replica-set-from-backup.txt:51
msgid ""
"If your database is large, initial sync can take a long time to complete."
" For large databases, it might be preferable to copy the database files "
"onto each host."
msgstr ""

# 5e4438f497014e698d60823eac7e76d4
#: ../source/tutorial/restore-replica-set-from-backup.txt:59
msgid "Copy Database Files and Restart :program:`mongod` Instance"
msgstr ""

# c62ef1250f3e45fa8823bd4abf30fc7b
#: ../source/tutorial/restore-replica-set-from-backup.txt:61
msgid ""
"Use the following sequence of operations to \"seed\" additional members "
"of the replica set with the restored data by copying MongoDB data files "
"directly."
msgstr ""

# 3cc329b2f91b46778e8be78fb83cdf18
#: ../source/tutorial/restore-replica-set-from-backup.txt:70
msgid "Update Secondaries using Initial Sync"
msgstr ""

# ae38f6f6a35e4d22a5ad78ae6e7e5617
#: ../source/tutorial/restore-replica-set-from-backup.txt:72
msgid ""
"Use the following sequence of operations to \"seed\" additional members "
"of the replica set with the restored data using the default :ref:`initial"
" sync <replica-set-initial-sync>` operation."
msgstr ""

#~ msgid ""
#~ "This procedure outlines the process for"
#~ " taking MongoDB data and restoring "
#~ "that data into a new :term:`replica "
#~ "set`. Use this approach for seeding "
#~ "test deployments from production backups "
#~ "as well as part of disaster "
#~ "recovery."
#~ msgstr ""

#~ msgid ""
#~ "You *cannot* restore a single data "
#~ "set to three new :program:`mongod` "
#~ "instances and *then* create a replica"
#~ " set. In this situation MongoDB will"
#~ " force the secondaries to perform an"
#~ " initial sync. The procedures in this"
#~ " document describe the correct and "
#~ "efficient ways to deploy a replica "
#~ "set."
#~ msgstr ""

#~ msgid "Manually copy the database files to each data directory."
#~ msgstr ""

#~ msgid ""
#~ "Allow :ref:`initial sync <replica-set-"
#~ "initial-sync>` to distribute data "
#~ "automatically."
#~ msgstr ""

#~ msgid "The following sections outlines both approaches."
#~ msgstr ""

#~ msgid ""
#~ "Use the following sequence of operations"
#~ " to \"seed\" additional members of "
#~ "the replica set with the restored "
#~ "data using the default *initial sync*"
#~ " operation."
#~ msgstr ""

